//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.1 (entitiestodtos.codeplex.com).
//     Timestamp: 2019/05/03 - 09:27:52
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Sigesoft.Server.WebClientAdmin.DAL;

namespace Sigesoft.Server.WebClientAdmin.BE
{

    /// <summary>
    /// Assembler for <see cref="ordenexcel"/> and <see cref="ordenexcelDto"/>.
    /// </summary>
    public static partial class ordenexcelAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="ordenexcelDto"/> converted from <see cref="ordenexcel"/>.</param>
        static partial void OnDTO(this ordenexcel entity, ordenexcelDto dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="ordenexcel"/> converted from <see cref="ordenexcelDto"/>.</param>
        static partial void OnEntity(this ordenexcelDto dto, ordenexcel entity);

        /// <summary>
        /// Converts this instance of <see cref="ordenexcelDto"/> to an instance of <see cref="ordenexcel"/>.
        /// </summary>
        /// <param name="dto"><see cref="ordenexcelDto"/> to convert.</param>
        public static ordenexcel ToEntity(this ordenexcelDto dto)
        {
            if (dto == null) return null;

            var entity = new ordenexcel();

            entity.v_OrdenExcelId = dto.v_OrdenExcelId;
            entity.v_OrganizationId = dto.v_OrganizationId;
            entity.v_NombreColumna = dto.v_NombreColumna;
            entity.v_KeyColumna = dto.v_KeyColumna;
            entity.i_Orden = dto.i_Orden;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="ordenexcel"/> to an instance of <see cref="ordenexcelDto"/>.
        /// </summary>
        /// <param name="entity"><see cref="ordenexcel"/> to convert.</param>
        public static ordenexcelDto ToDTO(this ordenexcel entity)
        {
            if (entity == null) return null;

            var dto = new ordenexcelDto();

            dto.v_OrdenExcelId = entity.v_OrdenExcelId;
            dto.v_OrganizationId = entity.v_OrganizationId;
            dto.v_NombreColumna = entity.v_NombreColumna;
            dto.v_KeyColumna = entity.v_KeyColumna;
            dto.i_Orden = entity.i_Orden;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="ordenexcelDto"/> to an instance of <see cref="ordenexcel"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<ordenexcel> ToEntities(this IEnumerable<ordenexcelDto> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="ordenexcel"/> to an instance of <see cref="ordenexcelDto"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<ordenexcelDto> ToDTOs(this IEnumerable<ordenexcel> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
