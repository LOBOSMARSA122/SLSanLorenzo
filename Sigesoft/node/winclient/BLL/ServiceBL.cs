using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Dynamic;
using Sigesoft.Node.WinClient.BE;
using Sigesoft.Node.WinClient.DAL;
using Sigesoft.Common;
using System.Collections;
using System.Transactions;
using System.Data.Linq.SqlClient;
namespace Sigesoft.Node.WinClient.BLL
{
	public class ServiceBL
	{

		#region Service

		public List<ServiceList> GetServicesPagedAndFiltered(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds, DateTime? pFci, DateTime? pFcf)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join A1 in dbContext.servicecomponent on A.v_ServiceId equals A1.v_ServiceId into A1_join
							from A1 in A1_join.DefaultIfEmpty()

							join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
							from B in B_join.DefaultIfEmpty()

							join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
							from C in C_join.DefaultIfEmpty()

							join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
							from D in D_join.DefaultIfEmpty()

							join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

							join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId

							join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId

							join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
							from H in H_join.DefaultIfEmpty()

							join I in dbContext.person on A.v_PersonId equals I.v_PersonId

							join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
							from K in K_join.DefaultIfEmpty()

							join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
							from L in L_join.DefaultIfEmpty()

							join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
							from et in et_join.DefaultIfEmpty()

							// Empresa / Sede Cliente ******************************************************
							join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
									equals new { a = oc.v_OrganizationId } into oc_join
							from oc in oc_join.DefaultIfEmpty()

							join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
								  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
							from lc in lc_join.DefaultIfEmpty()

							//**********************************************************************************

							join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
															equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
															equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()
							where A.i_IsDeleted == 0 && D.i_LineStatusId == (int)LineStatus.EnCircuito
							select new ServiceList
							{
								b_FechaEntrega = false,
								v_ServiceComponentId = A1.v_ServiceComponentId,
								i_ServiceComponentStatusId = A1.i_ServiceComponentStatusId,
								v_ServiceId = A.v_ServiceId,
								v_CalendarId = D.v_CalendarId,
								v_ProtocolId = A.v_ProtocolId,
								v_PersonId = A.v_PersonId,
								i_MasterServiceId = A.i_MasterServiceId.Value,
								v_MasterServiceName = C.v_Value1,
								i_ServiceStatusId = A.i_ServiceStatusId.Value,
								v_ServiceStatusName = B.v_Value1,
								i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
								d_ServiceDate = A.d_ServiceDate.Value,
								d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
								d_ObsExpirationDate = A.d_ObsExpirationDate.Value,
								i_FlagAgentId = A.i_FlagAgentId.Value,
								d_DateTimeCalendar = D.d_DateTimeCalendar.Value,

								v_OrganizationName = F.v_Name,
								v_GenderName = G.v_Name,
								v_ServiceTypeName = H.v_Value1,
								i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
								i_EsoTypeId = E.i_EsoTypeId.Value,
								v_LocationId = E.v_EmployerLocationId,
								v_LocationName = G.v_Name,
								v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
								v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
								v_ProtocolName = E.v_Name,
								v_CreationUser = J1.v_UserName,
								v_UpdateUser = J2.v_UserName,
								d_CreationDate = A.d_InsertDate,
								d_UpdateDate = A.d_UpdateDate,
								v_AptitudeStatusName = K.v_Value1,
								v_DocTypeName = L.v_Value1,
								v_DocNumber = I.v_DocNumber,

								v_CustomerOrganizationId = E.v_CustomerOrganizationId,
								v_CustomerLocationId = E.v_CustomerLocationId,
								v_EsoTypeName = et.v_Value1,
								i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
								v_ComponentId = A1.v_ComponentId,
								i_IsFac = A.i_IsFac,
								i_ServiceId = D.i_ServiceId.Value,
								d_FechaEntrega = A.d_FechaEntrega
							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				{
					query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}


				var query1 = (from A in query.ToList()
							  select new ServiceList
							  {
								  b_FechaEntrega = A.b_FechaEntrega,
								  v_ServiceComponentId = A.v_ServiceComponentId,
								  i_ServiceComponentStatusId = A.i_ServiceComponentStatusId,
								  v_ServiceId = A.v_ServiceId,
								  v_CalendarId = A.v_CalendarId,
								  v_ProtocolId = A.v_ProtocolId,
								  v_PersonId = A.v_PersonId,
								  i_MasterServiceId = A.i_MasterServiceId,
								  v_MasterServiceName = A.v_MasterServiceName,
								  i_ServiceStatusId = A.i_ServiceStatusId.Value,
								  v_ServiceStatusName = A.v_ServiceStatusName,
								  i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
								  d_ServiceDate = A.d_ServiceDate,
								  d_GlobalExpirationDate = A.d_GlobalExpirationDate,
								  d_ObsExpirationDate = A.d_ObsExpirationDate,
								  i_FlagAgentId = A.i_FlagAgentId,
								  d_DateTimeCalendar = A.d_DateTimeCalendar,
								  //hola

								  v_OrganizationName = A.v_OrganizationName,
								  v_GenderName = A.v_GenderName,
								  v_ServiceTypeName = A.v_ServiceTypeName,
								  i_ServiceTypeId = A.i_ServiceTypeId,
								  i_EsoTypeId = A.i_EsoTypeId,
								  v_LocationId = A.v_LocationId,
								  v_LocationName = A.v_LocationName,
								  v_Pacient = A.v_Pacient,
								  v_PacientDocument = A.v_PacientDocument,
								  v_ProtocolName = A.v_ProtocolName,
								  v_CreationUser = A.v_CreationUser,
								  v_UpdateUser = A.v_UpdateUser,
								  d_CreationDate = A.d_CreationDate,
								  d_UpdateDate = A.d_UpdateDate,
								  v_AptitudeStatusName = A.v_AptitudeStatusName,
								  v_DocTypeName = A.v_DocTypeName,
								  v_DocNumber = A.v_DocNumber,

								  v_CustomerOrganizationId = A.v_CustomerOrganizationId,
								  v_CustomerLocationId = A.v_CustomerLocationId,
								  v_EsoTypeName = A.v_EsoTypeName,
								  i_StatusLiquidation = A.i_StatusLiquidation,
								  v_ComponentId = A.v_ComponentId,
								  i_IsFac = A.i_IsFac,
								  i_ServiceId = A.i_ServiceId,
								  Diagnosticos = GetDiagnosticByServiceIdforGrid(A.v_ServiceId),
								  d_FechaEntrega = A.d_FechaEntrega
							  }).ToList();



				List<ServiceList> objData = query1.ToList();
				pobjOperationResult.Success = 1;

				if (componentIds != null)
				{
					var xx = objData.FindAll(p => componentIds.Contains(p.v_ComponentId));

					var y = xx.GroupBy(g => g.v_ServiceId)
								  .Select(s => s.First());

					return y.ToList();
				}
				else
				{
					var y = objData.GroupBy(g => g.v_ServiceId)
							   .Select(s => s.First());

					if (pFcf == DateTime.Parse("01/01/2050") && pFci == DateTime.Parse("01/01/2000"))
					{
						return y.ToList();
					}
					else
					{
						var prueba = y.Where(s => s.Diagnosticos.Any(p => p.d_ExpirationDateDiagnostic > pFci && p.d_ExpirationDateDiagnostic < pFcf)).ToList();
						return prueba.ToList();
					}

				}




			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ControlVacunasList> GetControlVacunasPagedAndFiltered(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId

							join C in dbContext.organization on B.v_EmployerOrganizationId equals C.v_OrganizationId

							join D in dbContext.person on A.v_PersonId equals D.v_PersonId

							where A.i_IsDeleted == 0

							select new ControlVacunasList
							{
								v_CustomerOrganizationId = B.v_CustomerOrganizationId,
								v_CustomerLocationId = B.v_CustomerLocationId,
								v_ServiceId = A.v_ServiceId,
								d_ServiceDate = (DateTime)A.d_ServiceDate,
								v_OrganizationName = C.v_Name,
								v_Pacient = D.v_FirstLastName + " " + D.v_SecondLastName + " " + D.v_FirstName,

							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				{
					query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}


				var query1 = (from A in query.ToList()
							  select new ControlVacunasList
							  {
								  v_ServiceId = A.v_ServiceId,
								  d_ServiceDate = A.d_ServiceDate,
								  v_OrganizationName = A.v_OrganizationName,
								  v_Pacient = A.v_Pacient,
								  Vacunas = ObtenerVacunas(A.v_ServiceId)
							  }
								  ).ToList();

				pobjOperationResult.Success = 1;

				var Resultado = query1.FindAll(p => p.Vacunas.Count != 0);
				return Resultado.ToList();

			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		private List<VacunasList> ObtenerVacunas(string pstrServiceId)
		{

			string[] VacunasIds = new string[]
			{                
				Constants.VACUNA_ANTIRRABICA,
				Constants.VACUNA_DIFTERIA,
				Constants.VACUNA_FIEBRE_AMARILLA,
				Constants.VACUNA_HEPATITIS_A,
				Constants.VACUNAS_HEPATITIS_B,
				Constants.VACUNA_INFLUENZA,
				Constants.VACUNA_TIFOIDEA,
				Constants.VACUNA_TRIPLE,
				Constants.VACUNA_VARICELA,
			};

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from A in dbContext.service
						 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
						 join C in dbContext.component on B.v_ComponentId equals C.v_ComponentId
						 where A.v_ServiceId == pstrServiceId && VacunasIds.Contains(B.v_ComponentId)
						 select new VacunasList
						 {
							 v_ServiceId = A.v_ServiceId,
							 v_ServiceComponentId = B.v_ServiceComponentId,
							 VacunaId = B.v_ComponentId,
							 Vacuna = C.v_Name
						 }
						 ).ToList();

			var query1 = (from A in query
						  select new VacunasList
						  {
							  v_ServiceId = A.v_ServiceId,
							  v_ServiceComponentId = A.v_ServiceComponentId,
							  VacunaId = A.VacunaId,
							  Vacuna = A.Vacuna,
							  DetalleVacuna = ObtenerDetalleVacuna(A.v_ServiceId, A.VacunaId)
						  }).ToList();

			return query1;
		}

		private List<VacunaDetalleList> ObtenerDetalleVacuna(string pstrServiceId, string pstrComponentId)
		{

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var query = (from A in dbContext.service
						 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
						 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
						 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

						 join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
						 join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
						 join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

						 where A.v_ServiceId == pstrServiceId
								 && H.v_ComponentId == pstrComponentId
								 && B.i_IsDeleted == 0
								 && C.i_IsDeleted == 0
						 orderby G.v_TextLabel
						 select new VacunaDetalleList
						 {
							 v_ComponentFieldId = G.v_ComponentFieldId,
							 v_ComponentFielName = G.v_TextLabel,
							 v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
							 v_Value1 = D.v_Value1
						 }).ToList();


			var QueryFinal = query.FindAll(p => p.v_ComponentFielName.Contains("Fecha"));
			//query.Where(w => w.v_Value1 == "1").ToList().ForEach(s => s.v_Value1 = "SI");
			//query.Where(w => w.v_Value1 == "0").ToList().ForEach(s => s.v_Value1 = "NO");
			return QueryFinal;
		}

		public List<ServiceList> BuscarServicionSinFacturarYCulmindados(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join A1 in dbContext.servicecomponent on A.v_ServiceId equals A1.v_ServiceId into A1_join
							from A1 in A1_join.DefaultIfEmpty()

							join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
							from B in B_join.DefaultIfEmpty()

							join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
							from C in C_join.DefaultIfEmpty()

							join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
							from D in D_join.DefaultIfEmpty()

							join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

							join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId

							join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId

							join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
							from H in H_join.DefaultIfEmpty()

							join I in dbContext.person on A.v_PersonId equals I.v_PersonId

							join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
							from K in K_join.DefaultIfEmpty()

							join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
							from L in L_join.DefaultIfEmpty()

							join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
							from et in et_join.DefaultIfEmpty()

							join go in dbContext.groupoccupation on E.v_GroupOccupationId equals go.v_GroupOccupationId into go_join
							from go in go_join.DefaultIfEmpty()

							// Empresa / Sede Cliente ******************************************************
							join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
									equals new { a = oc.v_OrganizationId } into oc_join
							from oc in oc_join.DefaultIfEmpty()

							join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
								  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
							from lc in lc_join.DefaultIfEmpty()

							//**********************************************************************************

							join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
															equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
															equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()
							where A.i_IsDeleted == 0 && D.i_LineStatusId == (int)LineStatus.EnCircuito
							&& A.i_ServiceStatusId == (int)ServiceStatus.Culminado
							select new ServiceList
							{
								Seleccion = false,
								v_ServiceComponentId = A1.v_ServiceComponentId,
								i_ServiceComponentStatusId = A1.i_ServiceComponentStatusId,
								v_ServiceId = A.v_ServiceId,
								v_CalendarId = D.v_CalendarId,
								v_ProtocolId = A.v_ProtocolId,
								v_PersonId = A.v_PersonId,
								i_MasterServiceId = A.i_MasterServiceId.Value,
								v_MasterServiceName = C.v_Value1,
								i_ServiceStatusId = A.i_ServiceStatusId.Value,
								v_ServiceStatusName = B.v_Value1,
								i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
								d_ServiceDate = (DateTime)A.d_ServiceDate,
								d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
								d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
								i_FlagAgentId = A.i_FlagAgentId.Value,
								d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,
								v_OrganizationName = F.v_Name,
								v_GenderName = G.v_Name,
								v_ServiceTypeName = H.v_Value1,
								i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
								i_EsoTypeId = E.i_EsoTypeId.Value,
								v_LocationId = E.v_EmployerLocationId,
								v_LocationName = G.v_Name,
								v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
								v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
								v_ProtocolName = E.v_Name,
								v_CreationUser = J1.v_UserName,
								v_UpdateUser = J2.v_UserName,
								d_CreationDate = A.d_InsertDate,
								d_UpdateDate = A.d_UpdateDate,
								v_AptitudeStatusName = K.v_Value1,
								v_DocTypeName = L.v_Value1,
								v_DocNumber = I.v_DocNumber,

								v_CustomerOrganizationId = E.v_CustomerOrganizationId,
								v_CustomerLocationId = E.v_CustomerLocationId,
								v_EsoTypeName = et.v_Value1,
								i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
								v_ComponentId = A1.v_ComponentId,
								i_IsFac = A.i_IsFac,
								i_ServiceId = D.i_ServiceId.Value,
								v_TipoExamen = go.v_Name,
								v_GroupOccupationId = E.v_GroupOccupationId
							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				{
					query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}



				List<ServiceList> objData = query.ToList();
				pobjOperationResult.Success = 1;

				if (componentIds != null)
				{
					var xx = objData.FindAll(p => componentIds.Contains(p.v_ComponentId));

					var y = xx.GroupBy(g => g.v_ServiceId)
								  .Select(s => s.First());

					return y.ToList();
				}
				else
				{
					var y = objData.GroupBy(g => g.v_ServiceId)
							   .Select(s => s.First());

					return y.ToList();

				}




			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public string AddService(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
		{
			//mon.IsActive = true;
			string NewId = "(No generado)";
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				service objEntity = serviceAssembler.ToEntity(pobjDtoEntity);

				objEntity.d_InsertDate = DateTime.Now;
				objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
				objEntity.i_IsDeleted = 0;
				// Autogeneramos el Pk de la tabla
				int intNodeId = int.Parse(ClientSession[0]);
				NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 23), "SR");
				objEntity.v_ServiceId = NewId;

				dbContext.AddToservice(objEntity);
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICIO", "v_ServiceId=" + NewId.ToString(), Success.Ok, null);
				return NewId;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICIO", "v_ServiceId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return null;
			}
		}

		public void UpdateService(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pobjDtoEntity.v_ServiceId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados
				pobjDtoEntity.d_UpdateDate = DateTime.Now;
				pobjDtoEntity.i_UpdateUserId = Int32.Parse(ClientSession[2]);
				service objEntity = serviceAssembler.ToEntity(pobjDtoEntity);

				// Copiar los valores desde la entidad actualizada a la Entidad Fuente
				dbContext.service.ApplyCurrentValues(objEntity);

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + objEntity.v_ServiceId.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public void UpdateFlagFacturacion(serviceDto pobjDtoEntity, int psintFlag)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pobjDtoEntity.v_ServiceId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados
				objEntitySource.i_IsFac = psintFlag;

				// Guardar los cambios
				dbContext.SaveChanges();

				return;
			}
			catch (Exception ex)
			{
				return;
			}
		}

		public serviceDto GetService(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				serviceDto objDtoEntity = null;

				var objEntity = (from a in dbContext.service
								 where a.v_ServiceId == pstrServiceId
								 select a).FirstOrDefault();

				if (objEntity != null)
					objDtoEntity = serviceAssembler.ToDTO(objEntity);

				pobjOperationResult.Success = 1;
				return objDtoEntity;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public void UpdateServiceOffice(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pobjDtoEntity.v_ServiceId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados

				objEntitySource.i_ServiceStatusId = pobjDtoEntity.i_ServiceStatusId;
				objEntitySource.v_Motive = pobjDtoEntity.v_Motive;
				objEntitySource.d_UpdateDate = DateTime.Now;
				objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public ServiceList GetServiceReport(string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
								 from B in B_join.DefaultIfEmpty()

								 join C in dbContext.organization on B.v_WorkingOrganizationId equals C.v_OrganizationId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join C2 in dbContext.organization on B.v_CustomerOrganizationId equals C2.v_OrganizationId into C2_join
								 from C2 in C2_join.DefaultIfEmpty()

								 join D in dbContext.datahierarchy on new { a = C.i_SectorTypeId.Value, b = 104 }
														equals new { a = D.i_ItemId, b = D.i_GroupId } into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.datahierarchy on new { a = C.i_DepartmentId.Value, b = 113 }
													   equals new { a = E.i_ItemId, b = E.i_GroupId } into E_join
								 from E in E_join.DefaultIfEmpty()

								 join F in dbContext.datahierarchy on new { a = C.i_ProvinceId.Value, b = 113 }
													   equals new { a = F.i_ItemId, b = F.i_GroupId } into F_join
								 from F in F_join.DefaultIfEmpty()

								 join G in dbContext.datahierarchy on new { a = C.i_DistrictId.Value, b = 113 }
													   equals new { a = G.i_ItemId, b = G.i_GroupId } into G_join
								 from G in G_join.DefaultIfEmpty()

								 join H in dbContext.person on A.v_PersonId equals H.v_PersonId into H_join
								 from H in H_join.DefaultIfEmpty()

								 join I in dbContext.datahierarchy on new { a = H.i_DepartmentId.Value, b = 113 }
													   equals new { a = I.i_ItemId, b = I.i_GroupId } into I_join
								 from I in I_join.DefaultIfEmpty()

								 join J in dbContext.datahierarchy on new { a = H.i_ProvinceId.Value, b = 113 }
													   equals new { a = J.i_ItemId, b = J.i_GroupId } into J_join
								 from J in J_join.DefaultIfEmpty()

								 join K in dbContext.datahierarchy on new { a = H.i_DistrictId.Value, b = 113 }
													   equals new { a = K.i_ItemId, b = K.i_GroupId } into K_join
								 from K in K_join.DefaultIfEmpty()

								 join L in dbContext.systemparameter on new { a = H.i_TypeOfInsuranceId.Value, b = 188 }
													  equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
								 from L in L_join.DefaultIfEmpty()

								 join M in dbContext.systemparameter on new { a = H.i_MaritalStatusId.Value, b = 101 }
											  equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
								 from M in M_join.DefaultIfEmpty()

								 join N in dbContext.datahierarchy on new { a = H.i_LevelOfId.Value, b = 108 }
												 equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
								 from N in N_join.DefaultIfEmpty()

								 join C1 in dbContext.organization on B.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
								 from C1 in C1_join.DefaultIfEmpty()

								 join su in dbContext.systemuser on A.i_UpdateUserMedicalAnalystId.Value equals su.i_SystemUserId into su_join
								 from su in su_join.DefaultIfEmpty()

								 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
								 from pr in pr_join.DefaultIfEmpty()

								 join P1 in dbContext.person on new { a = pr.v_PersonId }
										 equals new { a = P1.v_PersonId } into P1_join
								 from P1 in P1_join.DefaultIfEmpty()

								 join O in dbContext.systemparameter on new { a = 134, b = A.i_MacId.Value }
														equals new { a = O.i_GroupId, b = O.i_ParameterId } into O_join
								 from O in O_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrServiceId


								 select new ServiceList
								 {
									 //-----------------CABECERA---------------------------------
									 v_PersonId = H.v_PersonId,
									 v_ServiceId = A.v_ServiceId,
									 d_ServiceDate = A.d_ServiceDate,
									 i_DiaV = A.d_ServiceDate.Value.Day,
									 i_MesV = A.d_ServiceDate.Value.Month,
									 i_AnioV = A.d_ServiceDate.Value.Year,
									 i_EsoTypeId = B.i_EsoTypeId.Value, // tipo de ESO : Pre-Ocupacional ,  Periodico, etc 
									 RUC = C.v_IdentificationNumber,
									 //---------------DATOS DE LA EMPRESA--------------------------------
									 EmpresaTrabajo = C.v_Name,
									 EmpresaEmpleadora = C1.v_Name,
									 RubroEmpresaTrabajo = C.v_SectorName,
									 DireccionEmpresaTrabajo = C.v_Address,
									 DepartamentoEmpresaTrabajo = E.v_Value1,
									 ProvinciaEmpresaTrabajo = F.v_Value1,
									 DistritoEmpresaTrabajo = G.v_Value1,
									 v_CurrentOccupation = H.v_CurrentOccupation,
                                     b_Logo = C2.b_Image,
                                     EmpresaClienteId = C.v_OrganizationId,
									 //---------------DATOS DE FILIACIÓN TRABAJADOR--------------------------------
									 i_DocTypeId = H.i_DocTypeId.Value,
									 v_Pacient = H.v_FirstLastName + " " + H.v_SecondLastName + " " + H.v_FirstName,
									 d_BirthDate = H.d_Birthdate,
									 i_DiaN = H.d_Birthdate.Value.Day,
									 i_MesN = H.d_Birthdate.Value.Month,
									 i_AnioN = H.d_Birthdate.Value.Year,
									 v_DocNumber = H.v_DocNumber,
									 v_AdressLocation = H.v_AdressLocation,

									 DepartamentoPaciente = I.v_Value1,
									 ProvinciaPaciente = J.v_Value1,
									 DistritoPaciente = K.v_Value1,
									 i_ResidenceInWorkplaceId = H.i_ResidenceInWorkplaceId.Value,
									 v_ResidenceTimeInWorkplace = H.v_ResidenceTimeInWorkplace,
									 i_TypeOfInsuranceId = H.i_TypeOfInsuranceId.Value,
									 Email = H.v_Mail,
									 Telefono = H.v_TelephoneNumber,
									 EstadoCivil = M.v_Value1,
									 GradoInstruccion = N.v_Value1,
									 v_Story = A.v_Story,
									 i_AptitudeStatusId = A.i_AptitudeStatusId,

									 HijosVivos = H.i_NumberLivingChildren,
									 HijosMuertos = H.i_NumberDeadChildren,
									 HijosDependientes = H.i_NumberDependentChildren,

									 v_BirthPlace = H.v_BirthPlace,
									 i_PlaceWorkId = H.i_PlaceWorkId.Value,
									 v_ExploitedMineral = H.v_ExploitedMineral,
									 i_AltitudeWorkId = H.i_AltitudeWorkId.Value,
									 v_EmergencyPhone = H.v_EmergencyPhone,
									 i_SexTypeId = H.i_SexTypeId,
									 i_MaritalStatusId = H.i_MaritalStatusId.Value,
									 i_LevelOfId = H.i_LevelOfId.Value,
									 FirmaTrabajador = H.b_RubricImage,
									 HuellaTrabajador = H.b_FingerPrintImage,

									 //Datos del Doctor
									 FirmaDoctor = pr.b_SignatureImage,
									 NombreDoctor = P1.v_FirstName + " " + P1.v_FirstLastName + " " + P1.v_SecondLastName,
									 CMP = pr.v_ProfessionalCode,

									 d_Fur = A.d_Fur,
									 v_CatemenialRegime = A.v_CatemenialRegime,
									 i_MacId = A.i_MacId,
									 v_Mac = O.v_Value1,

									 // Antecedentes ginecologicos
									 d_PAP = A.d_PAP.Value,
									 d_Mamografia = A.d_Mamografia.Value,
									 v_CiruGine = A.v_CiruGine,
									 v_Gestapara = A.v_Gestapara,
									 v_Menarquia = A.v_Menarquia,
									 v_Findings = A.v_Findings,
									 v_CustomerOrganizationName = C2.v_Name,
									 i_NroHermanos = H.i_NroHermanos.Value

								 });


				var sql = (from a in objEntity.ToList()
						   let DatosMedicina = ObtenerFirmaMedicoExamen(pstrServiceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID)

						   select new ServiceList
						   {
							   //-----------------CABECERA---------------------------------
							   v_ServiceId = a.v_ServiceId,
							   d_ServiceDate = a.d_ServiceDate,
							   i_DiaV = a.d_ServiceDate.Value.Day,
							   i_MesV = a.d_ServiceDate.Value.Month,
							   i_AnioV = a.d_ServiceDate.Value.Year,
							   i_EsoTypeId = a.i_EsoTypeId, // tipo de ESO : Pre-Ocupacional ,  Periodico, etc 
							   RUC = a.RUC,
							   //---------------DATOS DE LA EMPRESA--------------------------------
							   EmpresaTrabajo = a.EmpresaTrabajo,
							   EmpresaEmpleadora = a.EmpresaEmpleadora,
							   RubroEmpresaTrabajo = a.RubroEmpresaTrabajo,
							   DireccionEmpresaTrabajo = a.DireccionEmpresaTrabajo,
							   DepartamentoEmpresaTrabajo = a.DepartamentoEmpresaTrabajo,
							   ProvinciaEmpresaTrabajo = a.ProvinciaEmpresaTrabajo,
							   DistritoEmpresaTrabajo = a.DistritoEmpresaTrabajo,
							   v_CurrentOccupation = a.v_CurrentOccupation,
                               b_Logo = a.b_Logo,
                               EmpresaClienteId = a.EmpresaClienteId,
							   //---------------DATOS DE FILIACIÓN TRABAJADOR--------------------------------
							   i_DocTypeId = a.i_DocTypeId,
							   v_Pacient = a.v_Pacient,
							   d_BirthDate = a.d_BirthDate,
							   i_DiaN = a.i_DiaN,
							   i_MesN = a.i_MesN,
							   i_AnioN = a.i_AnioN,
							   i_Edad = GetAge(a.d_BirthDate.Value),
							   //i_Edad =30,
							   v_DocNumber = a.v_DocNumber,
							   v_AdressLocation = a.v_AdressLocation,
							   DepartamentoPaciente = a.DepartamentoPaciente,
							   ProvinciaPaciente = a.ProvinciaPaciente,
							   DistritoPaciente = a.DistritoPaciente,
							   i_ResidenceInWorkplaceId = a.i_ResidenceInWorkplaceId,
							   v_ResidenceTimeInWorkplace = a.v_ResidenceTimeInWorkplace,
							   i_TypeOfInsuranceId = a.i_TypeOfInsuranceId,
							   Email = a.Email,
							   Telefono = a.Telefono,
							   EstadoCivil = a.EstadoCivil,
							   GradoInstruccion = a.GradoInstruccion,
							   v_Story = a.v_Story,
							   i_AptitudeStatusId = a.i_AptitudeStatusId,
							   v_OwnerOrganizationName = (from n in dbContext.organization
														  where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
														  select n.v_Name + " " + n.v_Address).SingleOrDefault<string>(),

							   HijosVivos = a.HijosVivos,
							   HijosMuertos = a.HijosMuertos,
							   HijosDependientes = a.HijosDependientes,
							   v_BirthPlace = a.v_BirthPlace,
							   i_PlaceWorkId = a.i_PlaceWorkId,
							   v_ExploitedMineral = a.v_ExploitedMineral,
							   i_AltitudeWorkId = a.i_AltitudeWorkId,
							   v_EmergencyPhone = a.v_EmergencyPhone,
							   i_SexTypeId = a.i_SexTypeId,
							   i_MaritalStatusId = a.i_MaritalStatusId,
							   i_LevelOfId = a.i_LevelOfId,

							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,

							   //Datos del Doctor
							   FirmaDoctor = a.FirmaDoctor,
							   NombreDoctor = DatosMedicina.Value2,
							   CMP = DatosMedicina.Value3,

							   d_Fur = a.d_Fur,
							   v_CatemenialRegime = a.v_CatemenialRegime,
							   i_MacId = a.i_MacId,
							   v_Mac = a.v_Mac,

							   //// Antecedentes ginecologicos
							   d_PAP = a.d_PAP,
							   d_Mamografia = a.d_Mamografia,
							   v_CiruGine = a.v_CiruGine,
							   v_Gestapara = a.v_Gestapara,
							   v_Menarquia = a.v_Menarquia,
							   v_Findings = a.v_Findings,
							   FirmaMedicoMedicina = DatosMedicina.Value5,
							   v_CustomerOrganizationName = a.v_CustomerOrganizationName,
							   i_NroHermanos = a.i_NroHermanos
						   }).FirstOrDefault();

				return sql;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		private KeyValueDTO ObtenerFirmaMedicoExamen(string pstrServiceId, string p1, string p2)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var objEntity = (from E in dbContext.servicecomponent

							 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
							 from me in me_join.DefaultIfEmpty()

							 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
							 from pme in pme_join.DefaultIfEmpty()

							 join p in dbContext.person on me.v_PersonId equals p.v_PersonId

							 where E.v_ServiceId == pstrServiceId &&
							 (E.v_ComponentId == p1 || E.v_ComponentId == p2)
							 select new KeyValueDTO
							 {
								 Value5 = pme.b_SignatureImage,
								 Value2 = p.v_FirstLastName + " " + p.v_SecondLastName + " " + p.v_FirstName,
								 Value3 = pme.v_ProfessionalCode

							 }).FirstOrDefault();

			return objEntity;
		}

		private DatosDoctorMedicina ObtenerDatosMedicoMedicina(string pstrServiceId, string p1, string p2)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var objEntity = (from E in dbContext.servicecomponent

							 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
							 from me in me_join.DefaultIfEmpty()

							 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
							 from pme in pme_join.DefaultIfEmpty()

							 join a in dbContext.person on me.v_PersonId equals a.v_PersonId

							 where E.v_ServiceId == pstrServiceId &&
							 (E.v_ComponentId == p1 || E.v_ComponentId == p2)
							 select new DatosDoctorMedicina
							 {
								 FirmaMedicoMedicina = pme.b_SignatureImage,
								 ApellidosDoctor = a.v_FirstLastName + " " + a.v_SecondLastName,
								 DireccionDoctor = a.v_AdressLocation,
								 NombreDoctor = a.v_FirstName,
								 CMP = pme.v_ProfessionalCode,

							 }).FirstOrDefault();

			return objEntity;
		}

		public List<Rutas> LlenarGrillaArchivosAdjunto(List<string> listaServiciosId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from A in dbContext.service
							 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
							 where A.i_IsDeleted == 0 && listaServiciosId.Contains(A.v_ServiceId)
							 select new Rutas
							 {
								 ServicioId = A.v_ServiceId,
								 Paciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
								 Dni = B.v_DocNumber,
								 RutaLarga = "",
								 PersonId = B.v_PersonId,
								 ProtocolId = A.v_ProtocolId
							 }).ToList();

				return query;

			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public DiagnosticRepositoryList VerificarDxExistente(string pServiceId, string pDiseasesId, string pComponentId, string pComponentFieldId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from A in dbContext.diagnosticrepository
						 where A.v_ServiceId == pServiceId && A.v_ComponentId == pComponentId && A.v_ComponentFieldId == pComponentFieldId && A.i_IsDeleted == 0
						 select new DiagnosticRepositoryList
						 {
							 i_AutoManualId = A.i_AutoManualId,
							 i_FinalQualificationId = A.i_FinalQualificationId,
							 i_PreQualificationId = A.i_PreQualificationId,
							 v_ComponentFieldsId = A.v_ComponentFieldId,
							 v_DiagnosticRepositoryId = A.v_DiagnosticRepositoryId
						 }
							 ).FirstOrDefault();

			return query;


		}

		public DiagnosticRepositoryList VerificarDxExistente_(string pServiceId, string pDiseasesId, string pComponentId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from A in dbContext.diagnosticrepository
						 where A.v_ServiceId == pServiceId && A.v_ComponentId == pComponentId && A.i_IsDeleted == 0 && A.v_DiseasesId == pDiseasesId
						 select new DiagnosticRepositoryList
						 {
							 i_AutoManualId = A.i_AutoManualId,
							 i_FinalQualificationId = A.i_FinalQualificationId,
							 i_PreQualificationId = A.i_PreQualificationId,
							 v_ComponentFieldsId = A.v_ComponentFieldId,
							 v_DiagnosticRepositoryId = A.v_DiagnosticRepositoryId
						 }
							 ).FirstOrDefault();

			return query;


		}


		public void EliminarDxAniguosPorComponente(string pServiceId, string pComponentId, List<string> ClientSession)
		{

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			// Obtener la entidad fuente
			var ListaEliminar = (from a in dbContext.diagnosticrepository
								 where a.v_ServiceId == pServiceId && a.v_ComponentId == pComponentId && a.i_IsDeleted == 0
								 select a).ToList();


			foreach (var item in ListaEliminar)
			{
				// Crear la entidad con los datos actualizados
				item.d_UpdateDate = DateTime.Now;
				item.i_UpdateUserId = Int32.Parse(ClientSession[2]);
				item.i_IsDeleted = 1;

			}
			// Guardar los cambios
			dbContext.SaveChanges();


		}

		#region Info Cabecera / Anamnesis  del sericio

		public ServiceList GetServicePersonData(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = from A in dbContext.service
							join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 }
									 equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join  // ESTADO SERVICIO
							from B in B_join.DefaultIfEmpty()

							join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } // ESTADO APTITUD ESO 
									equals new { a = G.i_ParameterId, b = G.i_GroupId } into J4_join
							from G in J4_join.DefaultIfEmpty()

							join J1 in dbContext.systemparameter on new { a = 119, b = A.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
													   equals new { a = J1.i_GroupId, b = J1.i_ParameterId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemparameter on new { a = 119, b = J1.i_ParentParameterId.Value } // TIPO DE SERVICIO
													  equals new { a = J2.i_GroupId, b = J2.i_ParameterId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()

							join D in dbContext.person on A.v_PersonId equals D.v_PersonId

							join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
											   equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
							from J in J_join.DefaultIfEmpty()

							join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

							join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

							join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												equals new { a = H.i_ParameterId, b = H.i_GroupId } into J3_join  // TIPO ESO [ESOA,ESOR,ETC]
							from H in J3_join.DefaultIfEmpty()

							where (A.v_ServiceId == pstrServiceId) &&
								  (A.i_IsDeleted == isDeleted)

							select new ServiceList
							{
								v_ServiceId = A.v_ServiceId,
								v_ProtocolId = A.v_ProtocolId,
								v_ProtocolName = E.v_Name,
								v_PersonId = D.v_PersonId,
								v_FirstName = D.v_FirstName,
								v_FirstLastName = D.v_FirstLastName,
								v_SecondLastName = D.v_SecondLastName,
								d_BirthDate = D.d_Birthdate,
								i_SexTypeId = D.i_SexTypeId,
								v_ServiceStatusName = B.v_Value1,
								i_AptitudeStatusId = A.i_AptitudeStatusId,
								d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
								d_ObsExpirationDate = A.d_ObsExpirationDate,
								d_ServiceDate = A.d_ServiceDate,
								v_MasterServiceName = J1.v_Value1,
								v_ServiceTypeName = J2.v_Value1,
								i_MasterServiceId = A.i_MasterServiceId.Value,
								v_GroupOcupationName = F.v_Name,
								v_EsoTypeName = H.v_Value1,
								i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
								v_GenderName = J.v_Value1,

								i_HasSymptomId = A.i_HasSymptomId,
								v_MainSymptom = A.v_MainSymptom,
								i_TimeOfDisease = A.i_TimeOfDisease,
								i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
								v_Story = A.v_Story,
								i_DreamId = A.i_DreamId,
								i_UrineId = A.i_UrineId,
								i_DepositionId = A.i_DepositionId,
								i_AppetiteId = A.i_AppetiteId,
								i_ThirstId = A.i_ThirstId,
								d_Fur = A.d_Fur.Value,
								v_CatemenialRegime = A.v_CatemenialRegime,
								i_MacId = A.i_MacId,
								i_DestinationMedicationId = A.i_DestinationMedicationId,
								i_TransportMedicationId = (int)A.i_TransportMedicationId,
								i_HasMedicalBreakId = A.i_HasMedicalBreakId,
								i_HasRestrictionId = A.i_HasRestrictionId,
								d_MedicalBreakStartDate = A.d_MedicalBreakStartDate,
								d_MedicalBreakEndDate = A.d_MedicalBreakEndDate,
								d_StartDateRestriction = A.d_StartDateRestriction,
								d_EndDateRestriction = A.d_EndDateRestriction,
								v_GeneralRecomendations = A.v_GeneralRecomendations,
								i_IsNewControl = A.i_IsNewControl,
								b_PersonImage = D.b_PersonImage,
								i_HazInterconsultationId = A.i_HazInterconsultationId,
								d_NextAppointment = A.d_NextAppointment,
								i_SendToTracking = A.i_SendToTracking,
								v_CurrentOccupation = D.v_CurrentOccupation,
								d_PAP = A.d_PAP.Value,
								d_Mamografia = A.d_Mamografia.Value,
								v_CiruGine = A.v_CiruGine,
								v_Gestapara = A.v_Gestapara,
								v_Menarquia = A.v_Menarquia,
								v_Findings = A.v_Findings,
								i_InicioEnf = A.i_InicioEnf.Value,
								i_CursoEnf = A.i_CursoEnf.Value,
								i_Evolucion = A.i_Evolucion.Value,
								v_ExaAuxResult = A.v_ExaAuxResult,
								v_ObsStatusService = A.v_ObsStatusService,
								v_FechaUltimoPAP = A.v_FechaUltimoPAP,
								v_ResultadosPAP = A.v_ResultadosPAP,
								v_FechaUltimaMamo = A.v_FechaUltimaMamo,
								v_ResultadoMamo = A.v_ResultadoMamo,
								v_DocNumber = D.v_DocNumber,
                                v_InicioVidaSexaul = A.v_InicioVidaSexaul,
                                v_NroParejasActuales = A.v_NroParejasActuales,
                                v_NroAbortos = A.v_NroAbortos,
                                v_PrecisarCausas = A.v_PrecisarCausas,
							};

				ServiceList objData = query.FirstOrDefault();
				pobjOperationResult.Success = 1;
				return objData;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public ServiceList GetServicePersonDataReport(string pstrServiceId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = from A in dbContext.service
							join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 }
									 equals new { a = B.i_ParameterId, b = B.i_GroupId }  // ESTADO SERVICIO

							join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } // ESTADO APTITUD ESO 
									equals new { a = G.i_ParameterId, b = G.i_GroupId } into J4_join
							from G in J4_join.DefaultIfEmpty()

							join J1 in dbContext.systemparameter on new { a = 119, b = A.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
													   equals new { a = J1.i_GroupId, b = J1.i_ParameterId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemparameter on new { a = 119, b = J1.i_ParentParameterId.Value } // TIPO DE SERVICIO
													  equals new { a = J2.i_GroupId, b = J2.i_ParameterId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()

							//join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							join D in dbContext.person on A.v_PersonId equals D.v_PersonId
							join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
											   equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO
							join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
							join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

							join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												equals new { a = H.i_ParameterId, b = H.i_GroupId } into J3_join  // TIPO ESO [ESOA,ESOR,ETC]
							from H in J3_join.DefaultIfEmpty()

							where A.v_ServiceId == pstrServiceId && A.i_IsDeleted == 0
							select new ServiceList
							{
								v_ServiceId = A.v_ServiceId,
								v_ProtocolId = A.v_ProtocolId,
								v_ProtocolName = E.v_Name,
								v_PersonId = D.v_PersonId,
								v_FirstName = D.v_FirstName,
								v_FirstLastName = D.v_FirstLastName,
								v_SecondLastName = D.v_SecondLastName,
								d_BirthDate = D.d_Birthdate,
								i_SexTypeId = D.i_SexTypeId,
								v_ServiceStatusName = B.v_Value1,
								i_AptitudeStatusId = A.i_AptitudeStatusId,
								d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
								d_ObsExpirationDate = A.d_ObsExpirationDate,
								d_ServiceDate = A.d_ServiceDate,
								v_MasterServiceName = J1.v_Value1,
								v_ServiceTypeName = J2.v_Value1,
								i_MasterServiceId = A.i_MasterServiceId.Value,
								v_GroupOcupationName = F.v_Name,
								v_EsoTypeName = H.v_Value1,
								i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
								v_GenderName = J.v_Value1,

								i_HasSymptomId = A.i_HasSymptomId,
								v_MainSymptom = A.v_MainSymptom,
								i_TimeOfDisease = A.i_TimeOfDisease,
								i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
								v_Story = A.v_Story,
								i_DreamId = A.i_DreamId,
								i_UrineId = A.i_UrineId,
								i_DepositionId = A.i_DepositionId,
								i_AppetiteId = A.i_AppetiteId,
								i_ThirstId = A.i_ThirstId,
								d_Fur = A.d_Fur.Value,
								v_CatemenialRegime = A.v_CatemenialRegime,
								i_MacId = A.i_MacId,
								i_DestinationMedicationId = A.i_DestinationMedicationId,
								i_TransportMedicationId = (int)A.i_TransportMedicationId,
								i_HasMedicalBreakId = A.i_HasMedicalBreakId,
								i_HasRestrictionId = A.i_HasRestrictionId,
								d_MedicalBreakStartDate = A.d_MedicalBreakStartDate,
								d_MedicalBreakEndDate = A.d_MedicalBreakEndDate,
								d_StartDateRestriction = A.d_StartDateRestriction,
								d_EndDateRestriction = A.d_EndDateRestriction,
								v_GeneralRecomendations = A.v_GeneralRecomendations,
								i_IsNewControl = A.i_IsNewControl,
								b_PersonImage = D.b_PersonImage,
								i_HazInterconsultationId = A.i_HazInterconsultationId,
								d_NextAppointment = A.d_NextAppointment,
								i_SendToTracking = A.i_SendToTracking,
								v_CurrentOccupation = D.v_CurrentOccupation,
								d_PAP = A.d_PAP.Value,
								d_Mamografia = A.d_Mamografia.Value,
								v_CiruGine = A.v_CiruGine,
								v_Gestapara = A.v_Gestapara,
								v_Menarquia = A.v_Menarquia,
								v_Findings = A.v_Findings
							};

				ServiceList objData = query.FirstOrDefault();

				return objData;
			}
			catch (Exception ex)
			{

				return null;
			}
		}

		#endregion

		#endregion

		#region Service Component

		public void AddServiceComponent(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession)
		{
			//mon.IsActive = true;
			string NewId = "(No generado)";
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				servicecomponent objEntity = servicecomponentAssembler.ToEntity(pobjDtoEntity);

				objEntity.d_InsertDate = DateTime.Now;
				objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
				objEntity.i_IsDeleted = 0;
				// Autogeneramos el Pk de la tabla
				int intNodeId = int.Parse(ClientSession[0]);
				NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 24), "SC");
				objEntity.v_ServiceComponentId = NewId;

				dbContext.AddToservicecomponent(objEntity);
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public List<ServiceComponentList> GetServiceComponentsRoadMap(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.servicecomponent
							join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
							join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 } equals new { a = D.i_ParameterId, b = D.i_GroupId }
							join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }  // Categoria
								   equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							from F in F_join.DefaultIfEmpty()
							where (A.v_ServiceId == pstrServiceId) &&
								  (A.i_IsDeleted == 0) &&
								  (A.i_IsRequiredId == 1)
							orderby F.v_Value1, C.v_Name
							select new ServiceComponentList
							{
								v_ComponentId = A.v_ComponentId,
								v_ComponentName = C.v_Name,
								i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								v_ServiceComponentStatusName = B.v_Value1,
								d_StartDate = A.d_StartDate.Value,
								d_EndDate = A.d_EndDate.Value,
								i_QueueStatusId = A.i_QueueStatusId.Value,
								v_QueueStatusName = D.v_Value1,
								ServiceStatusId = E.i_ServiceStatusId.Value,
								v_Motive = E.v_Motive,
								v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1
							};

				List<ServiceComponentList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return objData;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceComponentList> GetServiceComponentsPreLiquidation(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.servicecomponent
							join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
							join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 } equals new { a = D.i_ParameterId, b = D.i_GroupId }
							join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }  // Categoria
								   equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							from F in F_join.DefaultIfEmpty()
							where (A.v_ServiceId == pstrServiceId) &&
								  (A.i_IsDeleted == 0) &&
								  (A.i_IsRequiredId == (int)SiNo.SI)

							orderby F.v_Value1, C.v_Name

							let InternalGroup = (A.v_ComponentId == Constants.GINECOLOGIA_ID ? "Ginecología" :
												  A.v_ComponentId == Constants.EXAMEN_MAMA_ID ? "Ginecología" :
												  A.v_ComponentId == Constants.EXAMEN_FISICO_ID ? "Medicina" :
												  A.v_ComponentId == Constants.ANTROPOMETRIA_ID ? "Medicina" :
												  A.v_ComponentId == Constants.FUNCIONES_VITALES_ID ? "Medicina" :
												  A.v_ComponentId == Constants.ALTURA_ESTRUCTURAL_ID ? "Medicina" :
												  A.v_ComponentId == Constants.ALTURA_GEOGRAFICA_ID ? "Medicina" :
												  A.v_ComponentId == Constants.OSTEO_MUSCULAR_ID_1 ? "Medicina" :
												  A.v_ComponentId == Constants.TAMIZAJE_DERMATOLOGIO_ID ? "Medicina" :
												  A.v_ComponentId == Constants.TEST_ROMBERG_ID ? "Medicina" :
												  A.v_ComponentId == Constants.ODONTOGRAMA_ID ? "Odontología" :
												  A.v_ComponentId == Constants.OFTALMOLOGIA_ID ? "Oftalmología" :
												  A.v_ComponentId == Constants.PAPANICOLAU_ID ? "Papanicolau" :
												  string.Empty
												 )

							let InternalCode = (A.v_ComponentId == Constants.GINECOLOGIA_ID ? "1314" :
												 A.v_ComponentId == Constants.EXAMEN_MAMA_ID ? "1314" :
												 A.v_ComponentId == Constants.EXAMEN_FISICO_ID ? "1314" :
												 A.v_ComponentId == Constants.ANTROPOMETRIA_ID ? "1314" :
												 A.v_ComponentId == Constants.FUNCIONES_VITALES_ID ? "1314" :
												 A.v_ComponentId == Constants.ALTURA_ESTRUCTURAL_ID ? "1314" :
												 A.v_ComponentId == Constants.ALTURA_GEOGRAFICA_ID ? "1314" :
												 A.v_ComponentId == Constants.OSTEO_MUSCULAR_ID_1 ? "1314" :
												 A.v_ComponentId == Constants.TAMIZAJE_DERMATOLOGIO_ID ? "1314" :
												 A.v_ComponentId == Constants.TEST_ROMBERG_ID ? "1314" :
												 A.v_ComponentId == Constants.ODONTOGRAMA_ID ? "1532" :
												 A.v_ComponentId == Constants.OFTALMOLOGIA_ID ? "1314" :
												 A.v_ComponentId == Constants.PAPANICOLAU_ID ? "69" :
												 string.Empty
												)

							select new ServiceComponentList
							{
								v_ComponentId = A.v_ComponentId,
								v_ComponentName = C.v_Name,
								i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								v_ServiceComponentStatusName = B.v_Value1,
								d_StartDate = A.d_StartDate.Value,
								d_EndDate = A.d_EndDate.Value,
								i_QueueStatusId = A.i_QueueStatusId.Value,
								v_QueueStatusName = D.v_Value1,
								ServiceStatusId = E.i_ServiceStatusId.Value,
								v_Motive = E.v_Motive,
								v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								r_Price = A.r_Price,
								v_InternalGroup = InternalGroup,
								v_InternalCode = InternalCode,
								i_StatusLiquidation = E.i_InsertUserOccupationalMedicalId
							};

				List<ServiceComponentList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return objData;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceComponentList> GetServiceComponents(ref OperationResult pobjOperationResult, string pstrServiceId)
		{


			int isDeleted = (int)SiNo.NO;
			int isRequired = (int)SiNo.SI;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from A in dbContext.servicecomponent
							 join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
									  equals new { a = B.i_ParameterId, b = B.i_GroupId }
							 join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							 join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
									  equals new { a = D.i_ParameterId, b = D.i_GroupId }
							 join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							 join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
									  equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							 from F in F_join.DefaultIfEmpty()

							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted &&
								   A.i_IsRequiredId == isRequired

							 select new ServiceComponentList
							 {
								 v_ComponentId = A.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 v_ServiceComponentStatusName = B.v_Value1,
								 d_StartDate = A.d_StartDate.Value,
								 d_EndDate = A.d_EndDate.Value,
								 i_QueueStatusId = A.i_QueueStatusId.Value,
								 v_QueueStatusName = D.v_Value1,
								 ServiceStatusId = E.i_ServiceStatusId.Value,
								 v_Motive = E.v_Motive,
								 i_CategoryId = C.i_CategoryId.Value,
								 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								 v_ServiceId = E.v_ServiceId,
								 v_ServiceComponentId = A.v_ServiceComponentId,
							 });

				var objData = query.AsEnumerable()
							 .Where(s => s.i_CategoryId != -1)
							 .GroupBy(x => x.i_CategoryId)
							 .Select(group => group.First());

				List<ServiceComponentList> obj = objData.ToList();

				obj.AddRange(query.Where(p => p.i_CategoryId == -1));

				pobjOperationResult.Success = 1;
				return obj;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceComponentList> GetServiceComponents_(ref OperationResult pobjOperationResult, string pstrServiceId)
		{


			int isDeleted = (int)SiNo.NO;
			int isRequired = (int)SiNo.SI;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from A in dbContext.servicecomponent
							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted &&
								   A.i_IsRequiredId == isRequired

							 select new ServiceComponentList
							 {
								 v_ComponentId = A.v_ComponentId,
							   
								
							 }).ToList();



				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

	   public List<ServiceComponentList> GetServiceComponentsByCategoryExceptLab(ref OperationResult pobjOperationResult, string pstrServiceId)
		{


			int isDeleted = (int)SiNo.NO;
			int isRequired = (int)SiNo.SI;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from A in dbContext.servicecomponent
							 join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
									  equals new { a = B.i_ParameterId, b = B.i_GroupId }
							 join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							 join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
									  equals new { a = D.i_ParameterId, b = D.i_GroupId }
							 join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							 join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
									  equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							 from F in F_join.DefaultIfEmpty()

							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted &&
								   A.i_IsRequiredId == isRequired &&
								  A.v_ComponentId != Constants.INFORME_LABORATORIO_ID

							 select new ServiceComponentList
							 {
								 v_ComponentId = A.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 v_ServiceComponentStatusName = B.v_Value1,
								 d_StartDate = A.d_StartDate.Value,
								 d_EndDate = A.d_EndDate.Value,
								 i_QueueStatusId = A.i_QueueStatusId.Value,
								 v_QueueStatusName = D.v_Value1,
								 ServiceStatusId = E.i_ServiceStatusId.Value,
								 v_Motive = E.v_Motive,
								 i_CategoryId = C.i_CategoryId.Value,
								 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								 v_ServiceId = E.v_ServiceId
							 });

				var objData = query.AsEnumerable()
							 .Where(s => s.i_CategoryId != -1 && s.i_CategoryId != 1 && s.i_CategoryId != 6 && s.i_CategoryId != 14)
							 .GroupBy(x => x.i_CategoryId)
							 .Select(group => group.First());

				List<ServiceComponentList> obj = objData.ToList();

				obj.AddRange(query.Where(p => p.i_CategoryId == -1));
				obj.AddRange(query.Where(p => p.i_CategoryId == 1));
				obj.AddRange(query.Where(p => p.i_CategoryId == 6));
				obj.AddRange(query.Where(p => p.i_CategoryId == 14));
				pobjOperationResult.Success = 1;
				var orden = obj.OrderBy(o => o.i_CategoryId).ToList();
				return orden.FindAll(p => p.i_CategoryId != 10);
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceComponentList> GetServiceComponentsByCategory(ref OperationResult pobjOperationResult, string pstrServiceId)
		{


			int isDeleted = (int)SiNo.NO;
			int isRequired = (int)SiNo.SI;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from A in dbContext.servicecomponent
							 join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
									  equals new { a = B.i_ParameterId, b = B.i_GroupId }
							 join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							 join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
									  equals new { a = D.i_ParameterId, b = D.i_GroupId }
							 join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							 join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
									  equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							 from F in F_join.DefaultIfEmpty()

							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted &&
								   A.i_IsRequiredId == isRequired &&
								  A.v_ComponentId != Constants.INFORME_LABORATORIO_ID

							 select new ServiceComponentList
							 {
								 v_ComponentId = A.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 v_ServiceComponentStatusName = B.v_Value1,
								 d_StartDate = A.d_StartDate.Value,
								 d_EndDate = A.d_EndDate.Value,
								 i_QueueStatusId = A.i_QueueStatusId.Value,
								 v_QueueStatusName = D.v_Value1,
								 ServiceStatusId = E.i_ServiceStatusId.Value,
								 v_Motive = E.v_Motive,
								 i_CategoryId = C.i_CategoryId.Value,
								 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								 v_ServiceId = E.v_ServiceId
							 });

				var objData = query.AsEnumerable()
							 .Where(s => s.i_CategoryId != -1
								 && s.i_CategoryId != 1
								 && s.i_CategoryId != 2
								 && s.i_CategoryId != 3
								 && s.i_CategoryId != 4
								 && s.i_CategoryId != 5
								 && s.i_CategoryId != 6
								 && s.i_CategoryId != 7
								 //&& s.i_CategoryId != 10
								 //&& s.i_CategoryId != 11

								   && s.i_CategoryId != 13
								 //&& s.i_CategoryId != 14
								   && s.i_CategoryId != 15
								 && s.i_CategoryId != 16
								   && s.i_CategoryId != 17
								 && s.i_CategoryId != 18
								   && s.i_CategoryId != 19
								 )
							 .GroupBy(x => x.i_CategoryId)
							 .Select(group => group.First());

				List<ServiceComponentList> obj = objData.ToList();

				obj.AddRange(query.Where(p => p.i_CategoryId == -1));
				obj.AddRange(query.Where(p => p.i_CategoryId == 1));
				obj.AddRange(query.Where(p => p.i_CategoryId == 2));
				obj.AddRange(query.Where(p => p.i_CategoryId == 3));
				obj.AddRange(query.Where(p => p.i_CategoryId == 4));
				obj.AddRange(query.Where(p => p.i_CategoryId == 5));
				obj.AddRange(query.Where(p => p.i_CategoryId == 6));
				obj.AddRange(query.Where(p => p.i_CategoryId == 7));
				//obj.AddRange(query.Where(p => p.i_CategoryId == 10));
				//obj.AddRange(query.Where(p => p.i_CategoryId == 11));
				obj.AddRange(query.Where(p => p.i_CategoryId == 13));
				//obj.AddRange(query.Where(p => p.i_CategoryId == 14));
				obj.AddRange(query.Where(p => p.i_CategoryId == 15));
				obj.AddRange(query.Where(p => p.i_CategoryId == 16));
				obj.AddRange(query.Where(p => p.i_CategoryId == 17));
				obj.AddRange(query.Where(p => p.i_CategoryId == 18));
				obj.AddRange(query.Where(p => p.i_CategoryId == 19));
				pobjOperationResult.Success = 1;
				var orden = obj.OrderBy(o => o.i_CategoryId).ToList();
				return orden;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceComponentList> GetServiceComponentsCulminados(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from A in dbContext.servicecomponent
							 join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
									equals new { a = B.i_ParameterId, b = B.i_GroupId }
							 join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							 where (A.v_ServiceId == pstrServiceId) &&
								   (A.i_IsDeleted == 0) &&
								   (A.i_IsRequiredId == (int?)SiNo.SI) &&
								   (A.i_ServiceComponentStatusId != (int)ServiceComponentStatus.Evaluado)

							 select new ServiceComponentList
							 {
								 v_ComponentId = A.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 v_ServiceComponentStatusName = B.v_Value1
							 }).ToList();

				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		private List<ComponentFieldsList> GetComponentFields(string pstrComponentId, string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var query = (from A in dbContext.componentfields
						 join B in dbContext.componentfield on A.v_ComponentFieldId equals B.v_ComponentFieldId
						 join J1 in dbContext.datahierarchy on new { a = 105, b = B.i_MeasurementUnitId.Value }  // UNID MEDIDA
								   equals new { a = J1.i_GroupId, b = J1.i_ItemId } into J1_join
						 from J1 in J1_join.DefaultIfEmpty()
						 orderby B.i_Order
						 where A.v_ComponentId == pstrComponentId &&
						 A.i_IsDeleted == 0 &&
						 B.i_IsDeleted == 0
						 select new ComponentFieldsList
						 {
							 v_ComponentFieldId = A.v_ComponentFieldId,
							 v_ComponentId = A.v_ComponentId,
							 v_TextLabel = B.v_TextLabel,
							 i_LabelWidth = B.i_LabelWidth.Value,
							 v_DefaultText = B.v_DefaultText,
							 i_ControlId = B.i_ControlId.Value,
							 i_GroupId = B.i_GroupId.Value,
							 i_ItemId = B.i_ItemId.Value,
							 i_ControlWidth = B.i_WidthControl.Value,
							 i_HeightControl = B.i_HeightControl.Value,
							 i_MaxLenght = B.i_MaxLenght.Value,
							 i_IsRequired = B.i_IsRequired.Value,
							 i_Column = B.i_Column.Value,
							 v_MeasurementUnitName = J1.v_Value1,
							 i_IsCalculate = B.i_IsCalculate.Value,
							 i_Order = B.i_Order.Value,
							 i_MeasurementUnitId = B.i_MeasurementUnitId.Value,
							 r_ValidateValue1 = B.r_ValidateValue1.Value,
							 r_ValidateValue2 = B.r_ValidateValue2.Value,
							 v_Group = A.v_Group,
							 v_Formula = B.v_Formula

						 }).ToList();


			var q = (from a in query
					 select new ComponentFieldsList
					 {
						 v_ComponentFieldId = a.v_ComponentFieldId,
						 v_ComponentId = a.v_ComponentId,
						 v_TextLabel = a.v_TextLabel,
						 i_LabelWidth = a.i_LabelWidth,
						 v_DefaultText = a.v_DefaultText,
						 i_ControlId = a.i_ControlId,
						 i_GroupId = a.i_GroupId,
						 i_ItemId = a.i_ItemId,
						 i_ControlWidth = a.i_ControlWidth,
						 i_HeightControl = a.i_HeightControl,
						 i_MaxLenght = a.i_MaxLenght,
						 i_IsRequired = a.i_IsRequired,
						 i_Column = a.i_Column,
						 v_MeasurementUnitName = a.v_MeasurementUnitName,
						 i_IsCalculate = a.i_IsCalculate,
						 i_Order = a.i_Order,
						 i_MeasurementUnitId = a.i_MeasurementUnitId,
						 r_ValidateValue1 = a.r_ValidateValue1,
						 r_ValidateValue2 = a.r_ValidateValue2,
						 v_Group = a.v_Group,
						 v_Formula = a.v_Formula,
						 i_HasAutomaticDxId = (from jjj in dbContext.diagnosticrepository
											   where jjj.v_ComponentFieldId == a.v_ComponentFieldId &&
											   jjj.v_ServiceId == pstrServiceId &&
											   jjj.i_IsDeleted == 0
											   select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
											   ).SingleOrDefault()

					 }).ToList();


			Formulate formu = null;
			TargetFieldOfCalculate targetFieldOfCalculate = null;

			foreach (var item in q)
			{
				List<Formulate> formuList = new List<Formulate>();
				List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

				var find = (from a in q
							where ((a.v_Formula != null) &&
								(a.v_Formula.Contains(item.v_ComponentFieldId)))
							select a).ToList();

				if (find.Count != 0)
				{
					item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

					foreach (var f in find)
					{
						formu = new Formulate();
						formu.v_Formula = f.v_Formula;
						formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
						formuList.Add(formu);

						targetFieldOfCalculate = new TargetFieldOfCalculate();
						targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
						targetFieldOfCalculateList.Add(targetFieldOfCalculate);
					}

					item.Formula = formuList;
					item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
				}

			}

			return q;

		}

		private List<ComponentFieldValues> GetComponentFieldValues(string pstrComponentFieldId)
		{
			int isDeleted = (int)SiNo.NO;

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			List<ComponentFieldValues> fieldValues = (from A in dbContext.componentfieldvalues

													  join ddd in dbContext.diseases on A.v_Diseases equals ddd.v_DiseasesId into J3_join // Diagnosticos
													  from ddd in J3_join.DefaultIfEmpty()
													  join D in dbContext.componentfields on A.v_ComponentFieldId equals D.v_ComponentFieldId
													  join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
																					  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
													  from J1 in J1_join.DefaultIfEmpty()

													  join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
																					  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
													  from J2 in J2_join.DefaultIfEmpty()

													  where A.v_ComponentFieldId == pstrComponentFieldId &&
													  A.i_IsDeleted == isDeleted
													  select new ComponentFieldValues
													  {
														  v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
														  v_ComponentFieldsId = A.v_ComponentFieldId,
														  v_AnalyzingValue1 = A.v_AnalyzingValue1,
														  v_AnalyzingValue2 = A.v_AnalyzingValue2,
														  i_OperatorId = A.i_OperatorId.Value,
														  //v_Recommendation = A.v_Recommendation,
														  v_LegalStandard = A.v_LegalStandard,
														  i_IsAnormal = A.i_IsAnormal,
														  i_ValidationMonths = A.i_ValidationMonths,
														  v_DiseasesName = ddd.v_Name,
														  v_DiseasesId = A.v_Diseases,
														  v_ComponentId = D.v_ComponentId
													  }).ToList();



			// Carga inicial de Recomendaciones / Restricciones.
			foreach (var fv in fieldValues)
			{
				fv.Recomendations = (from A in dbContext.componentfieldvaluesrecommendation
									 join B in dbContext.masterrecommendationrestricction on A.v_MasterRecommendationRestricctionId // BOLSA CONFIG. POR M. MENDEZ
																						 equals B.v_MasterRecommendationRestricctionId
									 join C in dbContext.componentfieldvalues on A.v_ComponentFieldValuesId equals C.v_ComponentFieldValuesId
									 join D in dbContext.componentfields on C.v_ComponentFieldId equals D.v_ComponentFieldId
									 where (A.v_ComponentFieldValuesId == fv.v_ComponentFieldValuesId) &&
									 (A.i_IsDeleted == 0) && (B.i_TypifyingId == (int)Typifying.Recomendaciones)
									 select new RecomendationList
									 {
										 v_MasterRecommendationRestrictionId = A.v_MasterRecommendationRestricctionId,
										 v_ComponentFieldValuesRecommendationId = A.v_ComponentFieldValuesRecommendationId,
										 v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
										 v_MasterRecommendationId = A.v_MasterRecommendationRestricctionId,
										 v_RecommendationName = B.v_Name,
										 i_RecordStatus = (int)RecordStatus.Grabado,
										 i_RecordType = (int)RecordType.NoTemporal,
										 v_ComponentId = D.v_ComponentId
									 }).ToList();



				fv.Restrictions = (from A in dbContext.componentfieldvaluesrestriction
								   join B in dbContext.masterrecommendationrestricction on A.v_MasterRecommendationRestricctionId
																						 equals B.v_MasterRecommendationRestricctionId
								   join C in dbContext.componentfieldvalues on A.v_ComponentFieldValuesId equals C.v_ComponentFieldValuesId
								   join D in dbContext.componentfields on C.v_ComponentFieldId equals D.v_ComponentFieldId
								   where A.v_ComponentFieldValuesId == fv.v_ComponentFieldValuesId &&
								   A.i_IsDeleted == 0 && B.i_TypifyingId == (int)Typifying.Restricciones
								   select new RestrictionList
								   {
									   v_ComponentFieldValuesRestrictionId = A.v_ComponentFieldValuesRestrictionId,
									   v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
									   v_MasterRestrictionId = A.v_MasterRecommendationRestricctionId,
									   v_RestrictionName = B.v_Name,
									   i_RecordStatus = (int)RecordStatus.Grabado,
									   i_RecordType = (int)RecordType.NoTemporal,
									   v_ComponentId = D.v_ComponentId
								   }).ToList();
			}

			return fieldValues;
		}

		private List<ServiceComponentFieldsList> GetServiceComponentFields(string pstrServiceComponentId, string pstrServiceId)
		{
			var isDeleted = (int)SiNo.NO;
			var isDeleted1 = (int)SiNo.NO;
			string serviceId = pstrServiceId;
			var serviceComponentId = pstrServiceComponentId;

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			#region serviceComponentFieldValues

			var serviceComponentFieldValues = (from s in dbContext.service
											   join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
											   join scfs in dbContext.servicecomponentfields on sc.v_ServiceComponentId equals scfs.v_ServiceComponentId
											   join A in dbContext.servicecomponentfieldvalues on scfs.v_ServiceComponentFieldsId equals A.v_ServiceComponentFieldsId

											   where s.v_ServiceId == pstrServiceId &&
													 A.i_IsDeleted == isDeleted

											   select new ServiceComponentFieldValuesList
											   {
												   v_ComponentFieldId = scfs.v_ComponentFieldId,
												   v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
												   v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
												   v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
												   v_Value1 = A.v_Value1,
												   v_Value2 = A.v_Value2,
												   i_Index = A.i_Index,
												   i_Value1 = A.i_Value1
											   }).ToList();

			#endregion

			var serviceComponentFields = (from A in dbContext.servicecomponentfields
										  join ss in
											  (from jjj in dbContext.diagnosticrepository
											   where //(jjj.v_ComponentFieldId == "") &&
													 (jjj.v_ServiceId == serviceId) &&
													 (jjj.i_IsDeleted == 0)

											   select new
											   {
												   v_ComponentFieldId = jjj.v_ComponentFieldId,
												   i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
											   }) on A.v_ComponentFieldId equals ss.v_ComponentFieldId into feePayments

										  from ss in feePayments.DefaultIfEmpty()

										  where (A.v_ServiceComponentId == serviceComponentId) &&
												(A.i_IsDeleted == isDeleted)

										  select new ServiceComponentFieldsList
										  {
											  v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
											  v_ComponentFieldsId = A.v_ComponentFieldId,
											  v_ServiceComponentId = A.v_ServiceComponentId,
											  i_HasAutomaticDxId = ss.i_HasAutomaticDxId,
										  }).ToList();



			if (serviceComponentFields.Count != 0)
			{
				//serviceComponentFields = (from a in serviceComponentFields
				//                          let hazAutoDx = (from jjj in dbContext.diagnosticrepository
				//                                           where (jjj.v_ComponentFieldId == a.v_ComponentFieldsId) &&
				//                                                 (jjj.v_ServiceId == serviceId) &&
				//                                                 (jjj.i_IsDeleted == 0)
				//                                           select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
				//                          select new ServiceComponentFieldsList
				//                          {
				//                              v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
				//                              v_ComponentFieldsId = a.v_ComponentFieldsId,
				//                              v_ServiceComponentId = a.v_ServiceComponentId,
				//                              //i_HasAutomaticDxId = (from jjj in dbContext.diagnosticrepository
				//                              //                      where jjj.v_ComponentFieldId == a.v_ComponentFieldsId &&
				//                              //                       jjj.v_ServiceId == pstrServiceId &&
				//                              //                       jjj.i_IsDeleted == 0
				//                              //                      select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
				//                              //                      ).SingleOrDefault()
				//                              i_HasAutomaticDxId = hazAutoDx.FirstOrDefault<int?>(),


				//                          }).ToList();


				//// Carga inicial de servicecomponentfieldvalues
				//foreach (var fv in q)
				//{
				//    fv.ServiceComponentFieldValues = GetServiceComponentFieldValues(fv.v_ServiceComponentFieldsId);
				//}

				// Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
				serviceComponentFieldValues.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
				serviceComponentFields.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
				serviceComponentFields.ForEach(a => a.ServiceComponentFieldValues = serviceComponentFieldValues.FindAll(p => p.v_ServiceComponentFieldsId == a.v_ServiceComponentFieldsId));

				return serviceComponentFields;
			}
			else
			{
				return serviceComponentFields;
			}
			//var dd = new List<ServiceComponentFieldsList>();
			//return dd;
		}

		private List<ServiceComponentFieldValuesList> GetServiceComponentFieldValues(string pstrServiceComponentFieldsId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponentfieldvalues
																				 join scf in dbContext.servicecomponentfields on A.v_ServiceComponentFieldsId equals scf.v_ServiceComponentFieldsId
																				 where A.v_ServiceComponentFieldsId == pstrServiceComponentFieldsId &&
																				  A.i_IsDeleted == 0
																				 select new ServiceComponentFieldValuesList
																				 {
																					 v_ComponentFieldId = scf.v_ComponentFieldId,
																					 v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
																					 v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
																					 v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
																					 v_Value1 = A.v_Value1,
																					 v_Value2 = A.v_Value2,
																					 i_Index = A.i_Index,
																					 i_Value1 = A.i_Value1
																				 }).ToList();


			return serviceComponentFieldValues;
		}

		public List<ComponentList> GetServiceComponentsForBuildMenu(ref OperationResult pobjOperationResult, string pstrServiceId)
		{

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var isDeleted = 0;
				int? componentTypeId = (int?)ComponentType.Examen;
				int? isRequiredId = (int?)SiNo.SI;
				var recomId = (int)Typifying.Recomendaciones;
				var restricId = (int)Typifying.Restricciones;
				int groupMeasurementUnitId = 105;

				#region Recomendation

				var _valueFieldsRecome = (from s in dbContext.service
										  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
										  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
										  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
										  join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
										  join rec in dbContext.componentfieldvaluesrecommendation on cfsv.v_ComponentFieldValuesId equals rec.v_ComponentFieldValuesId
										  join mrec in dbContext.masterrecommendationrestricction on rec.v_MasterRecommendationRestricctionId equals mrec.v_MasterRecommendationRestricctionId

										  where (rec.i_IsDeleted == isDeleted) &&
												(mrec.i_TypifyingId == recomId) &&
												(s.v_ServiceId == pstrServiceId)&&
												(sc.i_IsDeleted == isDeleted)

										  select new RecomendationList
										  {
											  v_ComponentFieldValuesRecommendationId = rec.v_ComponentFieldValuesRecommendationId,
											  v_ComponentFieldValuesId = rec.v_ComponentFieldValuesId,
											  v_MasterRecommendationId = rec.v_MasterRecommendationRestricctionId,
											  v_RecommendationName = mrec.v_Name,
											  v_ComponentId = sc.v_ComponentId,
											  i_RecordStatus = (int)RecordStatus.Grabado,
											  i_RecordType = (int)RecordType.NoTemporal,

										  }).ToList();

				#endregion

				#region Restriction

				var _valueFieldsRestri = (from s in dbContext.service
										  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
										  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
										  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
										  join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
										  join res in dbContext.componentfieldvaluesrestriction on cfsv.v_ComponentFieldValuesId equals res.v_ComponentFieldValuesId
										  join mres in dbContext.masterrecommendationrestricction on res.v_MasterRecommendationRestricctionId equals mres.v_MasterRecommendationRestricctionId

										  where (res.i_IsDeleted == isDeleted) &&
												(mres.i_TypifyingId == restricId) &&
												(s.v_ServiceId == pstrServiceId)&&
												(sc.i_IsDeleted == isDeleted)

										  select new RestrictionList
										  {
											  v_ComponentFieldValuesRestrictionId = res.v_ComponentFieldValuesRestrictionId,
											  v_ComponentFieldValuesId = res.v_ComponentFieldValuesId,
											  v_MasterRestrictionId = res.v_MasterRecommendationRestricctionId,
											  v_RestrictionName = mres.v_Name,
											  v_ComponentId = sc.v_ComponentId,
											  i_RecordStatus = (int)RecordStatus.Grabado,
											  i_RecordType = (int)RecordType.NoTemporal
										  }).ToList();
				#endregion

				#region Values

				var _valueFields = (from s in dbContext.service
									join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
									join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
									join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
									join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
									join dise in dbContext.diseases on cfsv.v_Diseases equals dise.v_DiseasesId
									where (cfsv.i_IsDeleted == isDeleted) &&
										  (s.v_ServiceId == pstrServiceId)&&
										  (sc.i_IsDeleted == isDeleted)&&
										  (sc.i_IsDeleted == isDeleted)

									select new ComponentFieldValues
									{
										v_ComponentFieldValuesId = cfsv.v_ComponentFieldValuesId,
										v_ComponentFieldsId = cfsv.v_ComponentFieldId,
										v_AnalyzingValue1 = cfsv.v_AnalyzingValue1,
										v_AnalyzingValue2 = cfsv.v_AnalyzingValue2,
										i_OperatorId = cfsv.i_OperatorId.Value,
										v_LegalStandard = cfsv.v_LegalStandard,
										i_IsAnormal = cfsv.i_IsAnormal,
										i_ValidationMonths = cfsv.i_ValidationMonths,
										v_DiseasesName = cfsv.diseases.v_Name,
										v_DiseasesId = cfsv.v_Diseases,
										v_ComponentId = sc.v_ComponentId,
										i_GenderId = cfsv.i_GenderId,
										v_CIE10 = dise.v_CIE10Id

									}).ToList();

				_valueFields.ForEach(a =>
				{
					a.Recomendations = _valueFieldsRecome.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
					a.Restrictions = _valueFieldsRestri.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
				});

				#endregion

				#region Fields

				var _comFields = (from s in dbContext.service
								  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
								  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
								  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
								  join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId

								  let hazAutoDx = (from jjj in dbContext.diagnosticrepository
												   where (jjj.v_ComponentFieldId == cfs.v_ComponentFieldId) &&
													   (jjj.v_ServiceId == pstrServiceId) &&
													   (jjj.i_IsDeleted == isDeleted)
												   //select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
												   select new
												   {
													   //v_ComponentFieldId = jjj.v_ComponentFieldId
													   i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
												   })

								  //let measurementUnitId = cfs.componentfield.i_MeasurementUnitId.Value

								  join dh in dbContext.datahierarchy on new { a = groupMeasurementUnitId, b = cf.i_MeasurementUnitId.Value }  // UNID MEDIDA
													  equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
								  from dh in dh_join.DefaultIfEmpty()

								  where (cfs.i_IsDeleted == isDeleted) &&
										(cf.i_IsDeleted == isDeleted) &&
										(s.v_ServiceId == pstrServiceId)&&
										(sc.i_IsDeleted == isDeleted)&&
										 (sc.i_IsRequiredId == (int?)SiNo.SI)

								  select new ComponentFieldsList
								  {
									  v_ComponentFieldId = cf.v_ComponentFieldId,
									  v_TextLabel = cf.v_TextLabel,
									  v_ComponentId = cfs.v_ComponentId,
									  i_LabelWidth = cf.i_LabelWidth.Value,
									  v_DefaultText = cf.v_DefaultText,
									  i_ControlId = cf.i_ControlId.Value,
									  i_GroupId = cf.i_GroupId.Value,
									  i_ItemId = cf.i_ItemId.Value,
									  i_ControlWidth = cf.i_WidthControl.Value,
									  i_HeightControl = cf.i_HeightControl.Value,
									  i_MaxLenght = cf.i_MaxLenght.Value,
									  i_IsRequired = cf.i_IsRequired.Value,
									  i_Column = cf.i_Column.Value,
									  v_MeasurementUnitName = dh.v_Value1,
									  i_IsCalculate = cf.i_IsCalculate.Value,
									  i_Order = cf.i_Order.Value,
									  i_MeasurementUnitId = cf.i_MeasurementUnitId.Value,
									  r_ValidateValue1 = cf.r_ValidateValue1.Value,
									  r_ValidateValue2 = cf.r_ValidateValue2.Value,
									  v_Group = cfs.v_Group,
									  v_Formula = cf.v_Formula,
									  i_NroDecimales = cf.i_NroDecimales.Value,
									  i_ReadOnly = cf.i_ReadOnly.Value,
									  i_Enabled = cf.i_Enabled.Value,
									  //i_LabelHeight = cf.i_HeightLabel, // este campo no existe
									  //i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
									  i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().i_HasAutomaticDxId,
									  //Values = _valueFields.Where(p => p.v_ComponentFieldsId == cfs.v_ComponentFieldId)
									  //Values = xcfsv
								  }).ToList();

				// Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
				_valueFields.Sort((x, y) => x.v_ComponentFieldsId.CompareTo(y.v_ComponentFieldsId));
				_comFields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));
				_comFields.ForEach(a => a.Values = _valueFields.FindAll(p => p.v_ComponentFieldsId == a.v_ComponentFieldId));


				Formulate formu = null;
				TargetFieldOfCalculate targetFieldOfCalculate = null;

				foreach (var item in _comFields)
				{
					List<Formulate> formuList = new List<Formulate>();
					List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

					var find = _comFields.FindAll(p => p.v_Formula != null && p.v_Formula.Contains(item.v_ComponentFieldId));

					if (find.Count != 0)
					{
						item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

						foreach (var f in find)
						{
							formu = new Formulate();
							formu.v_Formula = f.v_Formula;
							formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
							formuList.Add(formu);

							targetFieldOfCalculate = new TargetFieldOfCalculate();
							targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
							targetFieldOfCalculateList.Add(targetFieldOfCalculate);
						}

						item.Formula = formuList;
						item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
					}

				}

				// obligatorio para que los controles se dibujen en orden adecuado
				_comFields.Sort((x, y) => x.i_Order.CompareTo(y.i_Order));

				#endregion

				#region Components

				List<ComponentList> components = (from aaa in dbContext.servicecomponent
												  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
												  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
																  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
												  from J1 in J1_join.DefaultIfEmpty()

												  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
																				  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
												  from J2 in J2_join.DefaultIfEmpty()

												  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
																							   equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
												  from fff in J5_join.DefaultIfEmpty()

												  where (aaa.v_ServiceId == pstrServiceId) &&
														(bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
														(aaa.i_IsDeleted == 0) &&
														(aaa.i_IsRequiredId == (int?)SiNo.SI)
												  //orderby aaa.v_ServiceComponentId, aaa.i_index
												  select new ComponentList
												  {
													  v_ComponentId = bbb.v_ComponentId,
													  v_Name = bbb.v_Name,
													  i_UIIsVisibleId = bbb.i_UIIsVisibleId,
													  i_ComponentTypeId = bbb.i_ComponentTypeId,
													  v_ServiceComponentId = aaa.v_ServiceComponentId,
													  v_CreationUser = J1.v_UserName,
													  v_UpdateUser = J2.v_UserName,
													  d_CreationDate = aaa.d_InsertDate,
													  d_UpdateDate = aaa.d_UpdateDate,
													  i_IsDeleted = aaa.i_IsDeleted.Value,
													  i_CategoryId = bbb.i_CategoryId,
													  v_CategoryName = fff.v_Value1,
													  i_GroupedComponentId = bbb.i_CategoryId,
													  v_GroupedComponentName = fff.v_Value1,
													  v_ComponentCopyId = bbb.v_ComponentId,
													  i_ServiceComponentStatusId = aaa.i_ServiceComponentStatusId.Value,
													  //i_Index = aaa.i_index
													  i_Index = bbb.i_UIIndex
												  }).ToList();

				// Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)

				components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
				components.ForEach(a => a.Fields = _comFields.FindAll(p => p.v_ComponentId == a.v_ComponentId));


				// Orden obligatorio para capturar siempre el v_ServiceComponentId correcto
				components.OrderBy(o1 => o1.v_ServiceComponentId).ThenBy(o2 => o2.i_Index).ToList();

				#endregion

				#region Agrupar componentes individuales en un solo examen component ejem: Laboratorio , Psicologia

				List<ComponentList> groupedComponentsName = null;

				var categories = components.FindAll(p => p.i_CategoryId != -1)
								.GroupBy(g => g.i_CategoryId)
								.Select(s => s.First())
					//.OrderBy(o => o.i_CategoryId).ToList();
								.OrderByDescending(o => o.v_CategoryName).ToList();
				// Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
				components.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

				for (int i = 0; i < categories.Count; i++)
				{
					var categoryId = categories[i].i_CategoryId;

					var componentsByCategory = components.FindAll(p => p.i_CategoryId == categoryId)
											  .OrderBy(o => o.i_Index).ToList();

					var join = string.Join("|", componentsByCategory.Select(p => p.v_ComponentId));
					categories[i].v_ComponentId = join;

					groupedComponentsName = new List<ComponentList>();

					for (int j = 0; j < componentsByCategory.Count; j++)
					{
						var groupedComponentName = new ComponentList();
						groupedComponentName.v_ComponentId = componentsByCategory[j].v_ComponentCopyId;
						groupedComponentName.v_GroupedComponentName = componentsByCategory[j].v_Name;
						groupedComponentName.i_Index = componentsByCategory[j].i_Index;
						groupedComponentsName.Add(groupedComponentName);
					}

					categories[i].GroupedComponentsName = groupedComponentsName;
				}


				// Buscar componentes individuales
				var componentsToImport = components.FindAll(p => p.i_CategoryId != -1)
										.OrderBy(o => o.i_CategoryId).ToList();

				// Importar los campos de cada uno de los componentes individuales hacia el nuevo componente             
				for (int i = 0; i < categories.Count; i++)
				{
					var categoryId = categories[i].i_CategoryId;

					var fields = componentsToImport.FindAll(p => p.i_CategoryId == categoryId)
								.SelectMany(p => p.Fields).ToList();

					categories[i].i_IsGroupedComponent = (int)SiNo.SI;
					categories[i].v_Name = categories[i].v_CategoryName;
					categories[i].Fields = new List<ComponentFieldsList>();
					categories[i].Fields.AddRange(fields);
				}

				// Eliminar los componentes individuales ya no sirven
				for (int i = 0; i < componentsToImport.Count; i++)
				{
					components.Remove(componentsToImport[i]);
				}

				// Agregar los nuevos componentes (LAB,PSICOLOGIA) a la lista de examenes que va alimentar el ESO
				components.AddRange(categories);

				#endregion

				pobjOperationResult.Success = 1;

				return components;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public ServiceComponentList GetServiceComponentsInfo(ref OperationResult pobjOperationResult, string pstrServiceComponentId, string pstrServiceId)
		{

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from aaa in dbContext.servicecomponent
							 join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
							 join cfs in dbContext.componentfields on bbb.v_ComponentId equals cfs.v_ComponentId
							 join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId
							 join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
											 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_ApprovedUpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 join B in dbContext.systemparameter on new { a = aaa.i_ServiceComponentStatusId.Value, b = 127 }
														equals new { a = B.i_ParameterId, b = B.i_GroupId } // estado del examen componente

							 where aaa.v_ServiceComponentId == pstrServiceComponentId &&
									bbb.i_ComponentTypeId == (int?)ComponentType.Examen &&
									aaa.i_IsDeleted == 0
							 orderby aaa.i_index

							 select new ServiceComponentList
							 {
								 v_ServiceComponentId = aaa.v_ServiceComponentId,
								 v_ComponentId = aaa.v_ComponentId,
								 v_ComponentName = bbb.v_Name,
								 i_ServiceComponentStatusId = aaa.i_ServiceComponentStatusId.Value,
								 v_ServiceComponentStatusName = B.v_Value1,
								 v_Comment = aaa.v_Comment,
								 i_ExternalInternalId = aaa.i_ExternalInternalId.Value,
								 d_StartDate = aaa.d_StartDate.Value,
								 d_EndDate = aaa.d_EndDate.Value,
								 i_QueueStatusId = aaa.i_QueueStatusId.Value,
								 v_CreationUser = J1.v_UserName,
								 v_UpdateUser = J2.v_UserName,
								 d_CreationDate = aaa.d_InsertDate,
								 d_UpdateDate = aaa.d_UpdateDate,
								 i_IsDeleted = aaa.i_IsDeleted.Value,
								 i_ControlId = cf.i_ControlId,
								 i_IsApprovedId = aaa.i_IsApprovedId
							 }).FirstOrDefault();

				// Cargar campos del componente Ejem Triaje : talla ; Peso ; etc
				query.ServiceComponentFields = GetServiceComponentFields(pstrServiceComponentId, pstrServiceId);

				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public void UpdateServiceComponent(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where a.v_ServiceComponentId == pobjDtoEntity.v_ServiceComponentId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados
				//pobjDtoEntity.d_UpdateDate = DateTime.Now;
				//pobjDtoEntity.i_UpdateUserId = Int32.Parse(ClientSession[2]);
				servicecomponent objEntity = servicecomponentAssembler.ToEntity(pobjDtoEntity);

				// Copiar los valores desde la entidad actualizada a la Entidad Fuente
				dbContext.servicecomponent.ApplyCurrentValues(objEntity);

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + objEntity.v_ServiceComponentId.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public void UpdateServiceComponentOffice(List<servicecomponentDto> list)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				foreach (var item in list)
				{
					// Obtener la entidad fuente

					var objEntitySource = dbContext.servicecomponent.SingleOrDefault(p => p.v_ServiceComponentId == item.v_ServiceComponentId);
					objEntitySource.i_QueueStatusId = item.i_QueueStatusId;
					objEntitySource.i_Iscalling = item.i_Iscalling;
					objEntitySource.i_Iscalling_1 = item.i_Iscalling;
					objEntitySource.d_EndDate = item.d_EndDate;

				}

				// Guardar los cambios
				dbContext.SaveChanges();

				return;
			}
			catch (Exception ex)
			{
				return;
			}
		}

		public void UpdateServiceComponentOfficeLaboratorio(List<servicecomponentDto> list)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				foreach (var item in list)
				{
					// Obtener la entidad fuente

					var objEntitySource = dbContext.servicecomponent.SingleOrDefault(p => p.v_ServiceComponentId == item.v_ServiceComponentId);
					objEntitySource.i_QueueStatusId = item.i_QueueStatusId;
					objEntitySource.i_Iscalling = item.i_Iscalling;
					objEntitySource.i_Iscalling_1 = item.i_Iscalling;
					objEntitySource.d_EndDate = item.d_EndDate;
					objEntitySource.i_ServiceComponentStatusId = item.i_ServiceComponentStatusId;
				}

				// Guardar los cambios
				dbContext.SaveChanges();

				return;
			}
			catch (Exception ex)
			{
				return;
			}
		}

		public void UpdateServiceComponentOfficeLlamando(servicecomponentDto pobjDtoEntity)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where a.v_ServiceComponentId == pobjDtoEntity.v_ServiceComponentId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados
				objEntitySource.v_NameOfice = pobjDtoEntity.v_NameOfice;
				objEntitySource.i_QueueStatusId = pobjDtoEntity.i_QueueStatusId;

				// Guardar los cambios
				dbContext.SaveChanges();
			}
			catch (Exception)
			{
				return;
			}
		}


		public void UpdateServiceComponentVisor(ref OperationResult pobjOperationResult, string pstrServiceComponentId, int pintFlagIsCalling)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where a.v_ServiceComponentId == pstrServiceComponentId
									   select a).FirstOrDefault();
				objEntitySource.i_Iscalling = pintFlagIsCalling;

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				return;
			}
		}

		public void UpdateServiceComponentVisor_(ref OperationResult pobjOperationResult, string pstrServiceComponentId, int pintFlagIsCalling)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where a.v_ServiceComponentId == pstrServiceComponentId
									   select a).FirstOrDefault();
				objEntitySource.i_Iscalling_1 = pintFlagIsCalling;

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				return;
			}
		}

		public void UpdateServiceComponentFromEso(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession, bool? enabledchkApproved)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				string[] componentId = null;

				if (pobjDtoEntity.v_ComponentId != null)
				{
					if (pobjDtoEntity.v_ComponentId.Contains('|'))
					{
						componentId = pobjDtoEntity.v_ComponentId.Split('|');
					}
					else
					{
						componentId = new string[1];
						componentId[0] = pobjDtoEntity.v_ComponentId;
					}
				}

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where (a.v_ServiceId == pobjDtoEntity.v_ServiceId) &&
											 (componentId.Contains(a.v_ComponentId))
									   select a).ToList();

				foreach (var item in objEntitySource)
				{
					// Crear la entidad con los datos actualizados
					item.v_Comment = pobjDtoEntity.v_Comment;
					item.i_ServiceComponentStatusId = pobjDtoEntity.i_ServiceComponentStatusId;
					item.i_ExternalInternalId = pobjDtoEntity.i_ExternalInternalId;
					item.d_UpdateDate = DateTime.Now;
					// Logica para soportar al tecnologo y al especialista que aprueba el examen

					int? isApproved = (from a in dbContext.component
									   where (a.v_ComponentId == item.v_ComponentId) &&
										   (a.i_IsDeleted == 0)
									   select a.i_IsApprovedId).FirstOrDefault();

					// El examen Necesita ser aprobado / Revisado y diagnosticado x especialista

					if (isApproved == (int)SiNo.SI)
					{
						// Lo esta aprobando el especialista que tambien es un medico evaluador
						if (enabledchkApproved.Value)
						{
							item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
							item.d_ApprovedUpdateDate = DateTime.Now;
							item.i_IsApprovedId = pobjDtoEntity.i_IsApprovedId;
						}
						else
						{
							// El tecnologo esta registrando los datos
							item.i_UpdateUserTechnicalDataRegisterId = Int32.Parse(ClientSession[2]);
							item.d_UpdateDateTechnicalDataRegister = DateTime.Now;
						}
					}
					else
					{
						item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
						item.d_ApprovedUpdateDate = DateTime.Now;
					}

					// Una sola vez se graba la fecha de creacion / grabacion del examen
					if (item.d_ApprovedInsertDate == null)
					{
						item.d_ApprovedInsertDate = DateTime.Now;
					}

				}

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public servicecomponentDto GetServiceComponent(ref OperationResult pobjOperationResult, string pstrServiceComponentId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				servicecomponentDto objDtoEntity = null;

				var objEntity = (from a in dbContext.servicecomponent
								 where a.v_ServiceComponentId == pstrServiceComponentId
								 select a).FirstOrDefault();

				if (objEntity != null)
					objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);

				pobjOperationResult.Success = 1;
				return objDtoEntity;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public servicecomponentDto GetServiceComponentByServiceIdAndComponentId(string pstrServiceId, string pstrComponentId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				servicecomponentDto objDtoEntity = null;

				var objEntity = (from a in dbContext.servicecomponent
								 where a.v_ComponentId == pstrComponentId && a.v_ServiceId == pstrServiceId
								 select a).FirstOrDefault();

				if (objEntity != null)
					objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);

				return objDtoEntity;
			}
			catch (Exception ex)
			{
				return null;
			}
		}


		public List<ServiceComponentList> GetServiceComponentByCategoryId(ref OperationResult pobjOperationResult, int pstrCategoryId, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				//servicecomponentDto objDtoEntity = null;

				var objEntity = (from a in dbContext.servicecomponent
								 join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
								 where b.i_CategoryId == pstrCategoryId && a.v_ServiceId == pstrServiceId && a.i_IsRequiredId == (int)SiNo.SI
								 select new ServiceComponentList
								 {
									 v_ServiceComponentId = a.v_ServiceComponentId,
									 v_ServiceId = a.v_ServiceId,
									 v_ComponentId = a.v_ComponentId,
									 v_ComponentName = b.v_Name,
									 i_ServiceComponentStatusId = a.i_ServiceComponentStatusId
								 }).ToList();

				//if (objEntity != null)
				//    objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);
				List<ServiceComponentList> objDataList = objEntity.ToList();
				pobjOperationResult.Success = 1;
				return objDataList;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}


		public void UpdateEstadoServiceComponent(ref OperationResult pobjOperationResult, string pstrServiceComponentId, int pintFlag)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where a.v_ServiceComponentId == pstrServiceComponentId
									   select a).FirstOrDefault();
				objEntitySource.i_ServiceComponentStatusId = pintFlag;

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				return;
			}
		}



		#region Anamnesis

		public void UpdateAnamnesis(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pobjDtoEntity.v_ServiceId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados
				objEntitySource.v_MainSymptom = pobjDtoEntity.v_MainSymptom;
				objEntitySource.i_TimeOfDisease = pobjDtoEntity.i_TimeOfDisease;
				objEntitySource.i_TimeOfDiseaseTypeId = pobjDtoEntity.i_TimeOfDiseaseTypeId;
				objEntitySource.v_Story = pobjDtoEntity.v_Story;
				objEntitySource.i_DreamId = pobjDtoEntity.i_DreamId;
				objEntitySource.i_UrineId = pobjDtoEntity.i_UrineId;
				objEntitySource.i_DepositionId = pobjDtoEntity.i_DepositionId;
				objEntitySource.i_AppetiteId = pobjDtoEntity.i_AppetiteId;
				objEntitySource.i_ThirstId = pobjDtoEntity.i_ThirstId;
				objEntitySource.d_Fur = pobjDtoEntity.d_Fur;
				objEntitySource.v_CatemenialRegime = pobjDtoEntity.v_CatemenialRegime;
				objEntitySource.i_MacId = pobjDtoEntity.i_MacId;
				objEntitySource.i_HasSymptomId = pobjDtoEntity.i_HasSymptomId;

				objEntitySource.v_FechaUltimoPAP = pobjDtoEntity.v_FechaUltimoPAP;
				objEntitySource.v_ResultadosPAP = pobjDtoEntity.v_ResultadosPAP;
				objEntitySource.v_FechaUltimaMamo = pobjDtoEntity.v_FechaUltimaMamo;
				objEntitySource.v_ResultadoMamo = pobjDtoEntity.v_ResultadoMamo;

				objEntitySource.d_PAP = pobjDtoEntity.d_PAP;
				objEntitySource.d_Mamografia = pobjDtoEntity.d_Mamografia;
				objEntitySource.v_Menarquia = pobjDtoEntity.v_Menarquia;
				objEntitySource.v_Gestapara = pobjDtoEntity.v_Gestapara;
				objEntitySource.v_CiruGine = pobjDtoEntity.v_CiruGine;
				objEntitySource.v_Findings = pobjDtoEntity.v_Findings;
				// datos de cabecera del Servicio
				objEntitySource.i_AptitudeStatusId = pobjDtoEntity.i_AptitudeStatusId;
				objEntitySource.i_IsNewControl = pobjDtoEntity.i_IsNewControl;
				objEntitySource.i_Evolucion = pobjDtoEntity.i_Evolucion;
				objEntitySource.i_CursoEnf = pobjDtoEntity.i_CursoEnf;
				objEntitySource.i_InicioEnf = pobjDtoEntity.i_InicioEnf;

                objEntitySource.v_InicioVidaSexaul = pobjDtoEntity.v_InicioVidaSexaul;
                objEntitySource.v_NroParejasActuales = pobjDtoEntity.v_NroParejasActuales;
                objEntitySource.v_NroAbortos = pobjDtoEntity.v_NroAbortos;
                objEntitySource.v_PrecisarCausas = pobjDtoEntity.v_PrecisarCausas;


				objEntitySource.d_UpdateDate = DateTime.Now;
				objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}


		#endregion

		#region Diagnosticos del examen / componente

		public List<DiagnosticRepositoryList> GetDisgnosticsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository

														join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos    

														join eee in dbContext.cie10 on ddd.v_CIE10Id equals eee.v_CIE10Id  // Diagnosticos

														join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																							equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
														from ggg in J4_join.DefaultIfEmpty()

														join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 166 } // TIPO  [Accidenete, Enfermedad]
																								equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
														from hhh in J3_join.DefaultIfEmpty()

														join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
																							equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
														from iii in J6_join.DefaultIfEmpty()

														join JJJ in dbContext.systemparameter on new { a = ccc.i_DiagnosticSourceId.Value, b = 167 } // ORIGEN OCU
																						   equals new { a = JJJ.i_ParameterId, b = JJJ.i_GroupId } into J7_join
														from JJJ in J7_join.DefaultIfEmpty()

														join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
																		equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
														from J1 in J1_join.DefaultIfEmpty()

														join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
																						equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
														from J2 in J2_join.DefaultIfEmpty()

														where ccc.v_ServiceId == pstrServiceId &&
															  ccc.i_IsDeleted == 0

														select new DiagnosticRepositoryList
														{
															v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
															v_ServiceId = ccc.v_ServiceId,
															v_ComponentId = ccc.v_ComponentId,
															v_DiseasesId = ccc.v_DiseasesId,
															i_AutoManualId = ccc.i_AutoManualId,
															i_PreQualificationId = ccc.i_PreQualificationId,
															i_FinalQualificationId = ccc.i_FinalQualificationId,
															i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
															i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
															d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
															i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
															v_DiseasesName = ddd.v_Name,

															v_FinalQualificationName = ggg.v_Value1,
															v_DiagnosticTypeName = hhh.v_Value1,
															v_IsSentToAntecedentName = iii.v_Value1,
															i_RecordStatus = (int)RecordStatus.Grabado,
															i_RecordType = (int)RecordType.NoTemporal,

															v_CreationUser = J1.v_UserName,
															v_UpdateUser = J2.v_UserName,
															d_CreationDate = J1.d_InsertDate,
															d_UpdateDate = J2.d_UpdateDate,
															i_IsDeleted = ccc.i_IsDeleted.Value,

															i_DiagnosticSourceId = ccc.i_DiagnosticSourceId,
															v_DiagnosticSourceName = JJJ.v_Value1,
															// Accidente laboral
															i_ShapeAccidentId = ccc.i_ShapeAccidentId,
															i_BodyPartId = ccc.i_BodyPartId,
															i_ClassificationOfWorkAccidentId = ccc.i_ClassificationOfWorkAccidentId,
															// Enfermedad laboral
															i_RiskFactorId = ccc.i_RiskFactorId,
															i_ClassificationOfWorkdiseaseId = ccc.i_ClassificationOfWorkdiseaseId,
															v_Cie10 = eee.v_CIE10Id
														}).ToList();


				var sql = (from a in query

						   select new DiagnosticRepositoryList
						   {
							   v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							   v_ServiceId = a.v_ServiceId,
							   v_ComponentId = a.v_ComponentId,
							   v_DiseasesId = a.v_DiseasesId,
							   i_AutoManualId = a.i_AutoManualId,
							   i_PreQualificationId = a.i_PreQualificationId,
							   i_FinalQualificationId = a.i_FinalQualificationId,
							   i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							   i_IsSentToAntecedent = a.i_IsSentToAntecedent,
							   d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							   i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
							   v_DiseasesName = a.v_DiseasesName,

							   v_FinalQualificationName = a.v_FinalQualificationName,
							   v_DiagnosticTypeName = a.v_DiagnosticTypeName,
							   v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
							   i_RecordStatus = (int)RecordStatus.Grabado,
							   i_RecordType = (int)RecordType.NoTemporal,

							   v_CreationUser = a.v_CreationUser,
							   v_UpdateUser = a.v_UpdateUser,
							   d_CreationDate = a.d_CreationDate,
							   d_UpdateDate = a.d_UpdateDate,
							   i_IsDeleted = a.i_IsDeleted,

							   i_DiagnosticSourceId = a.i_DiagnosticSourceId,
							   v_DiagnosticSourceName = a.v_DiagnosticSourceName,
							   // Accidente laboral
							   i_ShapeAccidentId = a.i_ShapeAccidentId,
							   i_BodyPartId = a.i_BodyPartId,
							   i_ClassificationOfWorkAccidentId = a.i_ClassificationOfWorkAccidentId,
							   // Enfermedad laboral
							   i_RiskFactorId = a.i_RiskFactorId,
							   i_ClassificationOfWorkdiseaseId = a.i_ClassificationOfWorkdiseaseId,
							   v_Cie10 = a.v_Cie10,
							   v_Dx_CIE10 = a.v_DiseasesName + "   (" + a.v_Cie10 + ")"


						   }).ToList();



				pobjOperationResult.Success = 1;
				return sql;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}


		public List<DiagnosticRepositoryList> GetServiceComponentDisgnosticsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId, string pstrComponentId)
		{
			//mon.IsActive = true;

			try
			{
				string[] components = pstrComponentId.Split('|');

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from ccc in dbContext.diagnosticrepository
							 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

							 join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
																	 equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

							 join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
							 from fff in J5_join.DefaultIfEmpty()

							 join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
							 from ggg in J4_join.DefaultIfEmpty()

							 join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																	 equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
							 from hhh in J3_join.DefaultIfEmpty()

							 join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
																  equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
							 from iii in J6_join.DefaultIfEmpty()

							 join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
											 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 where (ccc.v_ServiceId == pstrServiceId) &&
								 //bbb.i_ComponentTypeId == (int?)ComponentType.Examen &&
								   (components.Contains(ccc.v_ComponentId)) &&
								 //ccc.v_ComponentId == pstrComponentId &&
								   (ccc.i_IsDeleted == 0)
							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_ComponentId = ccc.v_ComponentId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 i_AutoManualId = ccc.i_AutoManualId,
								 i_PreQualificationId = ccc.i_PreQualificationId,
								 i_FinalQualificationId = ccc.i_FinalQualificationId,
								 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
								 i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
								 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
								 i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
								 v_ComponentFieldsId = ccc.v_ComponentFieldId,
								 v_DiseasesName = ddd.v_Name,
								 v_AutoManualName = eee.v_Value1,

								 v_PreQualificationName = fff.v_Value1,
								 v_FinalQualificationName = ggg.v_Value1,
								 v_DiagnosticTypeName = hhh.v_Value1,
								 v_IsSentToAntecedentName = iii.v_Value1,
								 i_RecordStatus = (int)RecordStatus.Grabado,
								 i_RecordType = (int)RecordType.NoTemporal,

								 v_CreationUser = J1.v_UserName,
								 v_UpdateUser = J2.v_UserName,
								 d_CreationDate = J1.d_InsertDate,
								 d_UpdateDate = J2.d_UpdateDate,
								 i_IsDeleted = ccc.i_IsDeleted.Value
							 }).ToList();


				var q = (from a in query
						 select new DiagnosticRepositoryList
						 {
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_ServiceId = a.v_ServiceId,
							 v_ComponentId = a.v_ComponentId,
							 v_DiseasesId = a.v_DiseasesId,
							 i_AutoManualId = a.i_AutoManualId,
							 i_PreQualificationId = a.i_PreQualificationId,
							 i_FinalQualificationId = a.i_FinalQualificationId,
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 i_IsSentToAntecedent = a.i_IsSentToAntecedent,
							 d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							 i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
							 v_ComponentFieldsId = a.v_ComponentFieldsId,

							 v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 v_DiseasesName = a.v_DiseasesName,
							 v_AutoManualName = a.v_AutoManualName,

							 v_PreQualificationName = a.v_PreQualificationName,
							 v_FinalQualificationName = a.v_FinalQualificationName,
							 v_DiagnosticTypeName = a.v_DiagnosticTypeName,
							 v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
							 i_RecordStatus = a.i_RecordStatus,
							 i_RecordType = a.i_RecordType,

							 v_CreationUser = a.v_CreationUser,
							 v_UpdateUser = a.v_UpdateUser,
							 d_CreationDate = a.d_CreationDate,
							 d_UpdateDate = a.d_UpdateDate,
							 i_IsDeleted = a.i_IsDeleted

						 }).ToList();

				// Agregamos Restricciones / Recomendaciones
				OperationResult objOperationResult = new OperationResult();

				foreach (DiagnosticRepositoryList dr in q)
				{
					dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
					dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
				}

				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return q;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public void AddDiagnosticRepository(ref OperationResult pobjOperationResult, List<DiagnosticRepositoryList> pobjDiagnosticRepository, servicecomponentDto pobjServiceComponent, List<string> ClientSession, bool? enabledchkApproved)
		{
			//mon.IsActive = true;
			string NewId0 = "(No generado)";
			int intNodeId = int.Parse(ClientSession[0]);
			string componentId = null;

			//try
			//{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			if (pobjDiagnosticRepository != null)
			{
				foreach (var dr in pobjDiagnosticRepository)
				{

					#region DiagnosticRepository -> ADD / UPDATE / DELETE

					// ADD
					if (dr.i_RecordType == (int)RecordType.Temporal && (dr.i_RecordStatus == (int)RecordStatus.Agregado || dr.i_RecordStatus == (int)RecordStatus.Modificado))
					{
						diagnosticrepository objEntity = new diagnosticrepository();

						// En caso de haber mas de un ComponentID quiere decir que lo datos provienen de un examen agrupador con una categoria (LAB,PSICOLOGIA) 
						// entonces cojo el ID del hijo mayor (osea el primer ID)[0]
						// Buscar un palote
						if (dr.v_ComponentId != null)
						{
							if (dr.v_ComponentId.Contains('|'))
								componentId = (dr.v_ComponentId.Split('|'))[0];
							else
								componentId = dr.v_ComponentId;
						}

						objEntity.v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId;
						objEntity.v_ServiceId = dr.v_ServiceId;
						objEntity.v_ComponentId = componentId;
						objEntity.v_DiseasesId = dr.v_DiseasesId;
						// ID del Control que generó el DX automático [v_ComponentFieldsId]
						objEntity.v_ComponentFieldId = dr.v_ComponentFieldsId;
						objEntity.i_AutoManualId = dr.i_AutoManualId;
						objEntity.i_PreQualificationId = dr.i_PreQualificationId;
						// Total Diagnósticos
						objEntity.i_FinalQualificationId = dr.i_FinalQualificationId;
						objEntity.i_DiagnosticTypeId = dr.i_DiagnosticTypeId;
						objEntity.i_IsSentToAntecedent = dr.i_IsSentToAntecedent;
						objEntity.d_ExpirationDateDiagnostic = dr.d_ExpirationDateDiagnostic;

						objEntity.d_InsertDate = DateTime.Now;
						//objEntity.d_UpdateDate = DateTime.Now;
						objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
						//objEntity.i = Int32.Parse(ClientSession[2]);
						objEntity.i_IsDeleted = 0;

						// Accidente laboral
						objEntity.i_DiagnosticSourceId = dr.i_DiagnosticSourceId;
						objEntity.i_ShapeAccidentId = dr.i_ShapeAccidentId;

						objEntity.i_BodyPartId = dr.i_BodyPartId;
						objEntity.i_ClassificationOfWorkAccidentId = dr.i_ClassificationOfWorkAccidentId;

						// Enfermedad laboral
						objEntity.i_RiskFactorId = dr.i_RiskFactorId;
						objEntity.i_ClassificationOfWorkdiseaseId = dr.i_ClassificationOfWorkdiseaseId;

						// Autogeneramos el Pk de la tabla                      
						NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 29), "DR");
						objEntity.v_DiagnosticRepositoryId = NewId0;

						dbContext.AddTodiagnosticrepository(objEntity);

					}                                                // UPDATE
					else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.Modificado)
					{
						// Obtener la entidad fuente
						var objEntitySource = (from a in dbContext.diagnosticrepository
											   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
											   select a).FirstOrDefault();

						// Crear la entidad con los datos actualizados   
						objEntitySource.i_AutoManualId = dr.i_AutoManualId;
						objEntitySource.i_PreQualificationId = dr.i_PreQualificationId;
						objEntitySource.v_ComponentId = dr.v_ComponentId.Split('|')[0];
						// ID del Control que generó el DX automático [v_ComponentFieldsId]
						//objEntitySource.v_ComponentFieldsId = dr.v_ComponentFieldsId;
						// Total Diagnósticos
						if (objEntitySource.i_FinalQualificationId == null)
							objEntitySource.i_FinalQualificationId = dr.i_FinalQualificationId;

						objEntitySource.i_DiagnosticTypeId = dr.i_DiagnosticTypeId;
						objEntitySource.i_IsSentToAntecedent = dr.i_IsSentToAntecedent;
						objEntitySource.d_ExpirationDateDiagnostic = dr.d_ExpirationDateDiagnostic;

						// Accidente laboral
						objEntitySource.i_DiagnosticSourceId = dr.i_DiagnosticSourceId;
						objEntitySource.i_ShapeAccidentId = dr.i_ShapeAccidentId;
						objEntitySource.i_BodyPartId = dr.i_BodyPartId;
						objEntitySource.i_ClassificationOfWorkAccidentId = dr.i_ClassificationOfWorkAccidentId;

						// Enfermedad laboral
						objEntitySource.i_RiskFactorId = dr.i_RiskFactorId;
						objEntitySource.i_ClassificationOfWorkdiseaseId = dr.i_ClassificationOfWorkdiseaseId;

						objEntitySource.d_UpdateDate = DateTime.Now;
						objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

					}                                                // DELETE
					else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
					{
						// Obtener la entidad fuente
						var objEntitySource = (from a in dbContext.diagnosticrepository
											   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
											   select a).FirstOrDefault();

						// Crear la entidad con los datos actualizados                                                           
						objEntitySource.d_UpdateDate = DateTime.Now;
						objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
						objEntitySource.i_IsDeleted = 1;

					}

					#endregion

					#region Restricciones -> ADD / DELETE

					if (dr.Restrictions != null)
					{
						// Operaciones básicas [Add,Update,Delete] restricciones 
						foreach (var r in dr.Restrictions)
						{
							if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
							{
								restriction objRestriction = new restriction();

								var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
								objRestriction.v_ServiceId = r.v_ServiceId;
								objRestriction.v_ComponentId = r.v_ComponentId.Split('|')[0];
								//objRestriction.v_RestrictionByDiagnosticId = NewId1;
								objRestriction.v_RestrictionId = NewId1;
								objRestriction.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? dr.v_DiagnosticRepositoryId : NewId0;

								objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId.Length > 16 ? null : r.v_MasterRestrictionId;
								objRestriction.d_InsertDate = DateTime.Now;
								objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
								objRestriction.i_IsDeleted = 0;

								dbContext.AddTorestriction(objRestriction);

							}
							else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
							{
								// Obtener la entidad fuente v_RestrictionByDiagnosticId
								var objEntitySource = (from a in dbContext.restriction
													   where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
													   select a).FirstOrDefault();

								// Crear la entidad con los datos actualizados                                                           
								objEntitySource.d_UpdateDate = DateTime.Now;
								objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
								objEntitySource.i_IsDeleted = 1;

							}
							//dbContext.SaveChanges();
						}
					}

					#endregion

					#region Recomendaciones -> ADD / DELETE

					if (dr.Recomendations != null)
					{
						// Grabar recomendaciones 
						foreach (var r in dr.Recomendations)
						{
							if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
							{
								recommendation objRecommendation = new recommendation();

								var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
								objRecommendation.v_ServiceId = r.v_ServiceId;
								objRecommendation.v_ComponentId = r.v_ComponentId.Split('|')[0];
								objRecommendation.v_RecommendationId = NewId1;
								objRecommendation.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? dr.v_DiagnosticRepositoryId : NewId0;

								//objRecommendation.v_MasterRecommendationId = r.v_RecommendationId.Length > 16 ? null : r.v_MasterRecommendationId;
								objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;
								objRecommendation.d_InsertDate = DateTime.Now;
								objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
								objRecommendation.i_IsDeleted = 0;

								dbContext.AddTorecommendation(objRecommendation);

							}
							else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
							{
								// Obtener la entidad fuente
								var objEntitySource = (from a in dbContext.recommendation
													   where a.v_RecommendationId == r.v_RecommendationId
													   select a).FirstOrDefault();

								// Crear la entidad con los datos actualizados                                                           
								objEntitySource.d_UpdateDate = DateTime.Now;
								objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
								objEntitySource.i_IsDeleted = 1;

							}
							//dbContext.SaveChanges();
						}
					}

					#endregion

				}

				// Guardar los cambios
				dbContext.SaveChanges();              

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR EXAMEN COMPONENTE", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);

				//}
				//catch (Exception ex)
				//{
				//    pobjOperationResult.Success = 0;
				//    pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				//    // Llenar entidad Log
				//    LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR EXAMEN COMPONENTE", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				//    return;
				//}
			}

			if (pobjServiceComponent != null)
			{
				// Actualizar algunos valores de ServiceComponent
				OperationResult objOperationResult = new OperationResult();
				UpdateServiceComponentFromEso(ref objOperationResult, pobjServiceComponent, ClientSession, enabledchkApproved);
			}

		}

		private string ConcatenateRestrictionConcatecDx(string pstrDiagnosticRepositoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.diagnosticrepository
					   join b in dbContext.restriction on a.v_DiagnosticRepositoryId equals b.v_DiagnosticRepositoryId
					   join c in dbContext.masterrecommendationrestricction on b.v_MasterRestrictionId equals c.v_MasterRecommendationRestricctionId
					   join d in dbContext.diseases on a.v_DiseasesId equals d.v_DiseasesId
					   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
					   a.i_IsDeleted == 0
					   && c.i_TypifyingId == (int)Typifying.Restricciones && b.i_IsDeleted == 0
					   select new
					   {
						   v_RestrictionsName = d.v_Name + ": " + c.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
		}

		private string ConcatenateRestriction(string pstrDiagnosticRepositoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

					   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
					   select new
					   {
						   v_RestrictionsName = eee.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
		}

		public string ConcatenateRestrictionByCategoria(int pintCategoryId, string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
					   join c in dbContext.component on a.v_ComponentId equals c.v_ComponentId
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
					   where c.i_CategoryId == pintCategoryId && eee.i_IsDeleted == 0 && a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
					   select new
					   {
						   v_RestrictionsName = eee.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
		}

		public string ConcatenateRestrictionByComponentId(string pstrComponentId, string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
					   where a.v_ComponentId == pstrComponentId && eee.i_IsDeleted == 0 && a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
					   select new
					   {
						   v_RestrictionsName = eee.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
		}

		public string ConcatenateRecomendacionesByCategoria(int pintCategoryId, string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.recommendation  // RESTRICCIONES POR Diagnosticos
					   join c in dbContext.component on a.v_ComponentId equals c.v_ComponentId
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
					   where c.i_CategoryId == pintCategoryId && eee.i_IsDeleted == 0 && a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones
					   select new
					   {
						   v_RestrictionsName = eee.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
		}

		private string ConcatenateRestrictionByService(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
					   where a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
					   select new
					   {
						   v_RestrictionsName = eee.v_Name
					   }).ToList().Distinct();

			if (qry == null)
			{
				return "";
			}
			else
			{
				return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
			}

		}

		private string ConcatenateRestrictionByServiceConcatecDx(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
					   join iii in dbContext.diagnosticrepository on a.v_DiagnosticRepositoryId equals iii.v_DiagnosticRepositoryId
					   join ooo in dbContext.diseases on iii.v_DiseasesId equals ooo.v_DiseasesId
					   where a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
					   select new
					   {
						   v_RestrictionsName = eee.v_Name
					   }).ToList().Distinct();

			if (qry == null)
			{
				return "";
			}
			else
			{
				return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
			}

		}

		public string ConcatenateRecommendationByService(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.recommendation  // RECOMENDACIONES
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
					   join b in dbContext.diagnosticrepository on a.v_DiagnosticRepositoryId equals b.v_DiagnosticRepositoryId
					   where a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones && b.i_FinalQualificationId != (int)FinalQualification.Descartado
					   select new
					   {
						   v_RecommendationName = eee.v_Name
					   }).ToList().Distinct();

			return string.Join(", ", qry.Select(p => p.v_RecommendationName));
		}

		private string ConcatenateRecommendationByServiceDifNormal(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.recommendation  // RECOMENDACIONES
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
					   join b in dbContext.diagnosticrepository on a.v_DiagnosticRepositoryId equals b.v_DiagnosticRepositoryId
					   where a.v_ServiceId == pstrServiceId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones && b.i_DiagnosticTypeId != (int)TipoDx.Normal
					   select new
					   {
						   v_RecommendationName = eee.v_Name
					   }).ToList().Distinct();

			if (qry == null)
			{
				return "";
			}
			else
			{ return string.Join(", ", qry.Select(p => p.v_RecommendationName)); }


		}

		private string ConcatenateRecommendation(string pstrDiagnosticRepositoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.recommendation  // RECOMENDACIONES
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
					   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones
					   select new
					   {
						   v_RecommendationName = eee.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RecommendationName));
		}

		public string ConcatenarRecomendacionesPorComponente(string pstrServiceId, string pstrCompoment)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.recommendation  // RECOMENDACIONES
					   join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
					   where a.v_ServiceId == pstrServiceId && a.v_ComponentId == pstrCompoment &&
					   a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones
					   select new
					   {
						   v_RecommendationName = eee.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_RecommendationName));
		}

		private string ConcatenateRecomendacionesConcatecDx(string pstrDiagnosticRepositoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.diagnosticrepository
					   join b in dbContext.recommendation on a.v_DiagnosticRepositoryId equals b.v_DiagnosticRepositoryId
					   join c in dbContext.masterrecommendationrestricction on b.v_MasterRecommendationId equals c.v_MasterRecommendationRestricctionId
					   join d in dbContext.diseases on a.v_DiseasesId equals d.v_DiseasesId
					   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
					   a.i_IsDeleted == 0
					   && c.i_TypifyingId == (int)Typifying.Restricciones && b.i_IsDeleted == 0
					   select new
					   {
						   v_Recomendation = d.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_Recomendation));
		}


		public bool AddServiceComponentValues_AMC_REVISAR(ref OperationResult pobjOperationResult, List<ServiceComponentFieldsList> pobjServicecomponentfields, List<string> ClientSession, string pstrPersonId, string pServiceComponentId)
		{

			bool result = false;

			string NewId = "(No generado)";
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				int intNodeId = int.Parse(ClientSession[0]);
				List<string> grupoFactorSanguineo = new List<string>();

				var serviceComponentfields = (from a in dbContext.servicecomponentfields
											  where a.v_ServiceComponentId == pServiceComponentId
											  select a).ToList();

				List<string> Ids = new List<string>();
				foreach (var item in serviceComponentfields)
				{
					Ids.Add(item.v_ServiceComponentFieldsId);
				}
				//&& ListaServicioIds.Contains(A.v_ServiceId)
				var ListaServiceComponentfieldsValues = (from a in dbContext.servicecomponentfieldvalues
														 where Ids.Contains(a.v_ServiceComponentFieldsId)
														 select a).ToList();

				//var ENT = serviceComponentfields.SelectMany(P => P.servicecomponentfieldvalues.Where(p => p.v_ServiceComponentFieldsId == "N009-CF000517532")).ToList();

				serviceComponentfields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));

				//Obtener Los ids de las tablas serviceComponentfields y servicecomponentfieldvalues***************************************************************************************
				//int Ini_Secuential_serviceComponentfields = 0;
				//int Ini_Secuential_servicecomponentfieldvalues = 0;
				//if (pobjServicecomponentfields.Count != 0 && serviceComponentfields.Count==0)
				//{
				//    Ini_Secuential_serviceComponentfields = Utils.GetNextSecuentialIdMejorado(intNodeId, 35, pobjServicecomponentfields.Count);
				//    Ini_Secuential_servicecomponentfieldvalues = Utils.GetNextSecuentialIdMejorado(intNodeId, 36, pobjServicecomponentfields.Count);
				//}
				//**************************************************************************************************************************************************************************


				foreach (var cf in pobjServicecomponentfields)
				{
					var q = serviceComponentfields.Find(p => p.v_ComponentFieldId == cf.v_ComponentFieldsId);

					if (q == null)   // ADD
					{
						#region GRABAR CAMPOS DE UN SERVICE COMPONENT

						servicecomponentfields objEntity = new servicecomponentfields();

						objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
						objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
						objEntity.d_InsertDate = DateTime.Now;
						objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
						objEntity.i_IsDeleted = 0;

						// Autogeneramos el Pk de la tabla               
						//NewId = Common.Utils.GetNewId(intNodeId, Ini_Secuential_serviceComponentfields++, "CF");
						NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");

						objEntity.v_ServiceComponentFieldsId = NewId;

						dbContext.AddToservicecomponentfields(objEntity);
						//dbContext.SaveChanges();

						#endregion

						foreach (var fv in cf.ServiceComponentFieldValues)
						{
							#region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

							if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
							{
								grupoFactorSanguineo.Add(fv.v_Value1);
							}

							if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
							{
								grupoFactorSanguineo.Add(fv.v_Value1);
							}

							#endregion

							#region GRABAR VALORES DE UN SERVICE COMPONENT

							servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

							objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
							objEntity1.v_Value1 = fv.v_Value1;
							objEntity1.d_InsertDate = DateTime.Now;
							objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objEntity1.i_IsDeleted = 0;

							// Autogeneramos el Pk de la tabla               
							//var NewId1 = Common.Utils.GetNewId(intNodeId, Ini_Secuential_servicecomponentfieldvalues++, "CV");
							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CF");
							objEntity1.v_ServiceComponentFieldValuesId = NewId1;
							objEntity1.v_ServiceComponentFieldsId = NewId;

							dbContext.AddToservicecomponentfieldvalues(objEntity1);
							//dbContext.SaveChanges();

							#endregion
						}
					}
					else         // UPDATE
					{
						#region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

						//q.v_ComponentFieldId = cf.v_ComponentFieldsId;
						//q.v_ServiceComponentId = cf.v_ServiceComponentId;
						q.d_UpdateDate = DateTime.Now;
						q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

						// Guardar los cambios
						//dbContext.SaveChanges();

						#endregion

						foreach (var fv in cf.ServiceComponentFieldValues)
						{
							#region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

							if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
							{
								grupoFactorSanguineo.Add(fv.v_Value1);
							}

							if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
							{
								grupoFactorSanguineo.Add(fv.v_Value1);
							}

							#endregion

							#region ACTUALIZAR VALORES DE UN SERVICE COMPONENT

							//var q1 = (from a in dbContext.servicecomponentfieldvalues
							//          where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
							//          select a).FirstOrDefault();

							var q1 = ListaServiceComponentfieldsValues.Find(p => p.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId);

							// problema k pasaba con examen fisico se grababa el campo pero no el valor si el valor no esta grabado
							// se graba a la prepo
							if (q1 == null)
							{
								servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

								objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
								objEntity1.v_Value1 = fv.v_Value1;
								objEntity1.d_InsertDate = DateTime.Now;
								objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
								objEntity1.i_IsDeleted = 0;

								// Autogeneramos el Pk de la tabla               
								//var NewId1 = Common.Utils.GetNewId(intNodeId, Ini_Secuential_servicecomponentfieldvalues++, "CV");
								var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CF");
								objEntity1.v_ServiceComponentFieldValuesId = NewId1;
								objEntity1.v_ServiceComponentFieldsId = q.v_ServiceComponentFieldsId;

								dbContext.AddToservicecomponentfieldvalues(objEntity1);
							}
							else
							{
								q1.v_Value1 = fv.v_Value1;
								q1.d_UpdateDate = DateTime.Now;
								q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							}

							#endregion
						}
					}
				}

				if (grupoFactorSanguineo.Count != 0)
				{
					#region GRABAR GRUPO y FACTOR SANGUINEO

					var person = (from a in dbContext.person
								  where a.v_PersonId == pstrPersonId
								  select a).FirstOrDefault();

					person.i_BloodGroupId = int.Parse(grupoFactorSanguineo[0]);
					person.i_BloodFactorId = int.Parse(grupoFactorSanguineo[1]);
					person.d_UpdateDate = DateTime.Now;
					person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
					//dbContext.SaveChanges();

					#endregion
				}

				#region MyRegion
				//var aaaa = pobjServicecomponentfields.SelectMany(p => p.ServiceComponentFieldValues).ToList();
				//var search = aaaa.FindAll(p => p.v_Value1 != "1" && p.v_Value1 != "-1");

				//pobjServicecomponentfields.Select(p => p.ServiceComponentFieldValues).ToList() = null;
				//foreach (var item in pobjServicecomponentfields)
				//{
				//    item.ServiceComponentFieldValues = search;
				//}

				//pobjServicecomponentfields.SelectMany(p => p.ServiceComponentFieldValues);

				//foreach (var cf in pobjServicecomponentfields)
				//{
				//    var q = (from a in dbContext.servicecomponentfields
				//             where a.v_ComponentFieldId == cf.v_ComponentFieldsId &&
				//             a.v_ServiceComponentId == cf.v_ServiceComponentId
				//             select a).FirstOrDefault();

				//    if (q == null)   // ADD
				//    {
				//        #region GRABAR CAMPOS DE UN SERVICE COMPONENT

				//        servicecomponentfields objEntity = new servicecomponentfields();

				//        objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
				//        objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
				//        objEntity.d_InsertDate = DateTime.Now;
				//        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
				//        objEntity.i_IsDeleted = 0;

				//        // Autogeneramos el Pk de la tabla               
				//        NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
				//        objEntity.v_ServiceComponentFieldsId = NewId;

				//        dbContext.AddToservicecomponentfields(objEntity);
				//        //dbContext.SaveChanges();

				//        #endregion

				//        foreach (var fv in cf.ServiceComponentFieldValues)
				//        {
				//            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

				//            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
				//            {
				//                grupoFactorSanguineo.Add(fv.v_Value1);
				//            }

				//            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
				//            {
				//                grupoFactorSanguineo.Add(fv.v_Value1);
				//            }

				//            #endregion

				//            #region GRABAR VALORES DE UN SERVICE COMPONENT

				//            servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

				//            objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
				//            objEntity1.v_Value1 = fv.v_Value1;
				//            objEntity1.d_InsertDate = DateTime.Now;
				//            objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
				//            objEntity1.i_IsDeleted = 0;

				//            // Autogeneramos el Pk de la tabla               
				//            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
				//            objEntity1.v_ServiceComponentFieldValuesId = NewId1;
				//            objEntity1.v_ServiceComponentFieldsId = NewId;

				//            dbContext.AddToservicecomponentfieldvalues(objEntity1);
				//            //dbContext.SaveChanges();

				//            #endregion
				//        }
				//    }
				//    else         // UPDATE
				//    {
				//        #region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

				//        //q.v_ComponentFieldId = cf.v_ComponentFieldsId;
				//        //q.v_ServiceComponentId = cf.v_ServiceComponentId;
				//        q.d_UpdateDate = DateTime.Now;
				//        q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				//        // Guardar los cambios
				//        //dbContext.SaveChanges();

				//        #endregion

				//        foreach (var fv in cf.ServiceComponentFieldValues)
				//        {
				//            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

				//            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
				//            {
				//                grupoFactorSanguineo.Add(fv.v_Value1);
				//            }

				//            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
				//            {
				//                grupoFactorSanguineo.Add(fv.v_Value1);
				//            }

				//            #endregion

				//            #region ACTUALIZAR VALORES DE UN SERVICE COMPONENT FIELD VALUES

				//            var q1 = (from a in dbContext.servicecomponentfieldvalues
				//                      where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
				//                      select a).FirstOrDefault();

				//            //q1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
				//            q1.v_Value1 = fv.v_Value1;
				//            q1.d_UpdateDate = DateTime.Now;
				//            q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				//            dbContext.SaveChanges();

				//            #endregion
				//        }
				//    }
				//}

				//if (grupoFactorSanguineo.Count != 0)
				//{
				//    #region GRABAR GRUPO y FACTOR SANGUINEO

				//    var person = (from a in dbContext.person
				//                  where a.v_PersonId == pstrPersonId
				//                  select a).FirstOrDefault();

				//    person.i_BloodGroupId = int.Parse(grupoFactorSanguineo[0]);
				//    person.i_BloodFactorId = int.Parse(grupoFactorSanguineo[1]);
				//    person.d_UpdateDate = DateTime.Now;
				//    person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
				//    //dbContext.SaveChanges();

				//    #endregion
				//}
				#endregion


				result = (dbContext.SaveChanges() > 0);

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Ok, null);

			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);

			}

			return result;
		}

		public bool AddServiceComponentValues(ref OperationResult pobjOperationResult, List<ServiceComponentFieldsList> pobjServicecomponentfields, List<string> ClientSession, string pstrPersonId, string pServiceComponentId)
		{

			bool result = false;

			string NewId = "(No generado)";
			try
			{


				using (var ts = new TransactionScope())
				{

					SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

					int intNodeId = int.Parse(ClientSession[0]);
				   GrupoFactorSanguineo grupoFactorSanguineo = new GrupoFactorSanguineo();

					var serviceComponentfields = (from a in dbContext.servicecomponentfields
												  where a.v_ServiceComponentId == pServiceComponentId
												  select a).ToList();

					//var ENT = serviceComponentfields.SelectMany(P => P.servicecomponentfieldvalues.Where(p => p.v_ServiceComponentFieldsId == "N009-CF000517532")).ToList();

					serviceComponentfields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));

					foreach (var cf in pobjServicecomponentfields)
					{
						var q = serviceComponentfields.Find(p => p.v_ComponentFieldId == cf.v_ComponentFieldsId);

						if (q == null)   // ADD
						{
							#region GRABAR CAMPOS DE UN SERVICE COMPONENT

							servicecomponentfields objEntity = new servicecomponentfields();

							objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
							objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
							objEntity.d_InsertDate = DateTime.Now;
							objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objEntity.i_IsDeleted = 0;

							// Autogeneramos el Pk de la tabla               
							NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
							objEntity.v_ServiceComponentFieldsId = NewId;

							dbContext.AddToservicecomponentfields(objEntity);
							//dbContext.SaveChanges();

							#endregion

							foreach (var fv in cf.ServiceComponentFieldValues)
							{
								#region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

								if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
								{
									grupoFactorSanguineo.Grupo =  fv.v_Value1;
								}

								if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
								{
									grupoFactorSanguineo.Factor = fv.v_Value1;
								}

								#endregion

								#region GRABAR VALORES DE UN SERVICE COMPONENT

								servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

								objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
								objEntity1.v_Value1 = fv.v_Value1;
								objEntity1.d_InsertDate = DateTime.Now;
								objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
								objEntity1.i_IsDeleted = 0;

								// Autogeneramos el Pk de la tabla               
								var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
								objEntity1.v_ServiceComponentFieldValuesId = NewId1;
								objEntity1.v_ServiceComponentFieldsId = NewId;

								dbContext.AddToservicecomponentfieldvalues(objEntity1);


								#endregion
							}
						}
						else         // UPDATE
						{
							#region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

							//q.v_ComponentFieldId = cf.v_ComponentFieldsId;
							//q.v_ServiceComponentId = cf.v_ServiceComponentId;
							q.d_UpdateDate = DateTime.Now;
							q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

							// Guardar los cambios
							//dbContext.SaveChanges();

							#endregion

							foreach (var fv in cf.ServiceComponentFieldValues)
							{
								#region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

								if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
								{
									grupoFactorSanguineo.Grupo = fv.v_Value1;
								}

								if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
								{
									grupoFactorSanguineo.Factor = fv.v_Value1;
								}

								#endregion

								#region ACTUALIZAR VALORES DE UN SERVICE COMPONENT

								var q1 = (from a in dbContext.servicecomponentfieldvalues
										  where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
										  select a).FirstOrDefault();

								// problema k pasaba con examen fisico se grababa el campo pero no el valor si el valor no esta grabado
								// se graba a la prepo
								if (q1 == null)
								{
									servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

									objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
									objEntity1.v_Value1 = fv.v_Value1;
									objEntity1.d_InsertDate = DateTime.Now;
									objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
									objEntity1.i_IsDeleted = 0;

									// Autogeneramos el Pk de la tabla               
									var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
									objEntity1.v_ServiceComponentFieldValuesId = NewId1;
									objEntity1.v_ServiceComponentFieldsId = q.v_ServiceComponentFieldsId;

									dbContext.AddToservicecomponentfieldvalues(objEntity1);
								}
								else
								{
									//if (q.v_ServiceComponentFieldsId == "N009-CF000517532")
									//{
									//    var ff = cf.v_Value1;
									//}

									//q1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
									q1.v_Value1 = fv.v_Value1;
									q1.d_UpdateDate = DateTime.Now;
									q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);
								}

								#endregion
							}
						}
					}

					if (grupoFactorSanguineo != null)
					{
						#region GRABAR GRUPO y FACTOR SANGUINEO

						var person = (from a in dbContext.person
									  where a.v_PersonId == pstrPersonId
									  select a).FirstOrDefault();

						person.i_BloodGroupId = grupoFactorSanguineo.Grupo == null?  person.i_BloodGroupId :int.Parse(grupoFactorSanguineo.Grupo) ;
						person.i_BloodFactorId = grupoFactorSanguineo.Factor == null? person.i_BloodFactorId : int.Parse(grupoFactorSanguineo.Factor);
						person.d_UpdateDate = DateTime.Now;
						person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
						//dbContext.SaveChanges();

						#endregion
					}

					//var aaaa = pobjServicecomponentfields.SelectMany(p => p.ServiceComponentFieldValues).ToList();
					//var search = aaaa.FindAll(p => p.v_Value1 != "1" && p.v_Value1 != "-1");

					//pobjServicecomponentfields.Select(p => p.ServiceComponentFieldValues).ToList() = null;
					//foreach (var item in pobjServicecomponentfields)
					//{
					//    item.ServiceComponentFieldValues = search;
					//}

					//pobjServicecomponentfields.SelectMany(p => p.ServiceComponentFieldValues);

					//foreach (var cf in pobjServicecomponentfields)
					//{
					//    var q = (from a in dbContext.servicecomponentfields
					//             where a.v_ComponentFieldId == cf.v_ComponentFieldsId &&
					//             a.v_ServiceComponentId == cf.v_ServiceComponentId
					//             select a).FirstOrDefault();

					//    if (q == null)   // ADD
					//    {
					//        #region GRABAR CAMPOS DE UN SERVICE COMPONENT

					//        servicecomponentfields objEntity = new servicecomponentfields();

					//        objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
					//        objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
					//        objEntity.d_InsertDate = DateTime.Now;
					//        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
					//        objEntity.i_IsDeleted = 0;

					//        // Autogeneramos el Pk de la tabla               
					//        NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
					//        objEntity.v_ServiceComponentFieldsId = NewId;

					//        dbContext.AddToservicecomponentfields(objEntity);
					//        //dbContext.SaveChanges();

					//        #endregion

					//        foreach (var fv in cf.ServiceComponentFieldValues)
					//        {
					//            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

					//            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
					//            {
					//                grupoFactorSanguineo.Add(fv.v_Value1);
					//            }

					//            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
					//            {
					//                grupoFactorSanguineo.Add(fv.v_Value1);
					//            }

					//            #endregion

					//            #region GRABAR VALORES DE UN SERVICE COMPONENT

					//            servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

					//            objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
					//            objEntity1.v_Value1 = fv.v_Value1;
					//            objEntity1.d_InsertDate = DateTime.Now;
					//            objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
					//            objEntity1.i_IsDeleted = 0;

					//            // Autogeneramos el Pk de la tabla               
					//            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
					//            objEntity1.v_ServiceComponentFieldValuesId = NewId1;
					//            objEntity1.v_ServiceComponentFieldsId = NewId;

					//            dbContext.AddToservicecomponentfieldvalues(objEntity1);
					//            //dbContext.SaveChanges();

					//            #endregion
					//        }
					//    }
					//    else         // UPDATE
					//    {
					//        #region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

					//        //q.v_ComponentFieldId = cf.v_ComponentFieldsId;
					//        //q.v_ServiceComponentId = cf.v_ServiceComponentId;
					//        q.d_UpdateDate = DateTime.Now;
					//        q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

					//        // Guardar los cambios
					//        //dbContext.SaveChanges();

					//        #endregion

					//        foreach (var fv in cf.ServiceComponentFieldValues)
					//        {
					//            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

					//            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
					//            {
					//                grupoFactorSanguineo.Add(fv.v_Value1);
					//            }

					//            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
					//            {
					//                grupoFactorSanguineo.Add(fv.v_Value1);
					//            }

					//            #endregion

					//            #region ACTUALIZAR VALORES DE UN SERVICE COMPONENT FIELD VALUES

					//            var q1 = (from a in dbContext.servicecomponentfieldvalues
					//                      where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
					//                      select a).FirstOrDefault();

					//            //q1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
					//            q1.v_Value1 = fv.v_Value1;
					//            q1.d_UpdateDate = DateTime.Now;
					//            q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);

					//            dbContext.SaveChanges();

					//            #endregion
					//        }
					//    }
					//}

					//if (grupoFactorSanguineo.Count != 0)
					//{
					//    #region GRABAR GRUPO y FACTOR SANGUINEO

					//    var person = (from a in dbContext.person
					//                  where a.v_PersonId == pstrPersonId
					//                  select a).FirstOrDefault();

					//    person.i_BloodGroupId = int.Parse(grupoFactorSanguineo[0]);
					//    person.i_BloodFactorId = int.Parse(grupoFactorSanguineo[1]);
					//    person.d_UpdateDate = DateTime.Now;
					//    person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
					//    //dbContext.SaveChanges();

					//    #endregion
					//}

					result = (dbContext.SaveChanges() > 0);

					pobjOperationResult.Success = 1;
					// Llenar entidad Log
					LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Ok, null);

					ts.Complete();
				}
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);

			}

			return result;
		}

		public List<DiagnosticRepositoryList> GetDiagnosticoSugeridoSistema(ref OperationResult pobjOperationResult, string pstrComponentFieldsId, string pstrAnalyzingValue)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<DiagnosticRepositoryList> query = (from ccc in dbContext.componentfieldvalues
														//join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId

														join ddd in dbContext.diseases on ccc.v_Diseases equals ddd.v_DiseasesId into J6_join  // Diagnosticos
														from ddd in J6_join.DefaultIfEmpty()

														join eee in dbContext.systemparameter on new { a = (int)AutoManual.Automático, b = 136 } // Auto / Manual
																								equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

														join fff in dbContext.systemparameter on new { a = (int)PreQualification.SinPreCalificar, b = 137 } // PRE-CALIFICACION
																							equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
														from fff in J5_join.DefaultIfEmpty()

														join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
																		equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
														from J1 in J1_join.DefaultIfEmpty()

														join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
																						equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
														from J2 in J2_join.DefaultIfEmpty()

														where ccc.v_ComponentFieldId == pstrComponentFieldsId &&
															  ccc.i_IsDeleted == 0
														select new DiagnosticRepositoryList
														{
															//v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
															//v_ServiceId = ccc.v_ServiceId,
															//v_ComponentId = ccc.v_ComponentId,
															v_DiseasesId = ccc.v_Diseases,
															//i_AutoManualId = ccc.i_AutoManualId,
															//i_PreQualificationId = ccc.i_PreQualificationId,
															//i_FinalQualificationId = ccc.i_FinalQualificationId,
															//i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
															//i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
															//d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
															//i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

															v_ComponentFieldValuesId = ccc.v_ComponentFieldValuesId,
															v_ComponentFieldsId = ccc.v_ComponentFieldId,
															v_LegalStandard = ccc.v_LegalStandard,
															i_OperatorId = ccc.i_OperatorId,
															i_IsAnormal = ccc.i_IsAnormal,
															i_ValidationMonths = ccc.i_ValidationMonths,
															v_AnalyzingValue1 = ccc.v_AnalyzingValue1,
															v_AnalyzingValue2 = ccc.v_AnalyzingValue2,

															v_DiseasesName = ddd.v_Name,
															v_AutoManualName = eee.v_Value1,

															v_PreQualificationName = fff.v_Value1,

															i_RecordStatus = (int)RecordStatus.Grabado,
															i_RecordType = (int)RecordType.NoTemporal,

															v_CreationUser = J1.v_UserName,
															v_UpdateUser = J2.v_UserName,
															d_CreationDate = J1.d_InsertDate,
															d_UpdateDate = J2.d_UpdateDate,
															i_IsDeleted = ccc.i_IsDeleted.Value
														}).ToList();

				float? f = float.Parse(pstrAnalyzingValue);

				var q = (from a in query
						 //where (a.i_OperatorId == (int)Operator2Values.X_esMenorque_A) && (a.r_AnalyzingValue1 < f) &&
						 //       (a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A) && (a.r_AnalyzingValue1 >= f)
						 //where a.v_ComponentFieldsId == "Just perfect"
						 select new DiagnosticRepositoryList
						 {
							 //v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 //v_ServiceId = a.v_ServiceId,
							 //v_ComponentId = a.v_ComponentId,
							 //v_DiseasesId = a.v_DiseasesId,
							 //i_AutoManualId = a.i_AutoManualId,
							 //i_PreQualificationId = a.i_PreQualificationId,
							 //i_FinalQualificationId = a.i_FinalQualificationId,
							 //i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 //i_IsSentToAntecedent = a.i_IsSentToAntecedent,
							 //d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							 //i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

							 //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 //v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 v_ComponentFieldValuesId = a.i_OperatorId == (int)Operator2Values.X_esIgualque_A ? "Toasted" :
														a.i_OperatorId == (int)Operator2Values.X_noesIgualque_A ? "I like it" :
														a.i_OperatorId == (int)Operator2Values.X_esMenorque_A ? "Just perfect" :  // X < 18.5 (bajo peso)
														a.i_OperatorId == (int)Operator2Values.X_esMenorIgualque_A ? "Gonna freeze my" :
														a.i_OperatorId == (int)Operator2Values.X_esMayorque_A ? "Gonna freeze my" :
														a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A ? "Gonna freeze my" :  // X >= 40.0
														a.i_OperatorId == (int)Operator2Values.X_esMayorque_A_yMenorque_B ? "Gonna freeze my" :
														a.i_OperatorId == (int)Operator2Values.X_esMayorque_A_yMenorIgualque_B ? "Gonna freeze my" :
														a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A_yMenorque_B ? "Gonna freeze my" :
														a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A_yMenorIgualque_B ? "Gonna freeze my" : "",

							 i_OperatorId = a.i_OperatorId,
							 i_IsAnormal = a.i_IsAnormal,
							 i_ValidationMonths = a.i_ValidationMonths,
							 v_AnalyzingValue1 = a.v_AnalyzingValue1,
							 v_AnalyzingValue2 = a.v_AnalyzingValue2,
							 v_DiseasesName = a.v_DiseasesName,
							 v_AutoManualName = a.v_AutoManualName,

							 v_PreQualificationName = a.v_PreQualificationName,
							 //v_FinalQualificationName = a.v_FinalQualificationName,
							 //v_DiagnosticTypeName = a.v_DiagnosticTypeName,
							 //v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
							 i_RecordStatus = a.i_RecordStatus,
							 i_RecordType = a.i_RecordType,

							 v_CreationUser = a.v_CreationUser,
							 v_UpdateUser = a.v_UpdateUser,
							 d_CreationDate = a.d_CreationDate,
							 d_UpdateDate = a.d_UpdateDate,
							 i_IsDeleted = a.i_IsDeleted

						 }).ToList();

				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return q;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}


		#endregion

		#region Plan Trabajo

		#region Medicacion

		public List<MedicationList> GetServiceMedicationsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<MedicationList> query = (from ddd in dbContext.medication
											  //join fff in dbContext.product on ddd.v_ProductId equals fff.v_ProductId
											  join eee in dbContext.systemparameter on new { a = ddd.i_ViaId.Value, b = 142 } // VIAS [ORAL,INTRAMUSCULAR,ETC]
																					  equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

											  join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
															  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
											  from J1 in J1_join.DefaultIfEmpty()

											  join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
																			  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
											  from J2 in J2_join.DefaultIfEmpty()

											  where ddd.v_ServiceId == pstrServiceId &&
													ddd.i_IsDeleted == 0
											  select new MedicationList
											  {
												  v_MedicationId = ddd.v_MedicationId,
												  v_ProductId = ddd.v_ProductId,
												  v_ServiceId = ddd.v_ServiceId,
												  v_ProductName = ddd.v_ProductName,
												  v_PresentationName = ddd.v_PresentationName,
												  r_Quantity = ddd.r_Quantity,
												  v_Doses = ddd.v_Doses,
												  i_ViaId = ddd.i_ViaId,
												  v_ViaName = eee.v_Value1,
												  i_RecordStatus = (int)RecordStatus.Grabado,
												  i_RecordType = (int)RecordType.NoTemporal,
												  v_CreationUser = J1.v_UserName,
												  v_UpdateUser = J2.v_UserName,
												  d_CreationDate = J1.d_InsertDate,
												  d_UpdateDate = J2.d_UpdateDate,
												  i_IsDeleted = ddd.i_IsDeleted.Value
											  }).ToList();



				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		#endregion

		#region Procedimientos

		public List<ProcedureByServiceList> GetServiceProceduresForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<ProcedureByServiceList> query = (from ddd in dbContext.procedurebyservice
													  join eee in dbContext.datahierarchy on new { a = ddd.i_ProcedureId.Value, b = 111 } // PROCEDIMIENTOS [INYECTABLES,LAVADO OCULAR,ETC]
																							  equals new { a = eee.i_ItemId, b = eee.i_GroupId }

													  join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
																	  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
													  from J1 in J1_join.DefaultIfEmpty()

													  join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
																					  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
													  from J2 in J2_join.DefaultIfEmpty()

													  where ddd.v_ServiceId == pstrServiceId &&
															ddd.i_IsDeleted == 0
													  select new ProcedureByServiceList
													  {
														  v_ProcedureByServiceId = ddd.v_ProcedureByServiceId,
														  v_ServiceId = ddd.v_ServiceId,
														  i_ProcedureId = ddd.i_ProcedureId,
														  v_ProcedureName = eee.v_Value1,
														  i_RecordStatus = (int)RecordStatus.Grabado,
														  i_RecordType = (int)RecordType.NoTemporal,
														  v_CreationUser = J1.v_UserName,
														  v_UpdateUser = J2.v_UserName,
														  d_CreationDate = J1.d_InsertDate,
														  d_UpdateDate = J2.d_UpdateDate,
														  i_IsDeleted = ddd.i_IsDeleted.Value
													  }).ToList();



				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		#endregion

		#region Restricciones

		public List<RestrictionList> GetServiceRestrictionsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<RestrictionList> query = (from ddd in dbContext.restriction  // RESTRICCIONES 
											   join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
																				 equals fff.v_DiagnosticRepositoryId into J7_join
											   from fff in J7_join.DefaultIfEmpty()

											   join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

											   join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
															   equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
											   from J1 in J1_join.DefaultIfEmpty()

											   join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
																			   equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
											   from J2 in J2_join.DefaultIfEmpty()
											   where (ddd.v_ServiceId == pstrServiceId) &&
											   (ddd.i_IsDeleted == 0) &&
											   (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
											   fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

											   select new RestrictionList
											   {
												   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
												   v_RestrictionByDiagnosticId = ddd.v_RestrictionId,
												   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
												   v_RestrictionName = eee.v_Name,
												   v_ComponentId = ddd.v_ComponentId,
												   i_RecordStatus = (int)RecordStatus.Grabado,
												   i_RecordType = (int)RecordType.NoTemporal,
												   d_StartDateRestriction = ddd.d_StartDateRestriction,
												   d_EndDateRestriction = ddd.d_EndDateRestriction

											   }).Concat(from r in dbContext.restriction
														 join eee in dbContext.masterrecommendationrestricction on r.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
														 where (r.v_ServiceId == pstrServiceId) &&
														 (r.i_IsDeleted == 0) &&
														 (r.v_DiagnosticRepositoryId == null)
														 select new RestrictionList
														 {
															 v_DiagnosticRepositoryId = r.v_DiagnosticRepositoryId,
															 v_RestrictionByDiagnosticId = r.v_RestrictionId,
															 v_MasterRestrictionId = r.v_MasterRestrictionId,
															 v_RestrictionName = eee.v_Name,
															 v_ComponentId = r.v_ComponentId,
															 i_RecordStatus = (int)RecordStatus.Grabado,
															 i_RecordType = (int)RecordType.NoTemporal,
															 d_StartDateRestriction = r.d_StartDateRestriction,
															 d_EndDateRestriction = r.d_EndDateRestriction

														 }).ToList();

				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<RestrictionList> GetServiceRestrictionsByDiagnosticRepositoryId(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<RestrictionList> query = (from ddd in dbContext.restriction  // RESTRICCIONES 
											   join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId // RESTRICIONES

											   join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
															   equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
											   from J1 in J1_join.DefaultIfEmpty()

											   join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
																			   equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
											   from J2 in J2_join.DefaultIfEmpty()

											   where ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
													 ddd.i_IsDeleted == 0
											   select new RestrictionList
											   {
												   //v_RestrictionByDiagnosticId = ddd.v_RestrictionByDiagnosticId,
												   v_RestrictionByDiagnosticId = ddd.v_RestrictionId,
												   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
												   v_ServiceId = ddd.v_ServiceId,
												   v_ComponentId = ddd.v_ComponentId,
												   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
												   v_RestrictionName = eee.v_Name,
												   i_RecordStatus = (int)RecordStatus.Grabado,
												   i_RecordType = (int)RecordType.NoTemporal,
												   v_CreationUser = J1.v_UserName,
												   v_UpdateUser = J2.v_UserName,
												   d_CreationDate = J1.d_InsertDate,
												   d_UpdateDate = J2.d_UpdateDate,
												   i_IsDeleted = ddd.i_IsDeleted.Value
											   }).ToList();

				//var q = new List<RestrictionList>();
				//q = query.Select((a, index) => new RestrictionList
				//         {
				//             i_Item = index + 1,
				//             v_RestrictionByDiagnosticId = a.v_RestrictionByDiagnosticId,
				//             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
				//             v_ServiceId = a.v_ServiceId,
				//             v_ComponentId = a.v_ComponentId,
				//             v_MasterRestrictionId = a.v_MasterRestrictionId,
				//             v_RestrictionName = a.v_RestrictionName,
				//             i_RecordStatus = a.i_RecordStatus,
				//             i_RecordType = a.i_RecordType,
				//             v_CreationUser = a.v_CreationUser,
				//             v_UpdateUser = a.v_UpdateUser,
				//             d_CreationDate = a.d_CreationDate,
				//             d_UpdateDate = a.d_UpdateDate,
				//             i_IsDeleted = a.i_IsDeleted
				//         }).ToList();

				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}


		#endregion

		#region Recomendaciones

		public List<RecomendationList> GetServiceRecommendationByDiagnosticRepositoryId(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<RecomendationList> query = (from ddd in dbContext.recommendation
												 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                  

												 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
																 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
												 from J1 in J1_join.DefaultIfEmpty()

												 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
																				 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
												 from J2 in J2_join.DefaultIfEmpty()

												 where ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
													   ddd.i_IsDeleted == 0
												 select new RecomendationList
												 {
													 v_RecommendationId = ddd.v_RecommendationId,
													 v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
													 v_ServiceId = ddd.v_ServiceId,
													 v_ComponentId = ddd.v_ComponentId,
													 v_MasterRecommendationId = ddd.v_MasterRecommendationId,
													 v_RecommendationName = eee.v_Name,
													 i_RecordStatus = (int)RecordStatus.Grabado,
													 i_RecordType = (int)RecordType.NoTemporal,
													 v_CreationUser = J1.v_UserName,
													 v_UpdateUser = J2.v_UserName,
													 d_CreationDate = J1.d_InsertDate,
													 d_UpdateDate = J2.d_UpdateDate,
													 i_IsDeleted = ddd.i_IsDeleted.Value
												 }).ToList();



				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<RecomendationList> GetServiceRecommendationByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				//List<RecomendationList> query = (from ddd in dbContext.recommendation
				//                                 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
				//                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
				//                                 from fff in J7_join.DefaultIfEmpty()

				//                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

				//                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
				//                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
				//                                 from J1 in J1_join.DefaultIfEmpty()

				//                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
				//                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
				//                                 from J2 in J2_join.DefaultIfEmpty()
				//                                 where (ddd.v_ServiceId == pstrServiceId) &&
				//                                       (ddd.i_IsDeleted == 0) &&
				//                                       (fff.i_IsDeleted == 0) &&
				//                                       (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
				//                                        fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
				//                                 select new RecomendationList
				//                                 {
				//                                     v_RecommendationId = ddd.v_RecommendationId,
				//                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
				//                                     v_ServiceId = ddd.v_ServiceId,
				//                                     v_ComponentId = ddd.v_ComponentId,
				//                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
				//                                     v_RecommendationName = eee.v_Name,
				//                                     i_RecordStatus = (int)RecordStatus.Grabado,
				//                                     i_RecordType = (int)RecordType.NoTemporal
				//                                     //v_CreationUser = J1.v_UserName,
				//                                     //v_UpdateUser = J2.v_UserName,
				//                                     //d_CreationDate = J1.d_InsertDate,
				//                                     //d_UpdateDate = J2.d_UpdateDate,
				//                                     //i_IsDeleted = ddd.i_IsDeleted.Value
				//                                 }).Concat(from r in dbContext.recommendation
				//                                           join eee in dbContext.masterrecommendationrestricction on r.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         
				//                                           where (r.v_ServiceId == pstrServiceId) &&
				//                                           (r.i_IsDeleted == 0) &&
				//                                           (r.v_DiagnosticRepositoryId == null)
				//                                           select new RecomendationList
				//                                           {
				//                                               v_RecommendationId = r.v_RecommendationId,
				//                                               v_DiagnosticRepositoryId = r.v_DiagnosticRepositoryId,
				//                                               v_ServiceId = r.v_ServiceId,
				//                                               v_ComponentId = r.v_ComponentId,
				//                                               v_MasterRecommendationId = r.v_MasterRecommendationId,
				//                                               v_RecommendationName = eee.v_Name,
				//                                               i_RecordStatus = (int)RecordStatus.Grabado,
				//                                               i_RecordType = (int)RecordType.NoTemporal
				//                                               //v_CreationUser = J1.v_UserName,
				//                                               //v_UpdateUser = J2.v_UserName,
				//                                               //d_CreationDate = J1.d_InsertDate,
				//                                               //d_UpdateDate = J2.d_UpdateDate,
				//                                               //i_IsDeleted = ddd.i_IsDeleted.Value
				//                                           }).ToList();

				var query = (from ddd in dbContext.recommendation
							 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
															 equals fff.v_DiagnosticRepositoryId into J7_join
							 from fff in J7_join.DefaultIfEmpty()

							 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

							 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
											 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 where (ddd.v_ServiceId == pstrServiceId) &&
								   (ddd.i_IsDeleted == 0) &&
								   (fff.i_IsDeleted == 0) &&
								   (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
									fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

							 select new RecomendationList
							 {
								 v_RecommendationId = ddd.v_RecommendationId,
								 v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
								 v_ServiceId = ddd.v_ServiceId,
								 v_ComponentId = ddd.v_ComponentId,
								 v_MasterRecommendationId = ddd.v_MasterRecommendationId,
								 v_RecommendationName = eee.v_Name,
								 i_RecordStatus = (int)RecordStatus.Grabado,
								 i_RecordType = (int)RecordType.NoTemporal

							 }).ToList();


				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<RecomendationList> GetServiceRecommendationByServiceId(string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<RecomendationList> query = (from ddd in dbContext.recommendation
												 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
																				 equals fff.v_DiagnosticRepositoryId into J7_join
												 from fff in J7_join.DefaultIfEmpty()

												 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

												 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
																 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
												 from J1 in J1_join.DefaultIfEmpty()

												 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
																				 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
												 from J2 in J2_join.DefaultIfEmpty()
												 where (ddd.v_ServiceId == pstrServiceId) &&
												 (ddd.i_IsDeleted == 0) && (fff.i_IsDeleted == 0) &&
												 (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
												 fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
												 select new RecomendationList
												 {
													 v_RecommendationId = ddd.v_RecommendationId,
													 v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
													 v_ServiceId = ddd.v_ServiceId,
													 v_ComponentId = ddd.v_ComponentId,
													 v_MasterRecommendationId = ddd.v_MasterRecommendationId,
													 v_RecommendationName = eee.v_Name,
													 i_RecordStatus = (int)RecordStatus.Grabado,
													 i_RecordType = (int)RecordType.NoTemporal,
													 i_IsDeleted = ddd.i_IsDeleted
												 }).ToList();


				var objData = query.AsEnumerable()
					   .GroupBy(x => x.v_RecommendationId)
					   .Select(group => group.First());

				var query1 = new List<RecomendationList>();

				query1 = objData.Select((x, index) => new RecomendationList
				{
					i_Item = index + 1,
					v_RecommendationId = x.v_RecommendationId,
					v_DiagnosticRepositoryId = x.v_DiagnosticRepositoryId,
					v_ServiceId = x.v_ServiceId,
					v_ComponentId = x.v_ComponentId,
					v_MasterRecommendationId = x.v_MasterRecommendationId,
					v_RecommendationName = x.v_RecommendationName,
					i_RecordStatus = x.i_RecordStatus,
					i_RecordType = x.i_RecordType
				}).ToList();





				return query1;
			}
			catch (Exception ex)
			{
				return null;
			}
		}


		#endregion

		#region Examenes Auxiliares

		public List<AuxiliaryExamList> GetAuxiliaryExams(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from ddd in dbContext.auxiliaryexam
							 join fff in dbContext.component on ddd.v_ComponentId equals fff.v_ComponentId
							 join eee in dbContext.systemparameter on new { a = fff.i_CategoryId.Value, b = 116 } // caetgoria Exam
													 equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 where (ddd.v_ServiceId == pstrServiceId) &&
								   (ddd.i_IsDeleted == 0)
							 select new AuxiliaryExamList
							 {
								 v_AuxiliaryExamId = ddd.v_AuxiliaryExamId,
								 v_ComponentName = fff.v_Name,
								 v_CategoryName = J1.v_Value1,
								 i_RecordStatus = (int)RecordStatus.Grabado,
								 i_RecordType = (int)RecordType.NoTemporal,
								 i_IsDeleted = ddd.i_IsDeleted.Value,
								 v_ComponentId = fff.v_ComponentId
							 }).ToList();

				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		#endregion

		#region Interconsulta

		public List<DiagnosticRepositoryList> GetInterconsultations(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from ccc in dbContext.diagnosticrepository
							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                                  
							 join fff in dbContext.component on ccc.v_InterconsultationDestinationId equals fff.v_ComponentId
							 where (ccc.v_ServiceId == pstrServiceId) &&
									 (ccc.i_IsDeleted == 0) &&
									 (ccc.i_SendToInterconsultationId == (int)SiNo.SI)
							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 v_DiseasesName = ddd.v_Name,
								 v_OfficeName = fff.v_Name,
								 i_RecordStatus = (int)RecordStatus.Grabado,
								 i_RecordType = (int)RecordType.NoTemporal,
							 }).ToList();


				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		#endregion

		#region Descanso Medico

		public List<DiagnosticRepositoryList> GetMedicalBreaks(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from ccc in dbContext.diagnosticrepository
							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                 
							 where (ccc.v_ServiceId == pstrServiceId) &&
								   (ccc.i_IsDeleted == 0) &&
								   (ccc.i_GenerateMedicalBreak == (int)SiNo.SI)
							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 v_DiseasesName = ddd.v_Name,
								 i_RecordStatus = (int)RecordStatus.Grabado,
								 i_RecordType = (int)RecordType.NoTemporal,
							 }).ToList();

				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		#endregion

		#endregion

		#region Analisis de diagnostico -> Total de diagnosticos

		public List<DiagnosticRepositoryList> GetServiceComponentDisgnosticsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
		{

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from ccc in dbContext.diagnosticrepository

							 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
							 from bbb in J7_join.DefaultIfEmpty()

							 join sc in dbContext.servicecomponent on new { a = ccc.v_ComponentId, b = pstrServiceId }
																	equals new { a = sc.v_ComponentId, b = sc.v_ServiceId } into sc_join
							 from sc in sc_join.DefaultIfEmpty()

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

							 join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
																	 equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
							 from eee in J8_join.DefaultIfEmpty()

							 join zzz in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
																 equals new { a = zzz.i_ParameterId, b = zzz.i_GroupId } into J9_join
							 from zzz in J9_join.DefaultIfEmpty()

							 join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
							 from fff in J5_join.DefaultIfEmpty()

							 join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
							 from ggg in J4_join.DefaultIfEmpty()

							 join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																	 equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
							 from hhh in J3_join.DefaultIfEmpty()

							 join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
																 equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
							 from iii in J6_join.DefaultIfEmpty()

							 //join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
							 //                equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 //from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = sc.i_ApprovedUpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 where ccc.v_ServiceId == pstrServiceId &&
									 ccc.i_IsDeleted == 0
							 orderby bbb.v_Name

							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_ComponentId = ccc.v_ComponentId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 i_AutoManualId = ccc.i_AutoManualId,
								 i_PreQualificationId = ccc.i_PreQualificationId,
								 i_FinalQualificationId = ccc.i_FinalQualificationId,
								 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
								 i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
								 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
								 i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

								 v_DiseasesName = ddd.v_Name,
								 v_AutoManualName = eee.v_Value1,

								 //v_ComponentName = bbb.v_Name,
								 //v_ComponentName = (ccc.i_AutoManualId == (int)AutoManual.Manual && bbb.i_CategoryId != -1) ? zzz.v_Value1 : bbb.v_Name,
								 v_ComponentName = bbb.i_CategoryId == -1 ? bbb.v_Name : zzz.v_Value1,
								 v_PreQualificationName = fff.v_Value1,
								 v_FinalQualificationName = ggg.v_Value1,
								 v_DiagnosticTypeName = hhh.v_Value1,
								 v_IsSentToAntecedentName = iii.v_Value1,
								 i_RecordStatus = (int)RecordStatus.Grabado,
								 i_RecordType = (int)RecordType.NoTemporal,

								 v_UpdateUser = J2.v_UserName,

								 d_UpdateDate = J2.d_UpdateDate,
								 i_IsDeleted = ccc.i_IsDeleted.Value

							 }).ToList();


				var q = (from a in query
						 select new DiagnosticRepositoryList
						 {
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_ServiceId = a.v_ServiceId,
							 v_ComponentId = a.v_ComponentId,
							 v_DiseasesId = a.v_DiseasesId,
							 i_AutoManualId = a.i_AutoManualId,
							 i_PreQualificationId = a.i_PreQualificationId,
							 i_FinalQualificationId = a.i_FinalQualificationId,
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 i_IsSentToAntecedent = a.i_IsSentToAntecedent,
							 d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							 i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

							 v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 v_DiseasesName = a.v_DiseasesName,
							 v_AutoManualName = a.v_AutoManualName,
							 v_ComponentName = a.v_ComponentName,

							 v_PreQualificationName = a.v_PreQualificationName,
							 v_FinalQualificationName = a.v_FinalQualificationName,
							 v_DiagnosticTypeName = a.v_DiagnosticTypeName,
							 v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
							 i_RecordStatus = a.i_RecordStatus,
							 i_RecordType = a.i_RecordType,

							 v_UpdateUser = a.v_UpdateUser,

							 d_UpdateDate = a.d_UpdateDate,
							 i_IsDeleted = a.i_IsDeleted

						 }).ToList();

				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return q;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public DiagnosticRepositoryList GetServiceComponentTotalDiagnostics(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				DiagnosticRepositoryList query = (from ccc in dbContext.diagnosticrepository
												  join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
												  from bbb in J7_join.DefaultIfEmpty()

												  join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

												  join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
																						  equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
												  from eee in J8_join.DefaultIfEmpty()

												  join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																					  equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
												  from fff in J5_join.DefaultIfEmpty()

												  join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																					  equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
												  from ggg in J4_join.DefaultIfEmpty()

												  join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																						  equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
												  from hhh in J3_join.DefaultIfEmpty()

												  join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
																					   equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
												  from iii in J6_join.DefaultIfEmpty()

												  join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
																  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
												  from J1 in J1_join.DefaultIfEmpty()

												  join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
																				  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
												  from J2 in J2_join.DefaultIfEmpty()

												  where ccc.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
														ccc.i_IsDeleted == 0
												  select new DiagnosticRepositoryList
												  {
													  v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
													  v_ServiceId = ccc.v_ServiceId,
													  v_ComponentId = ccc.v_ComponentId,
													  v_DiseasesId = ccc.v_DiseasesId,
													  i_AutoManualId = ccc.i_AutoManualId,
													  i_PreQualificationId = ccc.i_PreQualificationId,
													  i_FinalQualificationId = ccc.i_FinalQualificationId,
													  i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
													  i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
													  d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
													  i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

													  v_DiseasesName = ddd.v_Name,
													  v_AutoManualName = eee.v_Value1,

													  v_PreQualificationName = fff.v_Value1,
													  v_FinalQualificationName = ggg.v_Value1,
													  v_DiagnosticTypeName = hhh.v_Value1,
													  v_IsSentToAntecedentName = iii.v_Value1,
													  i_RecordStatus = (int)RecordStatus.Grabado,
													  i_RecordType = (int)RecordType.NoTemporal,

													  v_CreationUser = J1.v_UserName,
													  v_UpdateUser = J2.v_UserName,
													  d_CreationDate = J1.d_InsertDate,
													  d_UpdateDate = J2.d_UpdateDate,
													  i_IsDeleted = ccc.i_IsDeleted.Value
												  }).FirstOrDefault();



				// Agregamos Restricciones / Recomendaciones
				OperationResult objOperationResult = new OperationResult();

				query.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, query.v_DiagnosticRepositoryId);
				query.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, query.v_DiagnosticRepositoryId);

				pobjOperationResult.Success = 1;
				return query;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public void UpdateTotalDiagnostic(ref OperationResult pobjOperationResult, DiagnosticRepositoryList pobjDiagnosticRepository, string serviceId, List<string> ClientSession)
		{
			//mon.IsActive = true;
			string NewId0 = "(No generado)";
			int intNodeId = int.Parse(ClientSession[0]);

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				#region DiagnosticRepository -> UPDATE

				// UPDATE

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.diagnosticrepository
									   where a.v_DiagnosticRepositoryId == pobjDiagnosticRepository.v_DiagnosticRepositoryId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados   
				// Total Diagnósticos
				objEntitySource.i_FinalQualificationId = pobjDiagnosticRepository.i_FinalQualificationId;
				objEntitySource.i_DiagnosticTypeId = pobjDiagnosticRepository.i_DiagnosticTypeId;
				objEntitySource.i_IsSentToAntecedent = pobjDiagnosticRepository.i_IsSentToAntecedent;
				objEntitySource.d_ExpirationDateDiagnostic = pobjDiagnosticRepository.d_ExpirationDateDiagnostic;

				objEntitySource.d_UpdateDate = DateTime.Now;
				objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				// Guardar los cambios
				dbContext.SaveChanges();

				#region Setear Fec Vcto Obs con la menor de las fechas solo (DX definitivos o Presuntivos)

				// Buscar la fecha de expiracion Dx minima 
				DateTime? fechaObsMin = (from a in dbContext.diagnosticrepository
										 where a.v_ServiceId == pobjDiagnosticRepository.v_ServiceId &&
										 a.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
										 a.i_FinalQualificationId == (int)FinalQualification.Presuntivo
										 select a.d_ExpirationDateDiagnostic).Min();

				// Obtener la entidad fuente
				var objService = (from a in dbContext.service
								  where a.v_ServiceId == pobjDiagnosticRepository.v_ServiceId
								  select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados   
				objService.d_ObsExpirationDate = fechaObsMin;
				objService.d_UpdateDate = DateTime.Now;
				objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				// Guardar los cambios

				dbContext.SaveChanges();

				#endregion

				#endregion

				#region Restricciones -> ADD / DELETE

				if (pobjDiagnosticRepository.Restrictions != null)
				{
					// Operaciones básicas [Add,Update,Delete] restricciones 
					foreach (var r in pobjDiagnosticRepository.Restrictions)
					{
						if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							restriction objRestriction = new restriction();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
							objRestriction.v_ServiceId = r.v_ServiceId;
							objRestriction.v_ComponentId = r.v_ComponentId;
							//objRestriction.v_RestrictionByDiagnosticId = NewId1;
							objRestriction.v_RestrictionId = NewId1;
							objRestriction.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? pobjDiagnosticRepository.v_DiagnosticRepositoryId : NewId0;

							objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId;
							objRestriction.d_InsertDate = DateTime.Now;
							objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objRestriction.i_IsDeleted = 0;

							dbContext.AddTorestriction(objRestriction);
							dbContext.SaveChanges();
						}
						else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente v_RestrictionByDiagnosticId
							var objRestriction = (from a in dbContext.restriction
												  where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
												  select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objRestriction.d_UpdateDate = DateTime.Now;
							objRestriction.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objRestriction.i_IsDeleted = 1;

							// Guardar los cambios
							dbContext.SaveChanges();
						}
					}
				}

				#endregion

				#region Recomendaciones -> ADD / DELETE

				if (pobjDiagnosticRepository.Recomendations != null)
				{
					// Grabar recomendaciones 
					foreach (var r in pobjDiagnosticRepository.Recomendations)
					{
						if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							recommendation objRecommendation = new recommendation();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
							objRecommendation.v_ServiceId = r.v_ServiceId;
							objRecommendation.v_ComponentId = r.v_ComponentId;
							objRecommendation.v_RecommendationId = NewId1;
							objRecommendation.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? pobjDiagnosticRepository.v_DiagnosticRepositoryId : NewId0;

							objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;
							objRecommendation.d_InsertDate = DateTime.Now;
							objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objRecommendation.i_IsDeleted = 0;

							dbContext.AddTorecommendation(objRecommendation);
							dbContext.SaveChanges();
						}
						else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente
							var objRecommendation = (from a in dbContext.recommendation
													 where a.v_RecommendationId == r.v_RecommendationId
													 select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objRecommendation.d_UpdateDate = DateTime.Now;
							objRecommendation.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objRecommendation.i_IsDeleted = 1;

							// Guardar los cambios
							dbContext.SaveChanges();
						}
					}
				}

				#endregion


				#region Grabar usuario auditor

				// Grabar ID usuario auditor o cualquiera que grabe en esta zona [Control de calidad]
				// Obtener la entidad service               

				var service = (from a in dbContext.service
							   where a.v_ServiceId == serviceId
							   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados
				service.d_UpdateDateMedicalAnalyst = DateTime.Now;
				service.i_UpdateUserMedicalAnalystId = Int32.Parse(ClientSession[2]);

				// Guardar los cambios
				dbContext.SaveChanges();

				#endregion

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public void DeleteTotalDiagnostic(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId, List<string> ClientSession)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				#region DiagnosticRepository -> DELETE

				// UPDATE

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.diagnosticrepository
									   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados               
				objEntitySource.d_UpdateDate = DateTime.Now;
				objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
				objEntitySource.i_IsDeleted = 1;

				var recomendation = (from a in dbContext.recommendation
									 where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
									 select a).ToList();

				foreach (var rec in recomendation)
				{
					// Crear la entidad con los datos actualizados               
					rec.d_UpdateDate = DateTime.Now;
					rec.i_UpdateUserId = Int32.Parse(ClientSession[2]);
					rec.i_IsDeleted = 1;
				}

				var restriction = (from a in dbContext.restriction
								   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
								   select a).ToList();

				foreach (var res in restriction)
				{
					// Crear la entidad con los datos actualizados               
					res.d_UpdateDate = DateTime.Now;
					res.i_UpdateUserId = Int32.Parse(ClientSession[2]);
					res.i_IsDeleted = 1;
				}

				// Guardar los cambios
				dbContext.SaveChanges();

				#endregion

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ELIMINACION, "DIAGNOSTICOS", "v_DiagnosticRepositoryId=" + pstrDiagnosticRepositoryId, Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ELIMINACION, "DIAGNOSTICOS", "v_DiagnosticRepositoryId=" + pstrDiagnosticRepositoryId, Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}


		#endregion

		#region Conclusiones y Tratamiento

		public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository
														join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
														from bbb in J7_join.DefaultIfEmpty()

														join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

														join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
																								equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
														from eee in J8_join.DefaultIfEmpty()

														join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																							equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
														from fff in J5_join.DefaultIfEmpty()

														join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																							equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
														from ggg in J4_join.DefaultIfEmpty()

														join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																								equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
														from hhh in J3_join.DefaultIfEmpty()

														join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
																							equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
														from iii in J6_join.DefaultIfEmpty()

														join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
																		equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
														from J1 in J1_join.DefaultIfEmpty()

														join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
																						equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
														from J2 in J2_join.DefaultIfEmpty()

														join zzz in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
															   equals new { a = zzz.i_ParameterId, b = zzz.i_GroupId } into J9_join
														from zzz in J9_join.DefaultIfEmpty()

														where ccc.v_ServiceId == pstrServiceId &&
														ccc.i_IsDeleted == 0 &&
														(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
														ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
														orderby bbb.v_Name
														select new DiagnosticRepositoryList
														{
															v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
															v_ServiceId = ccc.v_ServiceId,
															v_ComponentId = ccc.v_ComponentId,
															v_DiseasesId = ccc.v_DiseasesId,
															i_AutoManualId = ccc.i_AutoManualId,
															i_PreQualificationId = ccc.i_PreQualificationId,
															i_FinalQualificationId = ccc.i_FinalQualificationId,
															i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
															i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
															d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
															i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

															v_DiseasesName = ddd.v_Name,
															v_AutoManualName = eee.v_Value1,

															v_ComponentName = bbb.i_CategoryId == -1 ? bbb.v_Name : zzz.v_Value1,
															v_PreQualificationName = fff.v_Value1,
															v_FinalQualificationName = ggg.v_Value1,
															v_DiagnosticTypeName = hhh.v_Value1,
															v_IsSentToAntecedentName = iii.v_Value1,
															i_RecordStatus = (int)RecordStatus.Grabado,
															i_RecordType = (int)RecordType.NoTemporal,

															v_CreationUser = J1.v_UserName,
															v_UpdateUser = J2.v_UserName,
															d_CreationDate = J1.d_InsertDate,
															d_UpdateDate = J2.d_UpdateDate,
															i_IsDeleted = ccc.i_IsDeleted.Value
														}).ToList();


				var q = (from a in query
						 select new DiagnosticRepositoryList
						 {
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_ServiceId = a.v_ServiceId,
							 v_ComponentId = a.v_ComponentId,
							 v_DiseasesId = a.v_DiseasesId,
							 i_AutoManualId = a.i_AutoManualId,
							 i_PreQualificationId = a.i_PreQualificationId,
							 i_FinalQualificationId = a.i_FinalQualificationId,
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 i_IsSentToAntecedent = a.i_IsSentToAntecedent,
							 d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							 i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

							 v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 v_DiseasesName = a.v_DiseasesName,
							 v_AutoManualName = a.v_AutoManualName,
							 v_ComponentName = a.v_ComponentName,

							 v_PreQualificationName = a.v_PreQualificationName,
							 v_FinalQualificationName = a.v_FinalQualificationName,
							 v_DiagnosticTypeName = a.v_DiagnosticTypeName,
							 v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
							 i_RecordStatus = a.i_RecordStatus,
							 i_RecordType = a.i_RecordType,

							 v_CreationUser = a.v_CreationUser,
							 v_UpdateUser = a.v_UpdateUser,
							 d_CreationDate = a.d_CreationDate,
							 d_UpdateDate = a.d_UpdateDate,
							 i_IsDeleted = a.i_IsDeleted

						 }).ToList();

				//List<DiagnosticRepositoryList> objData = query.ToList();
				pobjOperationResult.Success = 1;
				return q;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public void AddConclusiones(ref OperationResult pobjOperationResult, List<RestrictionList> pobjRestriction, List<RecomendationList> pobjRecomendation, serviceDto pobjService, servicecomponentDto pobjServiceComponent, List<string> ClientSession)
		{
			//mon.IsActive = true;
			string NewId0 = "(No generado)";
			int intNodeId = int.Parse(ClientSession[0]);

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				#region Restricciones -> ADD / DELETE

				if (pobjRestriction != null)
				{
					// Operaciones básicas [Add,Update,Delete] restricciones 
					foreach (var r in pobjRestriction)
					{
						if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							restriction objRestriction = new restriction();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
							//objRestriction.v_RestrictionByDiagnosticId = NewId1;
							objRestriction.v_RestrictionId = NewId1;
							objRestriction.v_ServiceId = r.v_ServiceId;
							objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId;

							objRestriction.d_InsertDate = DateTime.Now;
							objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objRestriction.i_IsDeleted = 0;

							dbContext.AddTorestriction(objRestriction);
							//dbContext.SaveChanges();
						}
						else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente v_RestrictionByDiagnosticId
							var objEntitySource = (from a in dbContext.restriction
												   where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_IsDeleted = 1;

							// Guardar los cambios
							//dbContext.SaveChanges();
						}
					}
				}

				#endregion

				#region Recomendaciones -> ADD / DELETE

				if (pobjRecomendation != null)
				{
					// Grabar recomendaciones 
					foreach (var r in pobjRecomendation)
					{
						if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							recommendation objRecommendation = new recommendation();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
							objRecommendation.v_RecommendationId = NewId1;
							objRecommendation.v_ServiceId = r.v_ServiceId;
							objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;

							objRecommendation.d_InsertDate = DateTime.Now;
							objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objRecommendation.i_IsDeleted = 0;

							dbContext.AddTorecommendation(objRecommendation);
							//dbContext.SaveChanges();
						}
						else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente
							var objEntitySource = (from a in dbContext.recommendation
												   where a.v_RecommendationId == r.v_RecommendationId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_IsDeleted = 1;

							// Guardar los cambios
							//dbContext.SaveChanges();
						}
					}
				}

				#endregion

				#region Service

				if (pobjService != null)
				{
					// Obtener la entidad fuente
					var objService = (from a in dbContext.service
									  where a.v_ServiceId == pobjService.v_ServiceId
									  select a).FirstOrDefault();

					// Crear la entidad con los datos actualizados
					objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
					objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
					objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
					objService.i_HasRestrictionId = pobjService.i_HasRestrictionId;
					objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
					objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;
					objService.d_StartDateRestriction = pobjService.d_StartDateRestriction;
					objService.d_EndDateRestriction = pobjService.d_EndDateRestriction;
					objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;
					objService.d_GlobalExpirationDate = pobjService.d_GlobalExpirationDate;
					// datos de cabecera del Servicio
					objService.i_AptitudeStatusId = pobjService.i_AptitudeStatusId;
					objService.v_ObsStatusService = pobjService.v_ObsStatusService;
					objService.i_IsNewControl = pobjService.i_IsNewControl;

					if (objService.i_AptitudeStatusId != (int)AptitudeStatus.SinAptitud)
					{
						// Cambiar el estado de la atención en función al estado de Aptitud
						objService.i_ServiceStatusId = (int)ServiceStatus.Culminado;
						objService.v_Motive = "Culminación Amutomática de la Atención por Aptitud definida.";
					}
					else
					{
						objService.i_ServiceStatusId = (int)ServiceStatus.EsperandoAptitud;
					}

					//hola
					if (Int32.Parse(ClientSession[12]) == (int)TipoProfesional.Auditor)
					{
						// ID usuario Médico ocupacional
						objService.d_UpdateDateOccupationalMedical = DateTime.Now;
						objService.i_UpdateUserOccupationalMedicaltId = Int32.Parse(ClientSession[2]);
					}


					// Guardar los cambios
					//dbContext.SaveChanges();
				}

				#endregion

				#region ServiceComponent -> UPDATE

				if (pobjServiceComponent != null)
				{
					// Actualizar algunos valores de ServiceComponent
					OperationResult objOperationResult = new OperationResult();
					UpdateServiceComponentFromEso(ref objOperationResult, pobjServiceComponent, ClientSession, null);
				}

				#endregion

				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}


		#endregion

		#region Tratamiento

		public void AddTratamiento(ref OperationResult pobjOperationResult, List<MedicationList> pobjMedication, List<ProcedureByServiceList> pobjProcedure, List<DiagnosticRepositoryList> pobjDiagnosticRepository, serviceDto pobjService, servicecomponentDto pobjServiceComponent, List<string> ClientSession, bool? enabledchkApproved)
		{
			//mon.IsActive = true;
			string NewId0 = "(No generado)";
			int intNodeId = int.Parse(ClientSession[0]);

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				OperationResult objOperationResult = new OperationResult();

				nodeDto node = new NodeBL().GetNodeByNodeId(ref objOperationResult, int.Parse(ClientSession[0]));
				var _pharmacyWarehouseId = node.v_PharmacyWarehouseId;
				var _movementdetailListDto = new List<movementdetailDto>();

				#region Medication -> ADD / UPDATE / DELETE

				foreach (var m in pobjMedication)
				{
					// ADD
					if (m.i_RecordType == (int)RecordType.Temporal && m.i_RecordStatus == (int)RecordStatus.Agregado)
					{
						medication objEntity = new medication();

						objEntity.v_ProductId = m.v_ProductId;
						objEntity.v_ServiceId = m.v_ServiceId;
						objEntity.r_Quantity = m.r_Quantity;
						objEntity.v_Doses = m.v_Doses;
						objEntity.i_ViaId = m.i_ViaId;
						objEntity.d_InsertDate = DateTime.Now;
						objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
						objEntity.i_IsDeleted = 0;

						// Autogeneramos el Pk de la tabla                      
						NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 33), "MC");
						objEntity.v_MedicationId = NewId0;

						dbContext.AddTomedication(objEntity);
						dbContext.SaveChanges();

						if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
						{
							#region CARGAR PRODUCTOS A DESCONTAR DEL ALMACÉN

							movementdetailDto mdDto = new movementdetailDto();
							mdDto.v_ProductId = m.v_ProductId;
							mdDto.r_Quantity = m.r_Quantity;
							mdDto.i_MovementTypeId = (int?)Common.MotiveType.EgresoAtencion;
							_movementdetailListDto.Add(mdDto);

							#endregion
						}

					}                                     // DELETE
					else if (m.i_RecordType == (int)RecordType.NoTemporal && m.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
					{
						// Obtener la entidad fuente
						var objEntitySource = (from a in dbContext.medication
											   where a.v_MedicationId == m.v_MedicationId
											   select a).FirstOrDefault();

						// Crear la entidad con los datos actualizados                                                           
						objEntitySource.d_UpdateDate = DateTime.Now;
						objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
						objEntitySource.i_IsDeleted = 1;

						// Guardar los cambios
						dbContext.SaveChanges();
					}
				}

				#region GRABAR MOVIMIENTOS [CABECERA Y DETALLE]

				if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
				{
					movementDto objmovementDto = new movementDto();

					objmovementDto.i_MotiveTypeId = (int?)Common.MotiveType.EgresoAtencion;
					objmovementDto.d_Date = DateTime.Now;
					objmovementDto.v_WarehouseId = _pharmacyWarehouseId;
					objmovementDto.v_ReferenceDocument = string.Empty;
					objmovementDto.i_IsLocallyProcessed = (int)Common.SiNo.NO; // El movimiento no está procesado aún
					objmovementDto.i_ProcessTypeId = (int)Common.ProcessType.LOCAL; // Procesado Localmente
					objmovementDto.i_MovementTypeId = (int)Common.MovementType.EGRESO; // EGRESO DE ALMACÉN
					objmovementDto.r_TotalQuantity = 0;

					// Grabar movimiento
					var _MovementId = new MovementBL().AddMovement(ref objOperationResult,
																	objmovementDto,
																	_movementdetailListDto,
																	ClientSession);
				}

				#endregion

				#endregion

				#region Procedimientos -> ADD / DELETE

				if (pobjProcedure != null)
				{
					// Operaciones básicas [Add,Update,Delete] restricciones 
					foreach (var p in pobjProcedure)
					{
						if (p.i_RecordType == (int)RecordType.Temporal && p.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							procedurebyservice objProcedure = new procedurebyservice();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 34), "PS");
							objProcedure.v_ProcedureByServiceId = NewId1;
							objProcedure.v_ServiceId = p.v_ServiceId;
							objProcedure.i_ProcedureId = p.i_ProcedureId;
							//objProcedure.i_ProcedureTypeId = null;

							objProcedure.d_InsertDate = DateTime.Now;
							objProcedure.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objProcedure.i_IsDeleted = 0;

							dbContext.AddToprocedurebyservice(objProcedure);
							dbContext.SaveChanges();
						}
						else if (p.i_RecordType == (int)RecordType.NoTemporal && p.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente
							var objEntitySource = (from a in dbContext.procedurebyservice
												   where a.v_ProcedureByServiceId == p.v_ProcedureByServiceId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_IsDeleted = 1;

							// Guardar los cambios
							dbContext.SaveChanges();
						}
					}
				}

				#endregion

				#region Diagnósticos seleccionados -> UPDATE

				foreach (var dr in pobjDiagnosticRepository)
				{
					// Obtener la entidad fuente
					var objEntitySource = (from a in dbContext.diagnosticrepository
										   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
										   select a).FirstOrDefault();

					if (objEntitySource != null)
					{
						objEntitySource.i_GenerateMedicalBreak = dr.i_GenerateMedicalBreak;
						objEntitySource.d_UpdateDate = DateTime.Now;
						objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

						// Guardar los cambios
						dbContext.SaveChanges();
					}

				}

				#endregion

				#region Service

				if (pobjService != null)
				{
					// Obtener la entidad fuente
					var objService = (from a in dbContext.service
									  where a.v_ServiceId == pobjService.v_ServiceId
									  select a).FirstOrDefault();

					// Crear la entidad con los datos actualizados
					objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
					objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
					objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
					objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
					objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;
					// Falta el campo Tiene Restricciones -> Si / No
					objService.d_StartDateRestriction = pobjService.d_StartDateRestriction;
					objService.d_EndDateRestriction = pobjService.d_EndDateRestriction;
					objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

					// datos de cabecera del Servicio
					objService.i_AptitudeStatusId = pobjService.i_AptitudeStatusId;
					objService.i_IsNewControl = pobjService.i_IsNewControl;

					objService.d_UpdateDate = DateTime.Now;
					objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

					// Guardar los cambios
					dbContext.SaveChanges();
				}

				#endregion

				#region ServiceComponent -> UPDATE

				if (pobjServiceComponent != null)
				{
					// Actualizar algunos valores de ServiceComponent
					OperationResult objOperationResult1 = new OperationResult();
					UpdateServiceComponentFromEso(ref objOperationResult1, pobjServiceComponent, ClientSession, enabledchkApproved);
				}

				#endregion

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		public void AddWorkPlan(ref OperationResult pobjOperationResult, List<MedicationList> pobjMedication, List<ProcedureByServiceList> pobjProcedure, List<AuxiliaryExamList> auxiliaryExams, List<DiagnosticRepositoryList> interconsultations, List<RestrictionList> restrictions, List<DiagnosticRepositoryList> medicalBreaks, serviceDto pobjService, List<string> ClientSession)
		{
			//mon.IsActive = true;
			string NewId0 = "(No generado)";
			int intNodeId = int.Parse(ClientSession[0]);

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				OperationResult objOperationResult = new OperationResult();

				nodeDto node = new NodeBL().GetNodeByNodeId(ref objOperationResult, int.Parse(ClientSession[0]));
				var _pharmacyWarehouseId = node.v_PharmacyWarehouseId;
				var _movementdetailListDto = new List<movementdetailDto>();

				foreach (var m in pobjMedication)
				{
					#region Medication -> ADD / UPDATE / DELETE

					// ADD
					if (m.i_RecordType == (int)RecordType.Temporal && m.i_RecordStatus == (int)RecordStatus.Agregado)
					{
						medication objEntity = new medication();

						objEntity.v_ProductId = m.v_ProductId;
						objEntity.v_ServiceId = m.v_ServiceId;
						objEntity.v_ProductName = m.v_ProductName;
						objEntity.v_PresentationName = m.v_PresentationName;
						objEntity.r_Quantity = m.r_Quantity;
						objEntity.v_Doses = m.v_Doses;
						objEntity.i_ViaId = m.i_ViaId;
						objEntity.d_InsertDate = DateTime.Now;
						objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
						objEntity.i_IsDeleted = 0;

						// Autogeneramos el Pk de la tabla                      
						NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 33), "MC");
						objEntity.v_MedicationId = NewId0;

						dbContext.AddTomedication(objEntity);
						//dbContext.SaveChanges();

						if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
						{
							#region CARGAR PRODUCTOS A DESCONTAR DEL ALMACÉN

							movementdetailDto mdDto = new movementdetailDto();
							mdDto.v_ProductId = m.v_ProductId;
							mdDto.r_Quantity = m.r_Quantity;
							mdDto.i_MovementTypeId = (int?)Common.MotiveType.EgresoAtencion;
							_movementdetailListDto.Add(mdDto);

							#endregion
						}

					}                                     // DELETE
					else if (m.i_RecordType == (int)RecordType.NoTemporal && m.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
					{
						// Obtener la entidad fuente
						var objEntitySource = (from a in dbContext.medication
											   where a.v_MedicationId == m.v_MedicationId
											   select a).FirstOrDefault();

						// Crear la entidad con los datos actualizados                                                           
						objEntitySource.d_UpdateDate = DateTime.Now;
						objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
						objEntitySource.i_IsDeleted = 1;

						// Guardar los cambios
						//dbContext.SaveChanges();
					}

					#endregion
				}

				#region GRABAR MOVIMIENTOS [CABECERA Y DETALLE]

				if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
				{
					movementDto objmovementDto = new movementDto();

					objmovementDto.i_MotiveTypeId = (int?)Common.MotiveType.EgresoAtencion;
					objmovementDto.d_Date = DateTime.Now;
					objmovementDto.v_WarehouseId = _pharmacyWarehouseId;
					objmovementDto.v_ReferenceDocument = string.Empty;
					objmovementDto.i_IsLocallyProcessed = (int)Common.SiNo.NO; // El movimiento no está procesado aún
					objmovementDto.i_ProcessTypeId = (int)Common.ProcessType.LOCAL; // Procesado Localmente
					objmovementDto.i_MovementTypeId = (int)Common.MovementType.EGRESO; // EGRESO DE ALMACÉN
					objmovementDto.r_TotalQuantity = 0;

					// Grabar movimiento
					var _MovementId = new MovementBL().AddMovement(ref objOperationResult,
																	objmovementDto,
																	_movementdetailListDto,
																	ClientSession);
				}

				#endregion

				if (pobjProcedure != null)
				{
					// Operaciones básicas [Add,Update,Delete] restricciones 
					foreach (var p in pobjProcedure)
					{
						#region Procedimientos -> ADD / DELETE

						if (p.i_RecordType == (int)RecordType.Temporal && p.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							procedurebyservice objProcedure = new procedurebyservice();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 34), "PS");
							objProcedure.v_ProcedureByServiceId = NewId1;
							objProcedure.v_ServiceId = p.v_ServiceId;
							objProcedure.i_ProcedureId = p.i_ProcedureId;
							//objProcedure.i_ProcedureTypeId = null;

							objProcedure.d_InsertDate = DateTime.Now;
							objProcedure.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objProcedure.i_IsDeleted = 0;

							dbContext.AddToprocedurebyservice(objProcedure);
							//dbContext.SaveChanges();
						}
						else if (p.i_RecordType == (int)RecordType.NoTemporal && p.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente
							var objEntitySource = (from a in dbContext.procedurebyservice
												   where a.v_ProcedureByServiceId == p.v_ProcedureByServiceId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_IsDeleted = 1;

							// Guardar los cambios
							//dbContext.SaveChanges();
						}

						#endregion
					}
				}

				if (auxiliaryExams != null)
				{
					foreach (var auxiliaryExam in auxiliaryExams)
					{
						#region auxiliaryexam -> ADD / DELETE

						// ADD
						if (auxiliaryExam.i_RecordType == (int)RecordType.Temporal && auxiliaryExam.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							auxiliaryexam objAuxiliaryExam = new auxiliaryexam();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 48), "AX");
							objAuxiliaryExam.v_AuxiliaryExamId = NewId1;
							objAuxiliaryExam.v_ServiceId = auxiliaryExam.v_ServiceId;
							objAuxiliaryExam.v_ComponentId = auxiliaryExam.v_ComponentId;

							objAuxiliaryExam.d_InsertDate = DateTime.Now;
							objAuxiliaryExam.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objAuxiliaryExam.i_IsDeleted = 0;

							dbContext.AddToauxiliaryexam(objAuxiliaryExam);

						}
						// DELETE
						else if (auxiliaryExam.i_RecordType == (int)RecordType.NoTemporal && auxiliaryExam.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente
							var objEntitySource = (from a in dbContext.auxiliaryexam
												   where a.v_AuxiliaryExamId == auxiliaryExam.v_AuxiliaryExamId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_IsDeleted = 1;


						}

						#endregion
					}
				}

				if (interconsultations != null)
				{
					foreach (var intercon in interconsultations)
					{
						#region diagnosticrepository -> ADD / DELETE

						// ADD
						if (intercon.i_RecordType == (int)RecordType.Temporal && intercon.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							// Obtener la entidad fuente
							var objEntitySource = (from a in dbContext.diagnosticrepository
												   where a.v_DiagnosticRepositoryId == intercon.v_DiagnosticRepositoryId
												   select a).FirstOrDefault();

							if (objEntitySource != null)
							{
								objEntitySource.i_SendToInterconsultationId = intercon.i_SendToInterconsultationId;
								objEntitySource.v_InterconsultationDestinationId = intercon.v_OfficeId;
								objEntitySource.d_UpdateDate = DateTime.Now;
								objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							}
						}
						// DELETE
						else if (intercon.i_RecordType == (int)RecordType.NoTemporal && intercon.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							var objEntitySource = (from a in dbContext.diagnosticrepository
												   where a.v_DiagnosticRepositoryId == intercon.v_DiagnosticRepositoryId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_SendToInterconsultationId = (int)SiNo.NO;
							objEntitySource.v_InterconsultationDestinationId = null;
						}

						#endregion
					}
				}

				if (restrictions != null)
				{
					foreach (var restriction in restrictions)
					{
						#region restriction -> ADD / DELETE

						// ADD
						if (restriction.i_RecordType == (int)RecordType.Temporal && restriction.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							restriction objRestriction = new restriction();

							var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
							objRestriction.v_ServiceId = restriction.v_ServiceId;
							objRestriction.v_RestrictionId = NewId1;

							objRestriction.v_MasterRestrictionId = restriction.v_MasterRestrictionId;
							objRestriction.d_StartDateRestriction = restriction.d_StartDateRestriction;
							objRestriction.d_EndDateRestriction = restriction.d_EndDateRestriction;
							objRestriction.d_InsertDate = DateTime.Now;
							objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
							objRestriction.i_IsDeleted = 0;

							dbContext.AddTorestriction(objRestriction);
						}
						// DELETE
						else if (restriction.i_RecordType == (int)RecordType.NoTemporal && restriction.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente v_RestrictionByDiagnosticId
							var objEntitySource = (from a in dbContext.restriction
												   where a.v_RestrictionId == restriction.v_RestrictionByDiagnosticId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_IsDeleted = 1;
						}

						#endregion
					}

				}

				if (medicalBreaks != null)
				{
					foreach (var dr in medicalBreaks)
					{
						#region Descanso Médico -> ADD / DELETE

						// ADD
						if (dr.i_RecordType == (int)RecordType.Temporal && dr.i_RecordStatus == (int)RecordStatus.Agregado)
						{
							// Obtener la entidad fuente
							var objEntitySource = (from a in dbContext.diagnosticrepository
												   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
												   select a).FirstOrDefault();

							if (objEntitySource != null)
							{
								objEntitySource.i_GenerateMedicalBreak = dr.i_GenerateMedicalBreak;
								objEntitySource.d_UpdateDate = DateTime.Now;
								objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							}

						}
						// DELETE
						else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
						{
							// Obtener la entidad fuente v_RestrictionByDiagnosticId
							var objEntitySource = (from a in dbContext.diagnosticrepository
												   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
												   select a).FirstOrDefault();

							// Crear la entidad con los datos actualizados                                                           
							objEntitySource.d_UpdateDate = DateTime.Now;
							objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
							objEntitySource.i_GenerateMedicalBreak = 0;
						}


						#endregion
					}
				}

				if (pobjService != null)
				{
					#region Service -> UPDATE

					// Obtener la entidad fuente
					var objService = (from a in dbContext.service
									  where a.v_ServiceId == pobjService.v_ServiceId
									  select a).FirstOrDefault();

					// Crear la entidad con los datos actualizados
					objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
					objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
					objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
					objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
					objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;

					objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

					objService.d_NextAppointment = pobjService.d_NextAppointment;
					objService.i_SendToTracking = pobjService.i_SendToTracking;

					// datos de cabecera del Servicio

					objService.i_IsNewControl = pobjService.i_IsNewControl;
					objService.i_HasRestrictionId = pobjService.i_HasRestrictionId;
					objService.i_HazInterconsultationId = pobjService.i_HazInterconsultationId;
					objService.v_ExaAuxResult = pobjService.v_ExaAuxResult;

					objService.d_UpdateDate = DateTime.Now;
					objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

					#endregion

				}

				// Guardar los cambios
				dbContext.SaveChanges();

				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}


		#endregion

		#region Antecedentes

		public List<PersonMedicalHistoryList> GetAntecedentConsolidateForService(ref OperationResult pobjOperationResult, string pstrPersonId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<PersonMedicalHistoryList> lis = new List<PersonMedicalHistoryList>();

				int isDeleted = (int)SiNo.NO;

				#region querys individuales

				// Obtener todos loa antecedentes de una persona (una o varias empresas)
				var historyId = (from a in dbContext.history
								 where a.v_PersonId == pstrPersonId && a.i_IsDeleted == isDeleted
								 select new PersonMedicalHistoryList
								 {
									 v_AntecedentTypeName = "Ocupacionales",
									 v_DiseasesName = null,
									 v_HistoryId = a.v_HistoryId,
									 d_StartDate = a.d_StartDate,
									 d_EndDate = a.d_EndDate,
									 v_Occupation = a.v_workstation,
									 v_GroupName = null
								 }).ToList();

				// personmedicalhistory
				var q1tmp = (from A in dbContext.personmedicalhistory
							 //join F in dbContext.history on A.v_PersonId equals F.v_PersonId
							 //join B in dbContext.systemparameter on new { a = A.v_DiseasesId, b = 147 }      // MINI CIE10
							 //                                  equals new { a = B.v_Value1, b = B.i_GroupId } into B_join
							 //from B in B_join.DefaultIfEmpty()
							 //join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 147 }
							 //                                  equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
							 //from C in C_join.DefaultIfEmpty()
							 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
							 //join E in dbContext.systemparameter on new { a = A.i_TypeDiagnosticId.Value, b = 139 }
							 //                                   equals new { a = E.i_ParameterId, b = E.i_GroupId }

							 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPersonId

							 select new PersonMedicalHistoryList
							 {
								 v_AntecedentTypeName = "Medicos-Personales",
								 //v_PersonMedicalHistoryId = A.v_PersonMedicalHistoryId,
								 //v_PersonId = A.v_PersonId,
								 //v_DiseasesId = A.v_DiseasesId,
								 v_DiseasesName = D.v_Name,
								 //i_TypeDiagnosticId = A.i_TypeDiagnosticId,
								 d_StartDate = A.d_StartDate,
								 v_GroupName = null

							 }).ToList();

				var q1 = (from A in q1tmp
						  select new PersonMedicalHistoryList
						  {
							  v_AntecedentTypeName = "Medicos-Personales",
							  v_DiseasesName = A.v_DiseasesName,
							  v_DateOrGroup = A.d_StartDate.Value.ToShortDateString(),
							  //d_StartDate = A.d_StartDate,
							  d_StartDate = A.d_StartDate.Value
						  }).ToList();

				// typeofeep
				var q2 = (from A in historyId
						  select new PersonMedicalHistoryList
						  {
							  v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
							  v_DiseasesName = ConcatenateTypeOfeep(A.v_HistoryId),
							  v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
							  d_StartDate = A.d_StartDate,
						  }).ToList();

				// workstationdangers
				var q3 = (from A in historyId
						  select new PersonMedicalHistoryList
						  {
							  v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
							  v_DiseasesName = ConcatenateWorkStationDangers(A.v_HistoryId),
							  v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
							  d_StartDate = A.d_StartDate,
						  }).ToList();

				// noxioushabits
				var q4 = (from A in dbContext.noxioushabits
						  join B in dbContext.systemparameter on new { a = A.i_TypeHabitsId.Value, b = 148 }  // HÁBITOS NOCIVOS
														 equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
						  from B in B_join.DefaultIfEmpty()
						  where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
						  select new PersonMedicalHistoryList
						  {
							  v_AntecedentTypeName = "Hábitos Nocivos",
							  v_DiseasesName = B.v_Value1 + ", " + A.v_Frequency,
						  }).ToList();

				// familymedicalantecedents

				var q5tmp = (from A in dbContext.familymedicalantecedents
							 join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
															equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
							 from B in B_join.DefaultIfEmpty()
							 join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }
														  equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
							 from C in C_join.DefaultIfEmpty()
							 where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
							 group C by new { C.i_ParameterId, C.v_Value1 } into g
							 select new PersonMedicalHistoryList
							 {
								 v_AntecedentTypeName = "Familiares",
								 i_TypeFamilyId = g.Key.i_ParameterId,
								 v_TypeFamilyName = g.Key.v_Value1
							 }).ToList();

				var q5 = (from A in q5tmp
						  select new PersonMedicalHistoryList
						  {
							  v_AntecedentTypeName = A.v_AntecedentTypeName,
							  v_DiseasesName = ConcatenateFamilyMedicalAntecedents(pstrPersonId, A.i_TypeFamilyId),
							  v_DateOrGroup = A.v_TypeFamilyName
						  }).ToList();

				#endregion

				#region Fusion

				if (q1.Count > 0)
					lis.AddRange(q1);
				if (q2.Count > 0)
					lis.AddRange(q2);
				if (q3.Count > 0)
					lis.AddRange(q3);
				if (q4.Count > 0)
					lis.AddRange(q4);
				if (q5.Count > 0)
					lis.AddRange(q5);

				#endregion

				//var ss = lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();

				pobjOperationResult.Success = 1;
				//return lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();
				return lis.OrderBy(x => x.v_AntecedentTypeName).ToList();


			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceList> GetServicesConsolidateForService(ref OperationResult pobjOperationResult, string pstrPersonId, string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var service = (from A in dbContext.service
							   join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 }  // TIPO SERVICIO
														  equals new { a = C.i_ParameterId, b = C.i_GroupId }
							   where A.v_PersonId == pstrPersonId &&
							   A.v_ServiceId != pstrServiceId &&
							   A.i_ServiceStatusId != (int)ServiceStatus.PorIniciar &&
							   A.i_IsDeleted == 0
							   select new ServiceList
							   {
								   v_ServiceId = A.v_ServiceId,
								   v_MasterServiceName = C.v_Value1,
								   d_ServiceDate = A.d_ServiceDate
							   });

				var q = (from A in service.ToList()
						 select new ServiceList
						 {
							 v_ServiceId = A.v_ServiceId,
							 v_MasterServiceName = A.v_MasterServiceName,
							 d_ServiceDate = A.d_ServiceDate,
							 v_DiseaseName = ConcatenateDxForServiceAntecedent(A.v_ServiceId),
						 }).OrderByDescending(p => p.d_ServiceDate).ToList();


				pobjOperationResult.Success = 1;
				return q;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		private string ConcatenateDxForServiceAntecedent(string pstrserviceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from A in dbContext.diagnosticrepository
					   join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
					   where A.v_ServiceId == pstrserviceId &&
					   A.i_IsDeleted == 0
					   select new
					   {
						   v_DiseasesName = B.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_DiseasesName));
		}

		private string ConcatenateDxForServiceDifNormal(string pstrserviceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from A in dbContext.diagnosticrepository
					   join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
					   where A.v_ServiceId == pstrserviceId && A.i_DiagnosticTypeId != (int)TipoDx.Normal &&
					   A.i_IsDeleted == 0
					   select new
					   {
						   v_DiseasesName = B.v_Name
					   }).ToList();

			if (qry == null)
			{
				return "";
			}
			else
			{ return string.Join(", ", qry.Select(p => p.v_DiseasesName)); }

		}

		private string ConcatenateTypeOfeep(string pstrHistoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from A in dbContext.typeofeep
					   join B in dbContext.systemparameter on new { a = A.i_TypeofEEPId.Value, b = 146 }  // TIPO DE EPP USADO
															equals new { a = B.i_ParameterId, b = B.i_GroupId }
					   where A.v_HistoryId == pstrHistoryId &&
					   A.i_IsDeleted == 0
					   select new
					   {
						   v_DiseasesName = B.v_Value1
					   }).ToList();

			return qry.Count == 0 ? "No usa EPP" : string.Join(", ", qry.Select(p => p.v_DiseasesName));
		}

		private string ConcatenateWorkStationDangers(string pstrHistoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from A in dbContext.workstationdangers
					   join B in dbContext.systemparameter on new { a = A.i_DangerId.Value, b = 145 } // PELIGROS EN EL PUESTO
															  equals new { a = B.i_ParameterId, b = B.i_GroupId }
					   where A.v_HistoryId == pstrHistoryId &&
					   A.i_IsDeleted == 0
					   select new
					   {
						   v_DiseasesName = B.v_Value1
					   }).ToList();

			return qry.Count == 0 ? "No refiere peligros en el puesto" : string.Join(", ", qry.Select(p => p.v_DiseasesName));
		}

		private string ConcatenateFamilyMedicalAntecedents(string pstrPersonId, int pintTypeFamilyId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from A in dbContext.familymedicalantecedents
					   join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
													equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
					   from B in B_join.DefaultIfEmpty()
					   join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }  // [PADRE,MADRE,HERMANOS]
													  equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
					   from C in C_join.DefaultIfEmpty()
					   join D in dbContext.diseases on new { a = A.v_DiseasesId }
															   equals new { a = D.v_DiseasesId } into D_join
					   from D in D_join.DefaultIfEmpty()
					   where A.v_PersonId == pstrPersonId &&
					   A.i_IsDeleted == 0 && C.i_ParameterId == pintTypeFamilyId
					   select new
					   {
						   v_DiseasesName = D.v_Name
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_DiseasesName));
		}

		#endregion

		#region Permisos x examenes componentes

		//public List<RoleNodeComponentProfileList> GetRoleNodeComponentProfile(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
		//{
		//    mon.IsActive = true;

		//    try
		//    {
		//        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

		//        var query = (from a in dbContext.rolenodecomponentprofile
		//                     join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
		//                     where a.i_NodeId == pintNodeId &&
		//                     a.i_RoleId == pintRoleId && a.v_ComponentId == pstrComponentId &&
		//                     a.i_IsDeleted == 0
		//                     select new RoleNodeComponentProfileList
		//                     {
		//                         v_RoleNodeComponentId = a.v_RoleNodeComponentId,
		//                         i_NodeId = a.i_NodeId,
		//                         i_RoleId = a.i_RoleId,
		//                         v_ComponentName = b.v_Name,
		//                         v_Read = a.i_Read == 1 ? "Si" : "No",
		//                         v_Write = a.i_Write == 1 ? "Si" : "No",
		//                         v_Dx = a.i_Dx == 1 ? "Si" : "No",
		//                         v_Approved = a.i_Approved == 1 ? "Si" : "No"
		//                     });


		//        List<RoleNodeComponentProfileList> objData = query.ToList();

		//        pobjOperationResult.Success = 1;
		//        return objData;
		//    }
		//    catch (Exception ex)
		//    {
		//        pobjOperationResult.Success = 0;
		//        poContainsbjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
		//        return null;
		//    }
		//}

		public rolenodecomponentprofileDto GetRoleNodeComponentProfile(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				rolenodecomponentprofileDto dtoEntity = null;

				string[] componentId = null;

				if (pstrComponentId != null)
				{
					if (pstrComponentId.Contains('|'))
					{
						componentId = pstrComponentId.Split('|');
					}
					else
					{
						componentId = new string[1];
						componentId[0] = pstrComponentId;
					}
				}

				var query = (from a in dbContext.rolenodecomponentprofile
							 where (a.i_NodeId == pintNodeId) &&
							 (a.i_RoleId == pintRoleId) &&
							 (componentId.Contains(a.v_ComponentId)) &&
							 (a.i_IsDeleted == (int)SiNo.NO)
							 select a).FirstOrDefault();

				if (query != null)
					dtoEntity = rolenodecomponentprofileAssembler.ToDTO(query);

				pobjOperationResult.Success = 1;
				return dtoEntity;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<rolenodecomponentprofileDto> GetRoleNodeComponentProfileByRoleNodeId(int pintNodeId, int pintRoleId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from a in dbContext.rolenodecomponentprofile
							 where (a.i_NodeId == pintNodeId) &&
								   (a.i_RoleId == pintRoleId) &&
								   (a.i_IsDeleted == (int)SiNo.NO)
							 select new rolenodecomponentprofileDto
							 {
								 v_ComponentId = a.v_ComponentId,
								 v_RoleNodeComponentId = a.v_RoleNodeComponentId,
								 i_Read = a.i_Read.Value
							 }).ToList();

				return query;
			}
			catch (Exception)
			{
				throw;

			}

		}


		#endregion

		#endregion

		#region RoleNodeComponentProfile



		#endregion

		#region Reports
		List<int> ListaDiente = new List<int>();

		//Alberto
		public bool PermitirLlamar(string pstrServiceId, int pintPiso)
		{
			//mon.IsActive = true;


			try
			{
				bool Respuesta = true;
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from s in dbContext.servicecomponent
							 join c in dbContext.component on s.v_ComponentId equals c.v_ComponentId
							 join P in dbContext.systemparameter on new { a = 116, b = c.i_CategoryId.Value }
								   equals new { a = P.i_GroupId, b = P.i_ParameterId } //into P_join
							 //from P in P_join.DefaultIfEmpty()

							 join P1 in dbContext.systemparameter on new { a = 127, b = s.i_ServiceComponentStatusId.Value }
							equals new { a = P1.i_GroupId, b = P1.i_ParameterId } //into P1_join
							 //from P1 in P1_join.DefaultIfEmpty()

							 where s.v_ServiceId == pstrServiceId
							 select new Piso
							 {
								 v_Categoria = P.v_Value1,
								 ValorPiso = P.v_Value2,
								 i_CategoriaId = c.i_CategoryId.Value,
								 i_EstadoComponente = s.i_ServiceComponentStatusId.Value,
								 v_EstadoComponente = P1.v_Value1
							 }
								 );


				var objData = query.AsEnumerable()
						   .GroupBy(x => x.i_CategoriaId)
						   .Select(group => group.First())
						   .OrderBy(o => o.ValorPiso);


				foreach (var item in objData)
				{
					if (int.Parse(item.ValorPiso.ToString()) < pintPiso && item.i_EstadoComponente != (int)ServiceComponentStatus.Evaluado)
					{
						Respuesta = false;
					}
				}

				return Respuesta;
			}
			catch (Exception ex)
			{
				return false;
			}
		}

		public bool EsProtocoloComision(string pstrServiceId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var objEntity = (from a in dbContext.service
								 join b in dbContext.protocol on a.v_ProtocolId equals b.v_ProtocolId
								 where a.v_ServiceId == pstrServiceId && b.i_HasVigency == 1
								 select a).FirstOrDefault();


				if (objEntity == null)
				{
					return false;
				}
				else
				{
					return true;
				}

			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<DiagnosticRepositoryList> GetCAPE(string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from sss in dbContext.service
							 join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
							 from ccc in ccc_join.DefaultIfEmpty()  // ESO

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
							 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

							 join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

							 join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
												equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

							 join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
						   equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


							 join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

							 join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

							 join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

							 join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

							 join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

							 join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
									  equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

							 join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
														equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
							 from J3 in J3_join.DefaultIfEmpty()

							 join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
											 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
							 from su in su_join.DefaultIfEmpty()

							 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
							 from pr in pr_join.DefaultIfEmpty()

							 join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
												equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
							 from H1 in H1_join.DefaultIfEmpty()

							 join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
																			 equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
							 from H2 in H2_join.DefaultIfEmpty()

							 where (ccc.v_ServiceId == pstrServiceId) &&
								   (ccc.i_IsDeleted == isDeleted) &&
								   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
								   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

							 select new DiagnosticRepositoryList
							 {
								 v_ServiceId = sss.v_ServiceId,
								 v_FirstName = D.v_FirstName,
								 v_FirstLastName = D.v_FirstLastName,
								 v_SecondLastName = D.v_SecondLastName,
								 b_Logo = ooo.b_Image,
								 v_DocNumber = D.v_DocNumber,
								 v_DocTypeName = J6.v_Value1,
								 d_BirthDate = D.d_Birthdate,
								 v_GenderName = J.v_Value1,
								 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
								 v_OccupationName = D.v_CurrentOccupation,
								 v_OrganizationPartialName = ooo.v_Name,
								 v_ProtocolName = E.v_Name,
								 i_AptitudeStatusId = sss.i_AptitudeStatusId,
								 d_ServiceDate = sss.d_ServiceDate,
								 v_DiseasesName = ddd.v_Name,
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 Grupo = H1.v_Value1,
								 Factor = H2.v_Value1,
								 g_Image = pr.b_SignatureImage,
								 v_ObsStatusService = sss.v_ObsStatusService,
								 EmpresaCliente = ooo.v_Name,
							 });

				var MedicalCenter = GetInfoMedicalCenter();
				var q = (from a in query.ToList()
						 select new DiagnosticRepositoryList
						 {
							 LogoPropietaria = MedicalCenter.b_Image,
							 v_ServiceId = a.v_ServiceId,
							 v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
							 b_Logo = a.b_Logo,
							 v_DocTypeName = a.v_DocTypeName,
							 v_DocNumber = a.v_DocTypeName + " - " + a.v_DocNumber,
							 i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
							 v_GenderName = a.v_GenderName,
							 v_ProtocolName = a.v_ProtocolName,
							 i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
							 v_OccupationName = a.v_OccupationName == "" ? "------" : a.v_OccupationName,
							 v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_ProtocolName),
							 i_AptitudeStatusId = a.i_AptitudeStatusId,

							 v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
							 d_ServiceDate = a.d_ServiceDate,
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_RecomendationsName = ConcatenateRecommendationByService(a.v_ServiceId),
							 //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 v_RestrictionsName = ConcatenateRestrictionByServiceConcatecDx(a.v_ServiceId) == "" ? "NINGUNA" : ConcatenateRestrictionByServiceConcatecDx(a.v_ServiceId),
							 Grupo = a.Grupo,
							 Factor = a.Factor,
							 GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
							 g_Image = a.g_Image,
							 v_ObsStatusService = a.v_ObsStatusService,
							 EmpresaCliente = a.EmpresaCliente

						 }).ToList();



				return q;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<DiagnosticRepositoryList> GetCAPSD(string pstrServiceId, string pstrPath)
		{
			//mon.IsActive = true;
			var isDeleted = 0;
			try
			{


				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from sss in dbContext.service
							 join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
							 from ccc in ccc_join.DefaultIfEmpty()  // ESO

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
							 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

							 join D in dbContext.person on sss.v_PersonId equals D.v_PersonId into D_join
							 from D in D_join.DefaultIfEmpty()

							 join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
												equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

							 join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
						   equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


							 join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId into E_join
							 from E in E_join.DefaultIfEmpty()

							 join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId into F_join
							 from F in F_join.DefaultIfEmpty()

							 join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId into ooo_join
							 from ooo in ooo_join.DefaultIfEmpty()

							 join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId into lll_join
							 from lll in lll_join.DefaultIfEmpty()

							 join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

							 join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
									  equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

							 join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
														equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
							 from J3 in J3_join.DefaultIfEmpty()

							 join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
											 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
							 from su in su_join.DefaultIfEmpty()

							 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
							 from pr in pr_join.DefaultIfEmpty()

							 join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
												equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
							 from H1 in H1_join.DefaultIfEmpty()

							 join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
																			 equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
							 from H2 in H2_join.DefaultIfEmpty()

							 where (ccc.v_ServiceId == pstrServiceId) &&
								   (ccc.i_IsDeleted == isDeleted) &&
								   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
								   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

							 select new DiagnosticRepositoryList
							 {
								 v_ServiceId = sss.v_ServiceId,
								 v_FirstName = D.v_FirstName,
								 v_FirstLastName = D.v_FirstLastName,
								 v_SecondLastName = D.v_SecondLastName,
								 b_Logo = ooo.b_Image,
								 v_DocNumber = D.v_DocNumber,
								 v_DocTypeName = J6.v_Value1,
								 d_BirthDate = D.d_Birthdate,
								 v_GenderName = J.v_Value1,
								 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
								 v_OccupationName = D.v_CurrentOccupation,
								 v_OrganizationPartialName = ooo.v_Name,
								 v_ProtocolName = E.v_Name,
								 i_AptitudeStatusId = sss.i_AptitudeStatusId,
								 d_ServiceDate = sss.d_ServiceDate,
								 v_DiseasesName = ddd.v_Name,
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 Grupo = H1.v_Value1,
								 Factor = H2.v_Value1,
								 g_Image = pr.b_SignatureImage,
								 v_EsoTypeName = H.v_Value1,
								 v_ObsStatusService = sss.v_ObsStatusService

							 });

				var MedicalCenter = GetInfoMedicalCenter();
				var q = (from a in query.ToList()
						 select new DiagnosticRepositoryList
						 {
							 v_ServiceId = a.v_ServiceId,
							 v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
							 b_Logo = a.b_Logo,
							 v_DocTypeName = a.v_DocTypeName,
							 v_DocNumber = a.v_DocNumber,
							 d_BirthDate = a.d_BirthDate,
							 i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
							 v_GenderName = a.v_GenderName,
							 v_ProtocolName = a.v_ProtocolName,
							 i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
							 v_OccupationName = a.v_OccupationName,
							 v_OrganizationName = string.Format("{0} ", a.v_OrganizationPartialName),
							 i_AptitudeStatusId = a.i_AptitudeStatusId,

							 v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
							 d_ServiceDate = a.d_ServiceDate,
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 v_RestrictionsName = ConcatenateRestrictionByServiceConcatecDx(a.v_ServiceId) == "" ? "Ninguno" : ConcatenateRestrictionByServiceConcatecDx(a.v_ServiceId),

							 g_Image = a.g_Image,
							 LogoPropietaria = MedicalCenter.b_Image,
							 pathSinRestriccion = a.i_AptitudeStatusId == 2 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
							 pathConRestriccion = a.i_AptitudeStatusId == 5 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
							 pathObservado = a.i_AptitudeStatusId == 4 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
							 pathNoApto = a.i_AptitudeStatusId == 3 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
							 Grupo = a.Grupo,
							 Factor = a.Factor,
							 GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
							 v_EsoTypeName = a.v_EsoTypeName,
							 v_ObsStatusService = a.v_ObsStatusService

						 }).ToList();



				return q;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<DiagnosticRepositoryList> GetCAPSM(string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from sss in dbContext.service
							 join sc in dbContext.servicecomponent on sss.v_ServiceId equals sc.v_ServiceId
							 join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
							 join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = sc.v_ComponentId }
													   equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
							 from d in d_join.DefaultIfEmpty()

							 join J8 in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
												 equals new { a = J8.i_ParameterId, b = J8.i_GroupId }

							 join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
							 from ccc in ccc_join.DefaultIfEmpty()  // ESO

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
							 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

							 join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

							 join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
												equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

							 join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
							 equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO

							 join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

							 join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId


							 join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

							 join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
									  equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                  

							 join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
							 from su in su_join.DefaultIfEmpty()

							 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
							 from pr in pr_join.DefaultIfEmpty()

							 join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
												equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
							 from H1 in H1_join.DefaultIfEmpty()

							 join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
																			 equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
							 from H2 in H2_join.DefaultIfEmpty()

							 where (sss.v_ServiceId == pstrServiceId) &&
								 (d.i_IsDeleted == 0 || d.i_IsDeleted == null) &&
								 (sc.i_IsRequiredId == 1) &&
								   (sss.i_IsDeleted == isDeleted)

							 select new DiagnosticRepositoryList
							 {
								 v_ServiceId = sss.v_ServiceId,
								 Categoria = J8.v_Value1,
								 Resultado = d.v_DiseasesId,
								 v_FirstName = D.v_FirstName,
								 v_FirstLastName = D.v_FirstLastName,
								 v_SecondLastName = D.v_SecondLastName,
								 b_Logo = ooo.b_Image,
								 v_DocNumber = D.v_DocNumber,
								 v_DocTypeName = J6.v_Value1,
								 d_BirthDate = D.d_Birthdate,
								 v_GenderName = J.v_Value1,
								 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
								 v_OccupationName = D.v_CurrentOccupation,
								 v_OrganizationPartialName = ooo.v_Name,
								 v_ProtocolName = E.v_Name,
								 i_AptitudeStatusId = sss.i_AptitudeStatusId,
								 d_ServiceDate = sss.d_ServiceDate,
								 v_DiseasesName = ddd.v_Name,
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 Grupo = H1.v_Value1,
								 Factor = H2.v_Value1,
								 g_Image = pr.b_SignatureImage,
								 v_EsoTypeName = H.v_Value1,
								 i_DiagnosticTypeId = d.i_DiagnosticTypeId,
								 v_ComponentId = sc.v_ComponentId,
								 v_ObsStatusService = sss.v_ObsStatusService
							 }).ToList();

				var MedicalCenter = GetInfoMedicalCenter();

				//var e = query.OrderBy(a => a.v_ComponentId);
				//var ee = e.ToList().Find(p => p.v_ComponentId == "N009-ME000000054");

				var q = (from a in query.ToList()
						 orderby a.Resultado descending
						 select new DiagnosticRepositoryList
						 {
							 v_ServiceId = a.v_ServiceId,
							 v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
							 b_Logo = a.b_Logo,
							 v_DocTypeName = a.v_DocTypeName,
							 v_DocNumber = a.v_DocTypeName + " - " + a.v_DocNumber,
							 i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
							 v_GenderName = a.v_GenderName,
							 v_ProtocolName = a.v_ProtocolName,
							 i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
							 v_OccupationName = a.v_OccupationName,
							 v_OrganizationName = string.Format("{0} ", a.v_OrganizationPartialName),
							 i_AptitudeStatusId = a.i_AptitudeStatusId,

							 v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
							 d_ServiceDate = a.d_ServiceDate,
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 v_RestrictionsName = ConcatenateRestrictionByServiceConcatecDx(a.v_ServiceId) == "" ? "Ninguno" : ConcatenateRestrictionByServiceConcatecDx(a.v_ServiceId),

							 Grupo = a.Grupo,
							 Factor = a.Factor,
							 GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
							 g_Image = a.g_Image,
							 LogoPropietaria = MedicalCenter.b_Image,
							 v_EsoTypeName = a.v_EsoTypeName,
							 Categoria = a.Categoria,
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 Resultado = a.Resultado == null || a.i_DiagnosticTypeId == (int)TipoDx.Normal ? "NORMAL" : "ALTERADO",
							 v_ObsStatusService = a.v_ObsStatusService
						 }).ToList();

				var objData = q.AsEnumerable()
						 .GroupBy(x => x.Categoria)
						 .Select(group => group.First());

				return objData.ToList();

				//return null;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		//public List<DiagnosticRepositoryList> GetCAPC(string pstrServiceId, string pstrPath)
		//{
		//    //mon.IsActive = true;
		//    var isDeleted = 0;
		//    try
		//    {
		//        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

		//        var query = (from sss in dbContext.service
		//                     join sc in dbContext.servicecomponent on sss.v_ServiceId equals sc.v_ServiceId
		//                     join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
		//                     join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = c.v_ComponentId }
		//                                               equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
		//                     from d in d_join.DefaultIfEmpty()

		//                     join J8 in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
		//                                         equals new { a = J8.i_ParameterId, b = J8.i_GroupId }

		//                     join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
		//                     from ccc in ccc_join.DefaultIfEmpty()  // ESO

		//                     join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
		//                     from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

		//                     join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

		//                     join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
		//                                        equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

		//                     join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
		//                   equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


		//                     join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

		//                     join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

		//                     join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

		//                     join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

		//                     join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
		//                                         equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

		//                     join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
		//                              equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

		//                     join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
		//                                                equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
		//                     from J3 in J3_join.DefaultIfEmpty()

		//                     join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
		//                                     equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
		//                     from J1 in J1_join.DefaultIfEmpty()

		//                     join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
		//                                                     equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
		//                     from J2 in J2_join.DefaultIfEmpty()

		//                     join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
		//                     from su in su_join.DefaultIfEmpty()

		//                     join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
		//                     from pr in pr_join.DefaultIfEmpty()

		//                     join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
		//                                        equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
		//                     from H1 in H1_join.DefaultIfEmpty()

		//                     join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
		//                                                                     equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
		//                     from H2 in H2_join.DefaultIfEmpty()

		//                     where (ccc.v_ServiceId == pstrServiceId) &&
		//                           (ccc.i_IsDeleted == isDeleted) &&
		//                           (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
		//                           ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

		//                     select new DiagnosticRepositoryList
		//                     {
		//                         Categoria = J8.v_Value1,
		//                         Resultado = d.v_DiseasesId,
		//                         v_ServiceId = sss.v_ServiceId,
		//                         v_FirstName = D.v_FirstName,
		//                         v_FirstLastName = D.v_FirstLastName,
		//                         v_SecondLastName = D.v_SecondLastName,
		//                         b_Logo = ooo.b_Image,
		//                         v_DocNumber = D.v_DocNumber,
		//                         v_DocTypeName = J6.v_Value1,
		//                         d_BirthDate = D.d_Birthdate,
		//                         v_GenderName = J.v_Value1,
		//                         i_EsoTypeId_Old = E.i_EsoTypeId.Value,
		//                         v_OccupationName = D.v_CurrentOccupation,
		//                         v_OrganizationPartialName = ooo.v_Name,
		//                         v_ProtocolName = E.v_Name,
		//                         i_AptitudeStatusId = sss.i_AptitudeStatusId,
		//                         d_ServiceDate = sss.d_ServiceDate,
		//                         v_DiseasesName = ddd.v_Name,
		//                         v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
		//                         Grupo = H1.v_Value1,
		//                         Factor = H2.v_Value1,
		//                         g_Image = pr.b_SignatureImage,
		//                         v_EsoTypeName = H.v_Value1
		//                     }).ToList();

		//        var MedicalCenter = GetInfoMedicalCenter();
		//        var q = (from a in query.ToList()
		//                 orderby a.Resultado descending
		//                 select new DiagnosticRepositoryList
		//                 {
		//                     v_ServiceId =a.v_ServiceId,
		//                     v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
		//                     b_Logo = a.b_Logo,
		//                     v_DocTypeName = a.v_DocTypeName,
		//                     d_BirthDate = a.d_BirthDate,
		//                     v_DocNumber = a.v_DocTypeName + " - " + a.v_DocNumber,
		//                     i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
		//                     v_GenderName = a.v_GenderName,
		//                     v_ProtocolName = a.v_ProtocolName,
		//                     i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
		//                     v_OccupationName = a.v_OccupationName,
		//                     v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_ProtocolName),
		//                     i_AptitudeStatusId = a.i_AptitudeStatusId,

		//                     v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
		//                     v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
		//                     v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
		//                     v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
		//                     Grupo = a.Grupo,
		//                     Factor = a.Factor,
		//                     GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
		//                     g_Image = a.g_Image,
		//                     LogoPropietaria = MedicalCenter.b_Image,
		//                     v_EsoTypeName = a.v_EsoTypeName,
		//                     Categoria = a.Categoria,
		//                     Resultado = a.Resultado == null ? "NORMAL" : "ALTERADO",
		//                    pathSinRestriccion = a.i_AptitudeStatusId == 2 ?pstrPath + "\\Resources\\cuadradonegro.jpg":"",
		//                     pathConRestriccion = a.i_AptitudeStatusId == 5 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
		//                     pathObservado = a.i_AptitudeStatusId == 4 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
		//                     pathNoApto = a.i_AptitudeStatusId == 3 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
		//                 }).ToList();

		//        var objData = q.AsEnumerable()
		//                 .GroupBy(x => x.Categoria)
		//                 .Select(group => group.First());

		//        return objData.ToList();
		//    }
		//    catch (Exception ex)
		//    {
		//        return null;
		//    }
		//}

		public List<CategoriaResultados> GetListCategoriaResultados(string pstrServiceId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from s in dbContext.service
							 join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
							 join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
							 join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = c.v_ComponentId }
														 equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
							 from d in d_join.DefaultIfEmpty()

							 join J in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
												 equals new { a = J.i_ParameterId, b = J.i_GroupId }


							 where s.i_IsDeleted == 0 && sc.i_IsDeleted == 0 && s.v_ServiceId == pstrServiceId
							 select new CategoriaResultados
							 {
								 Categoria = J.v_Value1,
								 Resultado = d.v_DiseasesId

							 }).ToList();

				var q = (from a in query.ToList()
						 orderby a.Resultado descending
						 select new CategoriaResultados
						 {
							 Categoria = a.Categoria,
							 Resultado = a.Resultado == null ? "NORMAL" : "ALTERADO"
						 }).ToList();

				var objData = q.AsEnumerable()
							.GroupBy(x => x.Categoria)
							.Select(group => group.First());

				return objData.ToList();

			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<DiagnosticRepositoryList> GetCAPC(string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from sss in dbContext.service
							 join sc in dbContext.servicecomponent on sss.v_ServiceId equals sc.v_ServiceId
							 join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
							 join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = c.v_ComponentId }
													   equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
							 from d in d_join.DefaultIfEmpty()

							 join J8 in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
												 equals new { a = J8.i_ParameterId, b = J8.i_GroupId }

							 join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
							 from ccc in ccc_join.DefaultIfEmpty()  // ESO

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
							 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

							 join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

							 join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
												equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

							 join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
						   equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


							 join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

							 join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

							 join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

							 join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

							 join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

							 join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
							 from su in su_join.DefaultIfEmpty()

							 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
							 from pr in pr_join.DefaultIfEmpty()

							 join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
												equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
							 from H1 in H1_join.DefaultIfEmpty()

							 join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
																			 equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
							 from H2 in H2_join.DefaultIfEmpty()

							 where (sss.v_ServiceId == pstrServiceId) &&
								   (d.i_IsDeleted == isDeleted || d.i_IsDeleted == null) &&
									(sc.i_IsRequiredId == 1) &&
								   (sss.i_IsDeleted == isDeleted)

							 //(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
							 //ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

							 select new DiagnosticRepositoryList
							 {
								 i_CategoryId = c.i_CategoryId.Value,
								 Categoria = J8.v_Value1,
								 Resultado = d.v_DiseasesId,
								 v_FirstName = D.v_FirstName,
								 v_FirstLastName = D.v_FirstLastName,
								 v_SecondLastName = D.v_SecondLastName,
								 b_Logo = ooo.b_Image,
								 v_DocNumber = D.v_DocNumber,
								 v_DocTypeName = J6.v_Value1,
								 d_BirthDate = D.d_Birthdate,
								 v_GenderName = J.v_Value1,
								 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
								 v_OccupationName = D.v_CurrentOccupation,
								 v_OrganizationPartialName = ooo.v_Name,
								 v_ProtocolName = E.v_Name,
								 i_AptitudeStatusId = sss.i_AptitudeStatusId,
								 d_ServiceDate = sss.d_ServiceDate,
								 v_DiseasesName = ddd.v_Name,
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 Grupo = H1.v_Value1,
								 Factor = H2.v_Value1,
								 g_Image = pr.b_SignatureImage,
								 v_EsoTypeName = H.v_Value1,
								 v_ServiceId = sss.v_ServiceId,
								 i_DiagnosticTypeId = d.i_DiagnosticTypeId,
								 v_ComponentId = sc.v_ComponentId,
								 v_ObsStatusService = sss.v_ObsStatusService,
								 b_Photo = D.b_PersonImage
							 }).ToList();

				var MedicalCenter = GetInfoMedicalCenter();

				var q = (from a in query.ToList()
						 orderby a.Resultado descending
						 select new DiagnosticRepositoryList
						 {
							 i_CategoryId = a.i_CategoryId,
							 v_ServiceId = a.v_ServiceId,
							 v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
							 b_Logo = a.b_Logo,
							 v_DocTypeName = a.v_DocTypeName,
							 v_DocNumber = a.v_DocNumber,
							 d_BirthDate = a.d_BirthDate,
							 i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
							 v_GenderName = a.v_GenderName,
							 v_ProtocolName = a.v_ProtocolName,
							 i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
							 v_OccupationName = a.v_OccupationName,
							 v_OrganizationName = a.v_OrganizationPartialName,
							 i_AptitudeStatusId = a.i_AptitudeStatusId,

							 v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 Grupo = a.Grupo,
							 Factor = a.Factor,
							 GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
							 g_Image = a.g_Image,
							 LogoPropietaria = MedicalCenter.b_Image,
							 v_EsoTypeName = a.v_EsoTypeName,
							 Categoria = a.Categoria,
							 //Resultado = a.Resultado == null ? "NORMAL" : "ALTERADO",
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 Resultado = a.Resultado == null || a.i_DiagnosticTypeId == (int)TipoDx.Normal ? "NORMAL" : "ALTERADO",
							 v_RestrictionsName = ConcatenateRestrictionByCategoria(a.i_CategoryId, a.v_ServiceId) == "" ? "NINGUNO" : ConcatenateRestrictionByCategoria(a.i_CategoryId, a.v_ServiceId),
							 v_ObsStatusService = a.v_ObsStatusService,
							 b_Photo = a.b_Photo
						 }).ToList();

				var objData = q.AsEnumerable()
						 .GroupBy(x => x.Categoria)
						 .Select(group => group.First());


				return objData.ToList();
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public string DevolverValorDeCampo(string pstrServiceComponentId, string pstrCampoId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var query = (from sss in dbContext.servicecomponentfields
						 join vvv in dbContext.servicecomponentfieldvalues on sss.v_ServiceComponentFieldsId equals vvv.v_ServiceComponentFieldsId
						 where sss.v_ServiceComponentId == pstrServiceComponentId && sss.v_ComponentFieldId == pstrCampoId

						 select new
						 {
							 Valor = vvv.v_Value1
						 }).FirstOrDefault();

			return query.Valor;
		}

		public List<ReporteAtencionMedicaDetallado> ReporteAtencionMedicaDetallada(DateTime? FechaInicio, DateTime? Fechafin, int? pintProfesionalId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			ReporteAtencionMedicaDetallado oReporteAtencionMedicaDetallado;
			List<ReporteAtencionMedicaDetallado> oLista = new List<ReporteAtencionMedicaDetallado>();

			var x = dbContext.reporteatencionmedica(FechaInicio, Fechafin, pintProfesionalId).ToList();

			foreach (var item in x)
			{
				oReporteAtencionMedicaDetallado = new ReporteAtencionMedicaDetallado();
				oReporteAtencionMedicaDetallado.Trabajador = item.Trabajador;
				oReporteAtencionMedicaDetallado.FechaServicio = item.FechaServicio;
				oReporteAtencionMedicaDetallado.Producto = item.Producto;
				oReporteAtencionMedicaDetallado.CantidadRecetada = item.CantidadRecetada == null ? 0 : item.CantidadRecetada.Value;
				oReporteAtencionMedicaDetallado.CantidadVendida = item.CantidadVendida == null ? 0 : item.CantidadVendida.Value;
				oReporteAtencionMedicaDetallado.PrecioVenta = item.PrecioVenta == null ? 0 : item.PrecioVenta.Value;
				oReporteAtencionMedicaDetallado.Importe = item.Importe == null ? 0 : item.Importe.Value;
				oReporteAtencionMedicaDetallado.TipoDocVenta = item.TipoDocVenta;
				oReporteAtencionMedicaDetallado.NroDocVenta = item.NroDocVenta;
				oReporteAtencionMedicaDetallado.CondicionPago = item.CondicionPago;
				oReporteAtencionMedicaDetallado.Vendedor = item.Vendedor;
				oReporteAtencionMedicaDetallado.Profesional = item.Profesional;
				oLista.Add(oReporteAtencionMedicaDetallado);
			}

			return oLista;
		}

		// Alberto
		public List<ServiceList> ReporteTiempoTrabajadores(string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds)
		{

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join A1 in dbContext.servicecomponent on A.v_ServiceId equals A1.v_ServiceId into A1_join
							from A1 in A1_join.DefaultIfEmpty()

							join A2 in dbContext.component on A1.v_ComponentId equals A2.v_ComponentId into A2_join
							from A2 in A2_join.DefaultIfEmpty()

							join A3 in dbContext.systemparameter on new { a = A2.i_CategoryId.Value, b = 116 } equals new { a = A3.i_ParameterId, b = A3.i_GroupId } into A3_join
							from A3 in A3_join.DefaultIfEmpty()


							join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
							from B in B_join.DefaultIfEmpty()

							join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
							from C in C_join.DefaultIfEmpty()

							join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
							from D in D_join.DefaultIfEmpty()

							join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

							join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId

							join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId

							join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
							from H in H_join.DefaultIfEmpty()

							join I in dbContext.person on A.v_PersonId equals I.v_PersonId

							join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
							from K in K_join.DefaultIfEmpty()

							join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
							from L in L_join.DefaultIfEmpty()

							join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
							from et in et_join.DefaultIfEmpty()

							// Empresa / Sede Cliente ******************************************************
							join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
									equals new { a = oc.v_OrganizationId } into oc_join
							from oc in oc_join.DefaultIfEmpty()

							join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
								  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
							from lc in lc_join.DefaultIfEmpty()

							//**********************************************************************************

							join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
															equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
															equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()
							where A.i_IsDeleted == 0 && D.i_LineStatusId == (int)LineStatus.EnCircuito && A1.i_IsRequiredId == 1
							select new ServiceList
							{
								v_ServiceComponentId = A1.v_ServiceComponentId,
								i_ServiceComponentStatusId = A1.i_ServiceComponentStatusId,
								v_ServiceId = A.v_ServiceId,
								v_CalendarId = D.v_CalendarId,
								v_ProtocolId = A.v_ProtocolId,
								v_PersonId = A.v_PersonId,
								i_MasterServiceId = A.i_MasterServiceId.Value,
								v_MasterServiceName = C.v_Value1,
								i_ServiceStatusId = A.i_ServiceStatusId.Value,
								v_ServiceStatusName = B.v_Value1,
								i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
								d_ServiceDate = (DateTime)A.d_ServiceDate,
								d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
								d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
								i_FlagAgentId = A.i_FlagAgentId.Value,
								d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,

								v_OrganizationName = F.v_Name,
								v_GenderName = G.v_Name,
								v_ServiceTypeName = H.v_Value1,
								i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
								i_EsoTypeId = E.i_EsoTypeId.Value,
								v_LocationId = E.v_EmployerLocationId,
								v_LocationName = G.v_Name,
								v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
								v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
								v_ProtocolName = E.v_Name,
								v_CreationUser = J1.v_UserName,
								v_UpdateUser = J2.v_UserName,
								d_CreationDate = A.d_InsertDate,
								d_UpdateDate = A.d_UpdateDate,
								v_AptitudeStatusName = K.v_Value1,
								v_DocTypeName = L.v_Value1,
								v_DocNumber = I.v_DocNumber,
								v_CustomerOrganizationId = E.v_CustomerOrganizationId,
								v_CustomerLocationId = E.v_CustomerLocationId,
								v_EsoTypeName = et.v_Value1,
								i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
								v_ComponentId = A1.v_ComponentId,
								i_IsFac = A.i_IsFac,
								i_ServiceId = D.i_ServiceId.Value,
								i_CategoriaId = A2.i_CategoryId,
								v_Categoria = A3.v_Value1,
								HoraIngreso = A1.d_StartDate,
								HoraSalida = A1.d_EndDate

							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				{
					query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				}


				List<ServiceList> objData = query.ToList();


				if (componentIds != null)
				{
					var xx = objData.FindAll(p => componentIds.Contains(p.v_ComponentId));

					var y = xx.GroupBy(g => new { g.i_CategoriaId, g.v_PersonId, g.v_ServiceId })
								  .Select(s => s.First())
								  .OrderBy(o => o.HoraSalida).ToList();


					List<ServiceList> Resultado = new List<ServiceList>();
					ServiceList oServiceList;
					for (int i = 0; i < y.Count; i++)
					{
						oServiceList = new ServiceList();

						oServiceList.v_Pacient = y[i].v_Pacient;
						oServiceList.v_Categoria = y[i].v_Categoria;
						oServiceList.d_ServiceDate = y[i].d_ServiceDate;
						oServiceList.HoraIngreso = y[i].HoraIngreso;
						oServiceList.HoraSalida = y[i].HoraSalida;
						if (i == 0)
						{
							var x = 0;
							oServiceList.TiempoMuerto = x;
						}
						else
						{
							if (y[i].HoraIngreso != null && y[i - 1].HoraSalida != null)
							{
								var x = y[i].HoraIngreso.Value - y[i - 1].HoraSalida.Value;
								oServiceList.TiempoMuerto = x.Minutes;
							}
							else
							{
								oServiceList.TiempoMuerto = 0;
							}
						}

						Resultado.Add(oServiceList);

					}

					return Resultado;
				}
				else
				{
					//.GroupBy(x => new { x.i_CategoryId, x.v_PersonId })
					var y = objData.GroupBy(g => new { g.i_CategoriaId, g.v_PersonId, g.v_ServiceId })
							   .Select(s => s.First())
							   .OrderBy(o => o.HoraSalida).ToList();

					List<ServiceList> Resultado = new List<ServiceList>();
					ServiceList oServiceList;
					for (int i = 0; i < y.Count; i++)
					{
						oServiceList = new ServiceList();

						oServiceList.v_Pacient = y[i].v_Pacient;
						oServiceList.v_Categoria = y[i].v_Categoria;
						oServiceList.d_ServiceDate = y[i].d_ServiceDate;
						oServiceList.HoraIngreso = y[i].HoraIngreso;
						oServiceList.HoraSalida = y[i].HoraSalida;
						if (i == 0)
						{
							var x = 0;
							oServiceList.TiempoMuerto = x;
						}
						else
						{
							if (y[i].HoraIngreso != null && y[i - 1].HoraSalida != null)
							{
								var x = y[i].HoraIngreso.Value - y[i - 1].HoraSalida.Value;
								oServiceList.TiempoMuerto = x.Minutes;
							}
							else
							{
								oServiceList.TiempoMuerto = 0;
							}

						}



						Resultado.Add(oServiceList);

					}
					return Resultado;
				}

				//List<TiempoTrabajador> objData = query.ToList();
				//return objData;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportEvaOsteo> GetReportEvaOsteoSanMartin(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportEvaOsteo
								 {

									 Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaServicio = A.d_ServiceDate.Value,
									 FirmaDoctor = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaOsteo = ValoresComponente(pstrserviceId, Constants.EVA_OSTEO_ID)

						   select new ReportEvaOsteo
						   {
							   Trabajador = a.Trabajador,
							   FechaServicio = a.FechaServicio,
							   FirmaDoctor = a.FirmaDoctor,
							   EVA_OSTEO_ESCOLIOSIS_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ESCOLIOSIS_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ESCOLIOSIS_ID).v_Value1,
							   EVA_OSTEO_CIFOSIS_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CIFOSIS_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CIFOSIS_ID).v_Value1,
							   EVA_OSTEO_LORDOSIS_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LORDOSIS_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LORDOSIS_ID).v_Value1,
							   EVA_OSTEO_COMENTARIOS_1_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_COMENTARIOS_1_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_COMENTARIOS_1_ID).v_Value1,
							   EVA_OSTEO_FLEXION_HACIA_DELANTE_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_HACIA_DELANTE_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_HACIA_DELANTE_ID).v_Value1,
							   EVA_OSTEO_FLEXION_HACIA_DELANTE_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_HACIA_DELANTE_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_HACIA_DELANTE_DESC_ID).v_Value1,
							   EVA_OSTEO_HIPERTENSION_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_HIPERTENSION_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_HIPERTENSION_ID).v_Value1,
							   EVA_OSTEO_HIPERTENSION_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_HIPERTENSION_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_HIPERTENSION_DESC_ID).v_Value1,
							   EVA_OSTEO_FLEXION_LATERAL_IZQ_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_IZQ_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_IZQ_ID).v_Value1,
							   EVA_OSTEO_FLEXION_LATERAL_IZQ_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_IZQ_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_IZQ_DESC_ID).v_Value1,
							   EVA_OSTEO_FLEXION_LATERAL_DER_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_DER_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_DER_ID).v_Value1,
							   EVA_OSTEO_FLEXION_LATERAL_DER_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_DER_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FLEXION_LATERAL_DER_DESC_ID).v_Value1,
							   EVA_OSTEO_ROTACION_IZQUIERDO_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_IZQUIERDO_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_IZQUIERDO_ID).v_Value1,
							   EVA_OSTEO_ROTACION_IZQUIERDO_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_IZQUIERDO_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_IZQUIERDO_DESC_ID).v_Value1,
							   EVA_OSTEO_ROTACION_DERECHO_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_DERECHO_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_DERECHO_ID).v_Value1,
							   EVA_OSTEO_ROTACION_DERECHO_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_DERECHO_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ROTACION_DERECHO_DESC_ID).v_Value1,
							   EVA_OSTEO_COMENTARIOS_2_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_COMENTARIOS_2_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_COMENTARIOS_2_ID).v_Value1,
							   EVA_OSTEO_CORRIENDO_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CORRIENDO_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CORRIENDO_ID).v_Value1,
							   EVA_OSTEO_CORRIENDO_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CORRIENDO_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CORRIENDO_DESC_ID).v_Value1,
							   EVA_OSTEO_CAMINANDO_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CAMINANDO_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CAMINANDO_ID).v_Value1,
							   EVA_OSTEO_CAMINANDO_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CAMINANDO_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CAMINANDO_DESC_ID).v_Value1,
							   EVA_OSTEO_CUNCLILLA_3_MIN_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CUNCLILLA_3_MIN_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CUNCLILLA_3_MIN_ID).v_Value1,
							   EVA_OSTEO_CUNCLILLA_3_MIN_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CUNCLILLA_3_MIN_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CUNCLILLA_3_MIN_DESC_ID).v_Value1,
							   EVA_OSTEO_CODO_DER_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CODO_DER_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CODO_DER_ID).v_Value1,
							   EVA_OSTEO_CODO_IZQ_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CODO_IZQ_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CODO_IZQ_ID).v_Value1,
							   EVA_OSTEO_CODO_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CODO_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CODO_DESC_ID).v_Value1,
							   EVA_OSTEO_RODILLA_DER_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RODILLA_DER_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RODILLA_DER_ID).v_Value1,
							   EVA_OSTEO_RODILLA_IZQ_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RODILLA_IZQ_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RODILLA_IZQ_ID).v_Value1,
							   EVA_OSTEO_RODILLA_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RODILLA_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RODILLA_DESC_ID).v_Value1,
							   EVA_OSTEO_FUERZA_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FUERZA_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FUERZA_ID).v_Value1,
							   EVA_OSTEO_FUERZA_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FUERZA_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_FUERZA_DESC_ID).v_Value1,
							   EVA_OSTEO_ABDOMINAL_EXC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_EXC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_EXC_ID).v_Value1,
							   EVA_OSTEO_ABDOMINAL_BUE_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_BUE_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_BUE_ID).v_Value1,
							   EVA_OSTEO_ABDOMINAL_REG_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_REG_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_REG_ID).v_Value1,
							   EVA_OSTEO_ABDOMINAL_POB_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_POB_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_POB_ID).v_Value1,
							   EVA_OSTEO_ABDOMINAL_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_ABDOMINAL_DESC_ID).v_Value1,
							   EVA_OSTEO_CADERA_EXC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_EXC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_EXC_ID).v_Value1,
							   EVA_OSTEO_CADERA_BUE_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_BUE_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_BUE_ID).v_Value1,
							   EVA_OSTEO_CADERA_REG_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_REG_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_REG_ID).v_Value1,
							   EVA_OSTEO_CADERA_POB_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_POB_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_POB_ID).v_Value1,
							   EVA_OSTEO_CADERA_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_CADERA_DESC_ID).v_Value1,
							   EVA_OSTEO_MUSLO_EXC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_EXC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_EXC_ID).v_Value1,
							   EVA_OSTEO_MUSLO_BUE_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_BUE_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_BUE_ID).v_Value1,
							   EVA_OSTEO_MUSLO_REG_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_REG_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_REG_ID).v_Value1,
							   EVA_OSTEO_MUSLO_POB_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_POB_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_POB_ID).v_Value1,
							   EVA_OSTEO_MUSLO_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_MUSLO_DESC_ID).v_Value1,
							   EVA_OSTEO_LATERAL_EXC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_EXC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_EXC_ID).v_Value1,
							   EVA_OSTEO_LATERAL_BUE_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_BUE_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_BUE_ID).v_Value1,
							   EVA_OSTEO_LATERAL_REG_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_REG_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_REG_ID).v_Value1,
							   EVA_OSTEO_LATERAL_POB_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_POB_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_POB_ID).v_Value1,
							   EVA_OSTEO_LATERAL_DESC_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_DESC_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_LATERAL_DESC_ID).v_Value1,
							   EVA_OSTEO_RESULTADO_1_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RESULTADO_1_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RESULTADO_1_ID).v_Value1,
							   EVA_OSTEO_RESULTADO_2_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RESULTADO_2_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_RESULTADO_2_ID).v_Value1,
							   EVA_OSTEO_COMENTARIOS_ID = EvaOsteo.Count == 0 || EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_COMENTARIOS_ID) == null ? string.Empty : EvaOsteo.Find(p => p.v_ComponentFieldId == Constants.EVA_OSTEO_COMENTARIOS_ID).v_Value1,



							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alejandro new
		public List<ServiceComponentList> GetServiceComponentsByRequired(ref OperationResult pobjOperationResult, string pstrServiceId, SiNo requiredId)
		{

			int isDeleted = (int)SiNo.NO;
			int isRequired = (int)requiredId;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from A in dbContext.servicecomponent
							 join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
									  equals new { a = B.i_ParameterId, b = B.i_GroupId }
							 join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							 join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
									  equals new { a = D.i_ParameterId, b = D.i_GroupId }
							 join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							 join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
									  equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							 from F in F_join.DefaultIfEmpty()

							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted &&
								   A.i_IsRequiredId == isRequired

							 select new ServiceComponentList
							 {
								 v_ComponentId = A.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 v_ServiceComponentStatusName = B.v_Value1,
								 d_StartDate = A.d_StartDate.Value,
								 d_EndDate = A.d_EndDate.Value,
								 i_QueueStatusId = A.i_QueueStatusId.Value,
								 v_QueueStatusName = D.v_Value1,
								 ServiceStatusId = E.i_ServiceStatusId.Value,
								 v_Motive = E.v_Motive,
								 i_CategoryId = C.i_CategoryId,
								 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								 v_ServiceId = E.v_ServiceId,
								 v_ServiceComponentId = A.v_ServiceComponentId,
							 });

				var objData = query.AsEnumerable()
							 .Where(s => s.i_CategoryId != -1)
							 .GroupBy(x => x.i_CategoryId)
							 .Select(group => group.First());

				List<ServiceComponentList> obj = objData.ToList();

				obj.AddRange(query.Where(p => p.i_CategoryId == -1));

				var sql = (from sc in dbContext.servicecomponent
						   join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
						   where sc.v_ServiceId == pstrServiceId && sc.i_IsRequiredId == isRequired

						   select new ServiceComponentList
						   {
							   i_CategoryId = c.i_CategoryId,
							   v_ServiceComponentId = sc.v_ServiceComponentId,
							   v_ComponentId = sc.v_ComponentId,
							   i_IsRequiredId = sc.i_IsRequiredId
						   }).ToList();

				obj.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));
				sql.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

				foreach (var item in obj)
				{
					if (item.i_CategoryId == -1)  // No tiene consultorio / categoria
					{
						item.v_ServiceComponentConcatId = item.v_ServiceComponentId;
						item.v_ComponentConcatId = item.v_ComponentId;
					}
					else
					{
						var list = sql.FindAll(p => p.i_CategoryId == item.i_CategoryId);
						item.v_ServiceComponentConcatId = string.Join("|", list.Select(p => p.v_ServiceComponentId));
						item.v_ComponentConcatId = string.Join("|", list.Select(p => p.v_ComponentId));
					}

				}

				obj.Sort((x, y) => x.v_CategoryName.CompareTo(y.v_CategoryName));

				pobjOperationResult.Success = 1;
				return obj;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		// AMC new
		public List<Categoria> GetServiceComponentsByRequired_(ref OperationResult pobjOperationResult, string pstrServiceId, SiNo requiredId)
		{

			int isDeleted = (int)SiNo.NO;
			int isRequired = (int)requiredId;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				//var query = (from A in dbContext.component                           
				//             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId                            
				//             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
				//                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
				//             from F in F_join.DefaultIfEmpty()

				//             where                                
				//                   A.i_IsDeleted == isDeleted

				//             select new Categoria
				//             {
				//                 v_ComponentId = A.v_ComponentId,
				//                 v_ComponentName = C.v_Name,                                
				//                 i_CategoryId = C.i_CategoryId,
				//                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1

				//             }).ToList();

				var query = (from A in dbContext.servicecomponent
							 join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
									  equals new { a = B.i_ParameterId, b = B.i_GroupId }
							 join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
							 join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
									  equals new { a = D.i_ParameterId, b = D.i_GroupId }
							 join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
							 join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
									  equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							 from F in F_join.DefaultIfEmpty()

							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted &&
								   A.i_IsRequiredId == isRequired

							 select new Categoria
							 {
								 v_ComponentId = A.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 //i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 //v_ServiceComponentStatusName = B.v_Value1,
								 //d_StartDate = A.d_StartDate.Value,
								 //d_EndDate = A.d_EndDate.Value,
								 //i_QueueStatusId = A.i_QueueStatusId.Value,
								 //v_QueueStatusName = D.v_Value1,
								 //ServiceStatusId = E.i_ServiceStatusId.Value,
								 //v_Motive = E.v_Motive,
								 i_CategoryId = C.i_CategoryId,
								 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								 //v_ServiceId = E.v_ServiceId,
								 v_ServiceComponentId = A.v_ServiceComponentId,
							 });




				var objData = query.AsEnumerable()
						   .Where(s => s.i_CategoryId != -1)
						   .GroupBy(x => x.i_CategoryId)
						   .Select(group => group.First());


				List<Categoria> obj = objData.ToList();

				Categoria objCategoriaList;
				List<Categoria> Lista = new List<Categoria>();

				//int CategoriaId_Old = 0;
				for (int i = 0; i < obj.Count(); i++)
				{
					objCategoriaList = new Categoria();

					objCategoriaList.i_CategoryId = obj[i].i_CategoryId.Value;
					objCategoriaList.v_CategoryName = obj[i].v_CategoryName;
					var x = query.ToList().FindAll(p => p.i_CategoryId == obj[i].i_CategoryId.Value);

					x.Sort((z, y) => z.v_ComponentName.CompareTo(y.v_ComponentName));
					ComponentDetailList objComponentDetailList;
					List<ComponentDetailList> ListaComponentes = new List<ComponentDetailList>();
					foreach (var item in x)
					{
						objComponentDetailList = new ComponentDetailList();

						objComponentDetailList.v_ComponentId = item.v_ComponentId;
						objComponentDetailList.v_ComponentName = item.v_ComponentName;
						objComponentDetailList.v_ServiceComponentId = item.v_ServiceComponentId;
						ListaComponentes.Add(objComponentDetailList);
					}
					objCategoriaList.Componentes = ListaComponentes;

					Lista.Add(objCategoriaList);

				}



				pobjOperationResult.Success = 1;
				return Lista;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}


		public List<Categoria> GetAllComponents(ref OperationResult pobjOperationResult)
		{

			int isDeleted = (int)SiNo.NO;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				//var query = (from A in dbContext.component                           
				//             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId                            
				//             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
				//                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
				//             from F in F_join.DefaultIfEmpty()

				//             where                                
				//                   A.i_IsDeleted == isDeleted

				//             select new Categoria
				//             {
				//                 v_ComponentId = A.v_ComponentId,
				//                 v_ComponentName = C.v_Name,                                
				//                 i_CategoryId = C.i_CategoryId,
				//                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1

				//             }).ToList();

				var query = (from C in dbContext.component
							 join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
									  equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
							 from F in F_join.DefaultIfEmpty()

							 where C.i_IsDeleted == isDeleted


							 select new Categoria
							 {
								 v_ComponentId = C.v_ComponentId,
								 v_ComponentName = C.v_Name,
								 //i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
								 //v_ServiceComponentStatusName = B.v_Value1,
								 //d_StartDate = A.d_StartDate.Value,
								 //d_EndDate = A.d_EndDate.Value,
								 //i_QueueStatusId = A.i_QueueStatusId.Value,
								 //v_QueueStatusName = D.v_Value1,
								 //ServiceStatusId = E.i_ServiceStatusId.Value,
								 //v_Motive = E.v_Motive,
								 i_CategoryId = C.i_CategoryId,
								 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
								 //v_ServiceId = E.v_ServiceId,
								 //v_ServiceComponentId = A.v_ServiceComponentId,
							 });




				var objData = query.AsEnumerable()
						   .Where(s => s.i_CategoryId != -1)
						   .GroupBy(x => x.i_CategoryId)
						   .Select(group => group.First());


				List<Categoria> obj = objData.ToList();

				Categoria objCategoriaList;
				List<Categoria> Lista = new List<Categoria>();

				//int CategoriaId_Old = 0;
				for (int i = 0; i < obj.Count(); i++)
				{
					objCategoriaList = new Categoria();

					objCategoriaList.i_CategoryId = obj[i].i_CategoryId.Value;
					objCategoriaList.v_CategoryName = obj[i].v_CategoryName;
					var x = query.ToList().FindAll(p => p.i_CategoryId == obj[i].i_CategoryId.Value);

					x.Sort((z, y) => z.v_ComponentName.CompareTo(y.v_ComponentName));
					ComponentDetailList objComponentDetailList;
					List<ComponentDetailList> ListaComponentes = new List<ComponentDetailList>();
					foreach (var item in x)
					{
						objComponentDetailList = new ComponentDetailList();

						objComponentDetailList.v_ComponentId = item.v_ComponentId;
						objComponentDetailList.v_ComponentName = item.v_ComponentName;
						//objComponentDetailList.v_ServiceComponentId = item.v_ServiceComponentId;
						ListaComponentes.Add(objComponentDetailList);
					}
					objCategoriaList.Componentes = ListaComponentes;

					Lista.Add(objCategoriaList);

				}



				pobjOperationResult.Success = 1;
				return Lista;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		// AMC new
		public List<multimediafileList> GetFilePdfsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
		{

			int isDeleted = (int)SiNo.NO;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var query = (from A in dbContext.service
							 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
							 join C in dbContext.servicecomponentmultimedia on B.v_ServiceComponentId equals C.v_ServiceComponentId
							 join D in dbContext.multimediafile on C.v_MultimediaFileId equals D.v_MultimediaFileId

							 where A.v_ServiceId == pstrServiceId &&
								   A.i_IsDeleted == isDeleted && B.i_IsDeleted == isDeleted && D.i_IsDeleted == isDeleted

							 select new multimediafileList
							 {
								 v_MultimediaFileId = D.v_MultimediaFileId,
								 v_FileName = D.v_FileName,
								 b_File = D.b_File,

							 });

				List<multimediafileList> obj = query.ToList();

				List<multimediafileList> objFinal = obj.FindAll(p => p.v_FileName.Contains(".pdf"));

				pobjOperationResult.Success = 1;
				return objFinal;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		//AMC
		public List<ReporteAramark> ReporteAramark(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{


					#region Antecedentes

					var varDxReco = DevolverJerarquiaDxRecomendaciones(FechaInicio, FechaFin);
					var varAntecedentes = DevolverTodosAntecedentes(FechaInicio, FechaFin);
					var varValores = DevolverValorCampoPorServicio(FechaInicio, FechaFin);
					var varDx = DevolverJerarquiaDx(FechaInicio, FechaFin);


					#endregion


					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
									from D in C_join.DefaultIfEmpty()

									join E in dbContext.location on C.v_CustomerOrganizationId equals E.v_OrganizationId

									join J1 in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 118 }
											  equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
									from J1 in J1_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
									   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()

									where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin && A.i_ServiceStatusId == (int)ServiceStatus.Culminado

									select new ReporteAramark
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										FechaNacimiento = B.d_Birthdate.Value,

										Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
										TipoEmo = J1.v_Value1,
										PuestoTrabajo = B.v_CurrentOccupation + " / " + E.v_Name,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_EmployerLocationId,
										v_CustomerOrganizationName = D.v_Name,
										FechaServicioDate = A.d_ServiceDate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
										Aptitud = J4.v_Value1,
										FechaVencimientoEmo = A.d_GlobalExpirationDate.Value

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					var sql = (from a in objEntity.ToList()


							   #region Subquerys

							   //// Subquerys ************************************************************************
							   let age = GetAge(a.FechaNacimiento.Value)
							   let EXAMEN_FISICO_7C_HALLAZGOS_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor
							   let EXAMEN_FISICO_HALLAZGOS_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor


							   let GRUPO_SANGUINEO_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).ValorName
							   let FACTOR_SANGUINEO_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).ValorName

							   let ExamenOrinaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID)
							   let ExamenOrina1 = ExamenOrinaDxs != null ? string.Join(", ", ExamenOrinaDxs.Select(p => p.Descripcion)) : "Normal"


							   let EKGDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID)
							   let EKG = EKGDxs != null ? string.Join("/ ", EKGDxs.Select(p => p.Descripcion)) : "Normal"


							   let OftalmoDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N002-DD000000155" || o.IdDeseases == "N009-DD000000102" || o.IdDeseases == "N009-DD000000143")
							   let Oftalmo1 = OftalmoDxs != null ? string.Join("/ ", OftalmoDxs.Select(p => p.Descripcion)) : "Normal"

							   let TestIshiharaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N002-DD000000159")
							   let TestIshihara1 = TestIshiharaDxs != null ? string.Join("/ ", TestIshiharaDxs.Select(p => p.Descripcion)) : "---"

							   let EnfOcularesDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases != "N002-DD000000155" || o.IdDeseases != "N009-DD000000102" || o.IdDeseases != "N009-DD000000143" || o.IdDeseases != "N009-DD000000159" && o.IdComponente == Constants.OFTALMOLOGIA_ID)
							   let EnfOculares = EnfOcularesDxs != null ? string.Join("/ ", EnfOcularesDxs.Select(p => p.Descripcion)) : "---"


							   let AudiometriaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.AUDIOMETRIA_ID)
							   let Audiometria = AudiometriaDxs != null ? string.Join("/ ", AudiometriaDxs.Select(p => p.Descripcion)) : "---"

							   let RxDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.RX_TORAX_ID)
							   let Rx = RxDxs != null ? string.Join("/ ", RxDxs.Select(p => p.Descripcion)) : "---"


							   let PSICOLOGIA_APTITUD_PSICOLOGICA_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA_ID).Valor
							   let PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID).Valor


							   #endregion


							   select new ReporteAramark
							   {
								   IdServicio = a.IdServicio,
								   IdProtocolId = a.IdProtocolId,
								   IdTrabajador = a.IdTrabajador,
								   FechaNacimiento = a.FechaNacimiento,
								   //********************************************

								   Trabajador = a.Trabajador,
								   EdadTrabajador = age,
								   TipoEmo = a.TipoEmo,
								   PuestoTrabajo = a.PuestoTrabajo,
								   AreaLaboral = "Flata implementar",
								   v_CustomerOrganizationName = a.v_CustomerOrganizationName,
								   FechaServicioDate = a.FechaServicioDate,
								   FechaVencimientoEmo = DateTime.Now, //"Flata implementar",
								   GeneroTrabajador = a.GeneroTrabajador,
								   AntecedentePersonal1 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[0].v_DiseasesName,
								   AntecedentePersonal2 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[1].v_DiseasesName,
								   AntecedentePersonal3 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[2].v_DiseasesName,
								   AntecedentePersonal4 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[3].v_DiseasesName,

								   AntecedenteFamiliar1 = "(Padre) " + DevolverAntecedentesFamiliares(a.IdTrabajador, "Padre") + "  (Madre) " + DevolverAntecedentesFamiliares(a.IdTrabajador, "Madre"),
								   AntecedenteFamiliar2 = "(Hermanos) " + DevolverAntecedentesFamiliares(a.IdTrabajador, "Hermanos"),
								   AntecedenteFamiliar3 = "(Esposo(a)) " + DevolverAntecedentesFamiliares(a.IdTrabajador, "Esposo(a)"),

								   PresionSistolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor,
								   PresionDiastolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor,

								   DXPA = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Descripcion : "Normal",

								   FC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID).Valor,
								   FR = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID).Valor,
								   Peso = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,
								   Talla = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
								   IMC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
								   ExamenFisico = EXAMEN_FISICO_7C_HALLAZGOS_ID + " / " + EXAMEN_FISICO_HALLAZGOS_ID,
								   SOMA1 = "---",
								   SOMA2 = "---",
								   SOMA3 = "---",
								   Hemoglobina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor,
								   Hematocrito = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO).Valor,
								   Plaquetas = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS).Valor,
								   Hemograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGLOBINA_HEMOGRAMA_HEMOGLOBINA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGLOBINA_HEMOGRAMA_HEMOGLOBINA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGLOBINA_HEMOGRAMA_HEMOGLOBINA).Valor,
								   GrupoSanguineoFactor = GRUPO_SANGUINEO_ID + " / " + FACTOR_SANGUINEO_ID,
								   Glucosa = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Valor,
								   PruebaToleranciaGlucosa = "---",
								   HDLColesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor,
								   LDLColesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_LDL_ID && o.IdCampo == Constants.COLESTEROL_LDL_BIOQUIMICA_COLESTEROL_LDL) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_LDL_ID && o.IdCampo == Constants.COLESTEROL_LDL_BIOQUIMICA_COLESTEROL_LDL).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_LDL_ID && o.IdCampo == Constants.COLESTEROL_LDL_BIOQUIMICA_COLESTEROL_LDL).Valor,
								   ColesterolTotal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_LDL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_LDL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_LDL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor,
								   Triglicerido = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS).Valor,
								   TGO = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_TGO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_TGO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_TGO_ID).Valor,
								   TGP = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_TGP_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_TGP_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_TGP_ID).Valor,

								   GGTP = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_GAMMA_GLUTAMIL_TRANSPEPTIDASA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_GAMMA_GLUTAMIL_TRANSPEPTIDASA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_GAMMA_GLUTAMIL_TRANSPEPTIDASA_ID).Valor,
								   BilirrubinaTotal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_TOTAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_TOTAL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_TOTAL_ID).Valor,
								   BilirrubinaDirecta = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_DIRECTA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_DIRECTA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_DIRECTA_ID).Valor,
								   BilirrubinaIndirecta = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_INDIRECTA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_INDIRECTA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HEPATICO_ID && o.IdCampo == Constants.PERFIL_HEPATICO_BILIRRUBINA_INDIRECTA_ID).Valor,

								   Creatina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.CREATININA_ID && o.IdCampo == Constants.CREATININA_BIOQUIMICA_CREATININA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.CREATININA_ID && o.IdCampo == Constants.CREATININA_BIOQUIMICA_CREATININA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.CREATININA_ID && o.IdCampo == Constants.CREATININA_BIOQUIMICA_CREATININA).Valor,
								   AcidoUrico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TEST_ESTEREOPSIS_ID && o.IdCampo == Constants.ACIDO_URICO_BIOQUIMICA_ACIDO_URICO) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TEST_ESTEREOPSIS_ID && o.IdCampo == Constants.ACIDO_URICO_BIOQUIMICA_ACIDO_URICO).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TEST_ESTEREOPSIS_ID && o.IdCampo == Constants.ACIDO_URICO_BIOQUIMICA_ACIDO_URICO).Valor,

								   Urea = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.UREA_ID && o.IdCampo == Constants.UREA_BIOQUIMICA_UREA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.UREA_ID && o.IdCampo == Constants.UREA_BIOQUIMICA_UREA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.UREA_ID && o.IdCampo == Constants.UREA_BIOQUIMICA_UREA).Valor,
								   TificoO = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O).Valor,
								   tificoH = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H).Valor,
								   ParatificoA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A).Valor,
								   ParatificoB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B).Valor,
								   Brucella = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AGLUTINACIONES_LAMINA_ID && o.IdCampo == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA).Valor,
								   HepatitisAIGM = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEPATITIS_A_ID && o.IdCampo == Constants.HEPATITIS_A_REACTIVOS_HEPATITIS_A) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEPATITIS_A_ID && o.IdCampo == Constants.HEPATITIS_A_REACTIVOS_HEPATITIS_A).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEPATITIS_A_ID && o.IdCampo == Constants.HEPATITIS_A_REACTIVOS_HEPATITIS_A).Valor,
								   VDRL1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VDRL_ID && o.IdCampo == Constants.LABORATORIO_VDRL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VDRL_ID && o.IdCampo == Constants.LABORATORIO_VDRL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VDRL_ID && o.IdCampo == Constants.LABORATORIO_VDRL_ID).ValorName,


								   Coprocultivo = "---",
								   MicroOrgGramPos = "---",
								   MicroOrgGramNeg = "---",
								   Hongos = "---",
								   Levaduras = "---",
								   Hifas = "---",
								   PseudoHifas = "---",


								   ExParasitologico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PARASITOLOGICO_SIMPLE_ID && o.IdCampo == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PARASITOLOGICO_SIMPLE_ID && o.IdCampo == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PARASITOLOGICO_SIMPLE_ID && o.IdCampo == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS).Valor,
								   BK = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.BK_DIRECTO_ID && o.IdCampo == Constants.BK_DIRECTO_MICROBIOLOGICO_RESULTADOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.BK_DIRECTO_ID && o.IdCampo == Constants.BK_DIRECTO_MICROBIOLOGICO_RESULTADOS).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.BK_DIRECTO_ID && o.IdCampo == Constants.BK_DIRECTO_MICROBIOLOGICO_RESULTADOS).Valor,

								   ExOrina1 = ExamenOrina1,

								   CocainaCualitativo = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID && o.IdCampo == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID && o.IdCampo == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID && o.IdCampo == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA).ValorName,
								   CannabinoidesCualitativo = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID && o.IdCampo == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID && o.IdCampo == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID && o.IdCampo == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA).ValorName,
								   BHCG = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.SUB_UNIDAD_BETA_CUALITATIVO_ID && o.IdCampo == Constants.SUB_UNIDAD_BETA_CUALITATIVO_RESULTADO) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.SUB_UNIDAD_BETA_CUALITATIVO_ID && o.IdCampo == Constants.SUB_UNIDAD_BETA_CUALITATIVO_RESULTADO).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.SUB_UNIDAD_BETA_CUALITATIVO_ID && o.IdCampo == Constants.SUB_UNIDAD_BETA_CUALITATIVO_RESULTADO).ValorName,
								   PSA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTIGENO_PROSTATICO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTIGENO_PROSTATICO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTIGENO_PROSTATICO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR).Valor,
								   EKG1 = EKG,
								   PruebaEsfuerzo = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PRUEBA_ESFUERZO_ID && o.IdCampo == Constants.PRUEBA_ESFUERZO_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PRUEBA_ESFUERZO_ID && o.IdCampo == Constants.PRUEBA_ESFUERZO_DESCRIPCION_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PRUEBA_ESFUERZO_ID && o.IdCampo == Constants.PRUEBA_ESFUERZO_DESCRIPCION_ID).Valor,

								   Oftalmo1 = Oftalmo1,

								   TestIshihara1 = TestIshihara1,
								   EnfermedadesOculares = EnfOculares,
								   AudiometriaOI1 = Audiometria,
								   AudiometriaOD1 = Audiometria,
								   OtoscopiaOD = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_MAMA_ID && o.IdCampo == Constants.AUDIOMETRIA_OTOSCOPIA_OD) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_MAMA_ID && o.IdCampo == Constants.AUDIOMETRIA_OTOSCOPIA_OD).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_MAMA_ID && o.IdCampo == Constants.AUDIOMETRIA_OTOSCOPIA_OD).Valor,
								   OtoscopiaOI = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_MAMA_ID && o.IdCampo == Constants.AUDIOMETRIA_OTOSCOPIA_OI) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_MAMA_ID && o.IdCampo == Constants.AUDIOMETRIA_OTOSCOPIA_OI).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_MAMA_ID && o.IdCampo == Constants.AUDIOMETRIA_OTOSCOPIA_OI).Valor,
								   Espirometria1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ESPIROMETRIA_ID && o.IdCampo == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_OBSERVACION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ESPIROMETRIA_ID && o.IdCampo == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_OBSERVACION).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ESPIROMETRIA_ID && o.IdCampo == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_OBSERVACION).Valor,
								   RxTorax1 = Rx,
								   Odontologia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
								   DxPsicologia = PSICOLOGIA_APTITUD_PSICOLOGICA_ID + " / " + PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID,

								   EcografiaMamas = "---",
								   PAP = "---",
								   Mamografias = "---",

								   EcografiaHigadoBiliares = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_ABDOMINAL_ID && o.IdCampo == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_ABDOMINAL_ID && o.IdCampo == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_ABDOMINAL_ID && o.IdCampo == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES).Valor,
								   EcografiaRenalViasUrinarias = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_RENAL_ID && o.IdCampo == Constants.ECOGRAFIA_RENAL_CONCLUSIONES) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_RENAL_ID && o.IdCampo == Constants.ECOGRAFIA_RENAL_CONCLUSIONES).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_RENAL_ID && o.IdCampo == Constants.ECOGRAFIA_RENAL_CONCLUSIONES).Valor,
								   EcografiaProstatica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.INFORME_ECOGRAFICO_PROSTATA_ID && o.IdCampo == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.INFORME_ECOGRAFICO_PROSTATA_ID && o.IdCampo == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.INFORME_ECOGRAFICO_PROSTATA_ID && o.IdCampo == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES).Valor,
								   ExamenAlturaEstructural = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ALTURA_ESTRUCTURAL_ID && o.IdCampo == Constants.ALTURA_ESTRUCTURAL_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ALTURA_ESTRUCTURAL_ID && o.IdCampo == Constants.ALTURA_ESTRUCTURAL_DESCRIPCION_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ALTURA_ESTRUCTURAL_ID && o.IdCampo == Constants.ALTURA_ESTRUCTURAL_DESCRIPCION_ID).Valor,
								   Psicosensometrico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PETRINOVIC_ID && o.IdCampo == Constants.PETRINOVIC_RESULTADO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PETRINOVIC_ID && o.IdCampo == Constants.PETRINOVIC_RESULTADO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PETRINOVIC_ID && o.IdCampo == Constants.PETRINOVIC_RESULTADO_ID).Valor,

								   Hallazgo1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[0].Descripcion,
								   Hallazgo2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[1].Descripcion,
								   Hallazgo3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[2].Descripcion,
								   Hallazgo4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[3].Descripcion,
								   Hallazgo5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[4].Descripcion,
								   Hallazgo6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[5].Descripcion,
								   Hallazgo7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[6].Descripcion,
								   Hallazgo8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[7].Descripcion,


								   Recomendacion1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[8].Descripcion,
								   Recomendacion2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[9].Descripcion,
								   Recomendacion3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[10].Descripcion,
								   Recomendacion4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[11].Descripcion,
								   Recomendacion5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[12].Descripcion,
								   Recomendacion6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[13].Descripcion,
								   Recomendacion7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[14].Descripcion,
								   Recomendacion8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[15].Descripcion,
								   Recomendacion9 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[16].Descripcion,
								   Recomendacion10 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[17].Descripcion,
								   Recomendacion11 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[18].Descripcion,
								   Recomendacion12 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[19].Descripcion,
								   Recomendacion13 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[20].Descripcion,
								   Recomendacion14 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[21].Descripcion,

								   Observaciones = "---",
								   Aptitud = a.Aptitud,

								   Restriccion1 = "falta implementar",
								   Restriccion2 = "falta implementar",
								   Restriccion3 = "falta implementar",
								   Restriccion4 = "falta implementar",
								   Restriccion5 = "falta implementar",
								   Restriccion6 = "falta implementar",

								   RAC1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC1_ID && o.IdCampo == Constants.RAC1_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC1_ID && o.IdCampo == Constants.RAC1_RESULTADO_ID).Valor,
								   RAC2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC2_ID && o.IdCampo == Constants.RAC2_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC2_ID && o.IdCampo == Constants.RAC2_RESULTADO_ID).Valor,
								   RAC3 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC3_ID && o.IdCampo == Constants.RAC3_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC3_ID && o.IdCampo == Constants.RAC3_RESULTADO_ID).Valor,
								   RAC4 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC4_ID && o.IdCampo == Constants.RAC4_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC4_ID && o.IdCampo == Constants.RAC4_RESULTADO_ID).Valor,
								   RAC5 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC5_ID && o.IdCampo == Constants.RAC5_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC5_ID && o.IdCampo == Constants.RAC5_RESULTADO_ID).Valor,
								   RAC6 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC6_ID && o.IdCampo == Constants.RAC6_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC6_ID && o.IdCampo == Constants.RAC6_RESULTADO_ID).Valor,
								   RAC7 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC7_ID && o.IdCampo == Constants.RAC7_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC7_ID && o.IdCampo == Constants.RAC7_RESULTADO_ID).Valor,
								   RAC8 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC8_ID && o.IdCampo == Constants.RAC8_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC8_ID && o.IdCampo == Constants.RAC8_RESULTADO_ID).Valor,
								   RAC9 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC9_ID && o.IdCampo == Constants.RAC9_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC9_ID && o.IdCampo == Constants.RAC9_RESULTADO_ID).Valor,
								   RAC10 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC10_ID && o.IdCampo == Constants.RAC10_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC10_ID && o.IdCampo == Constants.RAC10_RESULTADO_ID).Valor,
								   RAC11 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC11_ID && o.IdCampo == Constants.RAC11_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC11_ID && o.IdCampo == Constants.RAC11_RESULTADO_ID).Valor,

								   RACPQ = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC12_ID && o.IdCampo == Constants.RAC12_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC12_ID && o.IdCampo == Constants.RAC12_RESULTADO_ID).Valor,


							   }).ToList();

					return sql;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//AMC
		public List<ReporteMasterClinico> ReporteMasterClinico(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{


					#region Antecedentes

					var varDxReco = DevolverJerarquiaDxRecomendaciones(FechaInicio, FechaFin);
					var varAntecedentes = DevolverTodosAntecedentes(FechaInicio, FechaFin);
					var varValores = DevolverValorCampoPorServicio(FechaInicio, FechaFin);
					var varDx = DevolverJerarquiaDx(FechaInicio, FechaFin);



					#endregion


					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
									from D in C_join.DefaultIfEmpty()

									join E in dbContext.location on C.v_CustomerOrganizationId equals E.v_OrganizationId

									join J1 in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 118 }
											  equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
									from J1 in J1_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
									   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()

									where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin && A.i_ServiceStatusId == (int)ServiceStatus.Culminado

									select new ReporteMasterClinico
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										FechaNacimiento = B.d_Birthdate.Value,

										Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
										TipoEmo = J1.v_Value1,
										PuestoTrabajo = B.v_CurrentOccupation + " / " + E.v_Name,
										v_CustomerOrganizationName = D.v_Name,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_EmployerLocationId,
										FechaServicioDate = A.d_ServiceDate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
										Aptitud = J4.v_Value1

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					var sql = (from a in objEntity.ToList()

							   #region Subquerys

							   //// Subquerys ************************************************************************
							   let age = GetAge(a.FechaNacimiento.Value)
							   let GRUPO_SANGUINEO_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).Valor
							   let FACTOR_SANGUINEO_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).Valor

							   let ObsHiperArtDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N009-DD000000447" || o.IdDeseases == "N009-DD000000041" || o.IdDeseases == "M002-DD000000019" || o.IdDeseases == "N002-DD000000018" || o.IdDeseases == "N002-DD000000009" || o.IdDeseases == "N002-DD000000008")
							   let ObsHiperArt = ObsHiperArtDxs == null ? string.Join("/ ", ObsHiperArtDxs.Select(p => p.Descripcion)) : "---"

							   let ObsObesidadDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N009-DD000000035" || o.IdDeseases == "N002-DD000000090" || o.IdDeseases == "M002-DD000000017" || o.IdDeseases == "N002-DD000000006" || o.IdDeseases == "N002-DD000000003" || o.IdDeseases == "N002-DD000000002" || o.IdDeseases == "M002-DD000000001" || o.IdDeseases == "N009-DD000000033")
							   let ObsObesidad = ObsObesidadDxs == null ? string.Join("/ ", ObsObesidadDxs.Select(p => p.Descripcion)) : "---"

							   let ObsDislipidemiaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N009-DD000000175" || o.IdDeseases == "N002-DD000000107" || o.IdDeseases == "N009-DD000000276" || o.IdDeseases == "N009-DD000000249" || o.IdDeseases == "N009-DD000000211")
							   let Dislipidemia = ObsDislipidemiaDxs == null ? string.Join("/ ", ObsDislipidemiaDxs.Select(p => p.Descripcion)) : "---"

							   let ObsTBCDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N009-DD000000233" || o.IdDeseases == "N002-DD000000253")
							   let TBC = ObsTBCDxs != null ? string.Join("/ ", ObsTBCDxs.Select(p => p.Descripcion)) : "---"

							   let ObsAudiometriaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases != "N009-DD000000423" || o.IdDeseases != "N009-DD000000422" || o.IdDeseases != "N002-DD000000145" && o.IdComponente == Constants.AUDIOMETRIA_ID)
							   let Audiometria = ObsAudiometriaDxs != null ? string.Join("/ ", ObsAudiometriaDxs.Select(p => p.Descripcion)) : "---"

							   let ObsDiabetesDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N009-DD000000243" || o.IdDeseases != "N009-DD000000177" || o.IdDeseases == "N002-DD000000145" || o.IdDeseases == "M002-DD000000115" || o.IdDeseases == "N002-DD000000106" || o.IdDeseases == "N002-DD000000055")
							   let Diabtetes = ObsDiabetesDxs != null ? string.Join("/ ", ObsDiabetesDxs.Select(p => p.Descripcion)) : "---"
							   #endregion

							   select new ReporteMasterClinico
							   {
								   IdServicio = a.IdServicio,
								   IdProtocolId = a.IdProtocolId,
								   IdTrabajador = a.IdTrabajador,
								   FechaNacimiento = a.FechaNacimiento,
								   //********************************************

								   //Estatus
								   Trabajador = a.Trabajador,
								   EdadTrabajador = age,
								   TipoEmo = a.TipoEmo,
								   PuestoTrabajo = a.PuestoTrabajo,
								   LugarExamen = GetNameMedicalCenter(),
								   v_CustomerOrganizationName = a.v_CustomerOrganizationName,
								   FechaServicioDate = a.FechaServicioDate,
								   FechaVencimientoEmo = DateTime.Now, //"Flata implementar",
								   GeneroTrabajador = a.GeneroTrabajador,

								   Peso = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,
								   Talla = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
								   IMC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
								   GrupoSanguineo = GRUPO_SANGUINEO_ID,
								   FactorSanguineo = FACTOR_SANGUINEO_ID,
								   Aptitud = a.Aptitud,
								   Hallazgo1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[0].Descripcion,
								   Hallazgo2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[1].Descripcion,
								   Hallazgo3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[2].Descripcion,
								   Hallazgo4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[3].Descripcion,
								   Hallazgo5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[4].Descripcion,
								   Hallazgo6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[5].Descripcion,
								   Hallazgo7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[6].Descripcion,
								   Hallazgo8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[7].Descripcion,
								   ObsHiperArterial = ObsHiperArt,
								   ObsObesidad = ObsObesidad,
								   ObsDislipidemina = Dislipidemia,
								   ObsTbc = TBC,
								   ObsHipoacusia = Audiometria,
								   ObsPolicitemia = "---",
								   ObsDiabetes = Diabtetes,
								   Restriccion1 = "falta implementar",
								   Restriccion2 = "falta implementar",
								   Restriccion3 = "falta implementar",
								   Restriccion4 = "falta implementar",
								   Restriccion5 = "falta implementar",
								   Restriccion6 = "falta implementar",
								   Restriccion7 = "falta implementar",
								   Restriccion8 = "falta implementar",
								   Restriccion9 = "falta implementar",

								   Recomendacion1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[8].Descripcion,
								   Recomendacion2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[9].Descripcion,
								   Recomendacion3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[10].Descripcion,
								   Recomendacion4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[11].Descripcion,
								   Recomendacion5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[12].Descripcion,
								   Recomendacion6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[13].Descripcion,
								   Recomendacion7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[14].Descripcion,
								   Recomendacion8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[15].Descripcion,
								   Recomendacion9 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[16].Descripcion,
								   Recomendacion10 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[17].Descripcion,
								   Recomendacion11 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[18].Descripcion,
								   Recomendacion12 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[19].Descripcion,
								   Recomendacion13 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[20].Descripcion,
								   Recomendacion14 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[21].Descripcion,

								   ElectroEncefalograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROENCEFALOGRAMA_ID && o.IdCampo == Constants.ELECTROENCEFALOGRAMA_CONCLUSIONES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROENCEFALOGRAMA_ID && o.IdCampo == Constants.ELECTROENCEFALOGRAMA_CONCLUSIONES_ID).Valor == "0.00" ? "Normal" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROENCEFALOGRAMA_ID && o.IdCampo == Constants.ELECTROENCEFALOGRAMA_CONCLUSIONES_ID).Valor,
								   PruebaEsfuerzo = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PRUEBA_ESFUERZO_ID && o.IdCampo == Constants.PRUEBA_ESFUERZO_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PRUEBA_ESFUERZO_ID && o.IdCampo == Constants.PRUEBA_ESFUERZO_DESCRIPCION_ID).Valor == "0.00" ? "Normal" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PRUEBA_ESFUERZO_ID && o.IdCampo == Constants.PRUEBA_ESFUERZO_DESCRIPCION_ID).Valor,
								   ExamenNeurologico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EVA_NEUROLOGICA_ID && o.IdCampo == Constants.EVA_NEUROLOGICA_CONCLUSION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EVA_NEUROLOGICA_ID && o.IdCampo == Constants.EVA_NEUROLOGICA_CONCLUSION_ID).Valor == "0.00" ? "Normal" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EVA_NEUROLOGICA_ID && o.IdCampo == Constants.EVA_NEUROLOGICA_CONCLUSION_ID).Valor,
								   RAC1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC1_ID && o.IdCampo == Constants.RAC1_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC1_ID && o.IdCampo == Constants.RAC1_RESULTADO_ID).Valor,
								   RAC2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC2_ID && o.IdCampo == Constants.RAC2_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC2_ID && o.IdCampo == Constants.RAC2_RESULTADO_ID).Valor,
								   RAC3 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC3_ID && o.IdCampo == Constants.RAC3_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC3_ID && o.IdCampo == Constants.RAC3_RESULTADO_ID).Valor,
								   RAC4 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC4_ID && o.IdCampo == Constants.RAC4_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC4_ID && o.IdCampo == Constants.RAC4_RESULTADO_ID).Valor,
								   RAC5 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC5_ID && o.IdCampo == Constants.RAC5_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC5_ID && o.IdCampo == Constants.RAC5_RESULTADO_ID).Valor,
								   RAC6 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC6_ID && o.IdCampo == Constants.RAC6_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC6_ID && o.IdCampo == Constants.RAC6_RESULTADO_ID).Valor,
								   RAC7 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC7_ID && o.IdCampo == Constants.RAC7_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC7_ID && o.IdCampo == Constants.RAC7_RESULTADO_ID).Valor,
								   RAC8 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC8_ID && o.IdCampo == Constants.RAC8_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC8_ID && o.IdCampo == Constants.RAC8_RESULTADO_ID).Valor,
								   RAC9 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC9_ID && o.IdCampo == Constants.RAC9_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC9_ID && o.IdCampo == Constants.RAC9_RESULTADO_ID).Valor,
								   RAC10 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC10_ID && o.IdCampo == Constants.RAC10_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC10_ID && o.IdCampo == Constants.RAC10_RESULTADO_ID).Valor,
								   RAC11 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC11_ID && o.IdCampo == Constants.RAC11_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC11_ID && o.IdCampo == Constants.RAC11_RESULTADO_ID).Valor,

								   RACPQ = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC12_ID && o.IdCampo == Constants.RAC12_RESULTADO_ID) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RAC12_ID && o.IdCampo == Constants.RAC12_RESULTADO_ID).Valor,


								   Tetano1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_DIFTERIA && o.IdCampo == Constants.VACUNA_DIFTERIA_FECHA) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_DIFTERIA && o.IdCampo == Constants.VACUNA_DIFTERIA_FECHA).Valor,
								   Tetano2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_DIFTERIA && o.IdCampo == Constants.VACUNA_DIFTERIA_FECHA_2) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_DIFTERIA && o.IdCampo == Constants.VACUNA_DIFTERIA_FECHA_2).Valor,
								   Tetano3 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_DIFTERIA && o.IdCampo == Constants.VACUNA_DIFTERIA_FECHA_3) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_DIFTERIA && o.IdCampo == Constants.VACUNA_DIFTERIA_FECHA_3).Valor,
								   HepB1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNAS_HEPATITIS_B && o.IdCampo == Constants.VACUNAS_HEPATITIS_B_FECHA) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNAS_HEPATITIS_B && o.IdCampo == Constants.VACUNAS_HEPATITIS_B_FECHA).Valor,
								   HepB2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNAS_HEPATITIS_B && o.IdCampo == Constants.VACUNAS_HEPATITIS_B_FECHA_2) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNAS_HEPATITIS_B && o.IdCampo == Constants.VACUNAS_HEPATITIS_B_FECHA_2).Valor,
								   HepB3 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNAS_HEPATITIS_B && o.IdCampo == Constants.VACUNAS_HEPATITIS_B_FECHA_3) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNAS_HEPATITIS_B && o.IdCampo == Constants.VACUNAS_HEPATITIS_B_FECHA_3).Valor,
								   HepA1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_HEPATITIS_A && o.IdCampo == Constants.VACUNA_HEPATITIS_A_FECHA) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_HEPATITIS_A && o.IdCampo == Constants.VACUNA_HEPATITIS_A_FECHA).Valor,
								   HepA2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_HEPATITIS_A && o.IdCampo == Constants.VACUNA_HEPATITIS_A_FECHA_2) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_HEPATITIS_A && o.IdCampo == Constants.VACUNA_HEPATITIS_A_FECHA_2).Valor,
								   InfluenzaEstacional = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_INFLUENZA && o.IdCampo == Constants.VACUNA_INFLUENZA_FECHA) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_INFLUENZA && o.IdCampo == Constants.VACUNA_INFLUENZA_FECHA).Valor,
								   InfluenzaH1N1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_TIFOIDEA && o.IdCampo == Constants.VACUNA_TIFOIDEA_FECHA) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_TIFOIDEA && o.IdCampo == Constants.VACUNA_TIFOIDEA_FECHA).Valor,
								   Antiamarilica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_FIEBRE_AMARILLA && o.IdCampo == Constants.VACUNA_FIEBRE_AMARILLA_FECHA) == null ? "No Aplica" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VACUNA_FIEBRE_AMARILLA && o.IdCampo == Constants.VACUNA_FIEBRE_AMARILLA_FECHA).Valor,
								   Inteligencia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_NIVEL_ACTUAL) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_NIVEL_ACTUAL).Valor,
								   Personalidad = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_PERSONALIDAD) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_PERSONALIDAD).Valor,
								   RiesgoPsico = "---",
								   Estres = "---",
								   Ansiedad = "---",
								   RiesgoFisico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_FISICO) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_FISICO).Valor,
								   RiesgoQuimico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_QUIMICO) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_QUIMICO).Valor,
								   RiesgoBiologico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_BIOLOGICO) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_BIOLOGICO).Valor,
								   RiesgoErgonomico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_ERGONOMICO) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_ERGONOMICO).Valor,
								   RiesgoPsicolaboral = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_PSICOLABORAL) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_RIESGO_PSICOLABORAL).Valor,
								   AptitudParaSeguridad = "Apto",
								   ObsParaSeguridad = "---",

								   HipertensionArterialControlada = "Falta implementar",
								   Obesidad1 = "Falta implementar",
								   DislipidemiaAltoRiesgo = "Falta implementar",
								   TbcTratamiento = "Falta implementar",
								   HipoacusiaInducida = "Falta implementar",
								   Policitemia = "Falta implementar",
								   DiabetesMellitusControlada = "Falta implementar",
								   ResultadoDosajePlomo = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PLOMO_SANGRE_ID && o.IdCampo == Constants.PLOMO_SANGRE_BIOQUIMICA_PLOMO_SANGRE) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PLOMO_SANGRE_ID && o.IdCampo == Constants.PLOMO_SANGRE_BIOQUIMICA_PLOMO_SANGRE).Valor,
								   ExamenPsicosensometrico = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PETRINOVIC_ID && o.IdCampo == Constants.PETRINOVIC_RESULTADO_ID) == null ? "Promedio" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PETRINOVIC_ID && o.IdCampo == Constants.PETRINOVIC_RESULTADO_ID).Valor,



							   }).ToList();

					return sql;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//AMC
		public List<ReporteDisal> ReporteDisal(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{


					#region Antecedentes

					var varDxReco = DevolverJerarquiaDxRecomendaciones(FechaInicio, FechaFin);
					var varAntecedentes = DevolverTodosAntecedentesImportancia(FechaInicio, FechaFin);
					var varValores = DevolverValorCampoPorServicio(FechaInicio, FechaFin);
					var varDx = DevolverJerarquiaDx(FechaInicio, FechaFin);

					#endregion


					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
									from D in C_join.DefaultIfEmpty()

									join E in dbContext.location on C.v_CustomerOrganizationId equals E.v_OrganizationId

									join J1 in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 118 }
											  equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
									from J1 in J1_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
									   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()

									where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin && A.i_ServiceStatusId == (int)ServiceStatus.Culminado

									select new ReporteDisal
									{
										v_ObsStatusService = A.v_ObsStatusService,
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										FechaNacimiento = B.d_Birthdate.Value,

										DNI = B.v_DocNumber,
										FechaServicioDate = A.d_ServiceDate.Value,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_EmployerLocationId,
										PuestoTrabajo = B.v_CurrentOccupation + " / " + E.v_Name,
										Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
										Aptitud = J4.v_Value1

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					var sql = (from a in objEntity.ToList()

							   #region Subquerys

							   //// Subquerys ************************************************************************
							   let age = GetAge(a.FechaNacimiento.Value)
							   let EstadoNutricionalDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID)
							   let EstadoNutricional = EstadoNutricionalDxs != null ? string.Join("/ ", EstadoNutricionalDxs.Select(p => p.Descripcion)) : "---"

							   let PerimetroAbdominalDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.ANTROPOMETRIA_INDICE_CINTURA_ID)
							   let PerimetroAbdominal = PerimetroAbdominalDxs != null ? string.Join("/ ", PerimetroAbdominalDxs.Select(p => p.Descripcion)) : "---"

							   let PADxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID)
							   let PA = PADxs != null ? string.Join("/ ", PADxs.Select(p => p.Descripcion)) : "---"

							   let LentesNO = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_CORRECTORES_OCULARES_NO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_CORRECTORES_OCULARES_NO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.OFTALMOLOGIA_CORRECTORES_OCULARES_NO_ID).Valor
							   let LentesSI = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_CORRECTORES_OCULARES_SI_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_CORRECTORES_OCULARES_SI_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.OFTALMOLOGIA_CORRECTORES_OCULARES_SI_ID).Valor


							   let AgudezaVisualDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "N002-DD000000155" || o.IdDeseases == "N009-DD000000102" || o.IdDeseases == "N009-DD000000143")
							   let AgudezaVisual = AgudezaVisualDxs != null ? string.Join("/ ", AgudezaVisualDxs.Select(p => p.Descripcion)) : "Normal"


							   let OtrasAgudezaVisualDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases == "M009-DD000000197" || o.IdDeseases == "N009-DD000000125" || o.IdDeseases == "N009-DD000000124" || o.IdDeseases == "N002-DD000000159" || o.IdDeseases == "N009-DD000000154" || o.IdDeseases == "N009-DD000000142")
							   let OtrasAgudezaVisual = OtrasAgudezaVisualDxs != null ? string.Join("/ ", OtrasAgudezaVisualDxs.Select(p => p.Descripcion)) : "---"

							   let OtrasEnfOcularesDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdDeseases != "M009-DD000000197" || o.IdDeseases != "N009-DD000000125" || o.IdDeseases != "N009-DD000000124" || o.IdDeseases != "N002-DD000000159" || o.IdDeseases != "N009-DD000000154" || o.IdDeseases != "N009-DD000000142" || o.IdDeseases == "N002-DD000000155" || o.IdDeseases == "N009-DD000000102" || o.IdDeseases == "N009-DD000000143" && o.IdComponente == Constants.OFTALMOLOGIA_ID)
							   let OtrasEnfOculares = OtrasEnfOcularesDxs != null ? string.Join("/ ", OtrasEnfOcularesDxs.Select(p => p.Descripcion)) : "---"

							   let AudiometriaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.AUDIOMETRIA_ID)
							   let Audiometria = AudiometriaDxs != null ? string.Join("/ ", AudiometriaDxs.Select(p => p.Descripcion)) : "---"

							   let EvaOsteoDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.EVA_OSTEO_ID)
							   let EvaOsteo = EvaOsteoDxs != null ? string.Join("/ ", EvaOsteoDxs.Select(p => p.Descripcion)) : "Normal"

							   let HBDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.HEMOGLOBINA_HEMOGRAMA_HEMOGLOBINA)
							   let HB = HBDxs != null ? string.Join("/ ", HBDxs.Select(p => p.Descripcion)) : "Normal"

							   let HemogramaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID)
							   let Hemograma = HemogramaDxs != null ? string.Join("/ ", HemogramaDxs.Select(p => p.Descripcion)) : "Normal"

							   let GlucosaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION)
							   let DxGlucosa = GlucosaDxs != null ? string.Join("/ ", GlucosaDxs.Select(p => p.Descripcion)) : "Normal"

							   let ColesterolDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID)
							   let DxColesterol = GlucosaDxs != null ? string.Join("/ ", GlucosaDxs.Select(p => p.Descripcion)) : "Normal"

							   let TrigliceridoDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS)
							   let DxTriglicerido = TrigliceridoDxs != null ? string.Join("/ ", TrigliceridoDxs.Select(p => p.Descripcion)) : "Normal"

							   let ExamenOrinaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID)
							   let ExamenOrina1 = ExamenOrinaDxs != null ? string.Join(", ", ExamenOrinaDxs.Select(p => p.Descripcion)) : "Normal"

							   let RxDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.RX_TORAX_ID)
							   let Rx = RxDxs != null ? string.Join("/ ", RxDxs.Select(p => p.Descripcion)) : "---"

							   let EKGDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID)
							   let EKG = EKGDxs != null ? string.Join("/ ", EKGDxs.Select(p => p.Descripcion)) : "---"

							   let PSICOLOGIA_APTITUD_PSICOLOGICA_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA_ID).Valor
							   let PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID).Valor






							   #endregion

							   select new ReporteDisal
							   {
								   v_ObsStatusService = a.v_ObsStatusService,
								   IdServicio = a.IdServicio,
								   IdProtocolId = a.IdProtocolId,
								   IdTrabajador = a.IdTrabajador,
								   FechaNacimiento = a.FechaNacimiento,
								   //********************************************

								   DNI = a.DNI,
								   FechaServicioDate = a.FechaServicioDate,
								   LugarExamen = GetNameMedicalCenter(),
								   Trabajador = a.Trabajador,
								   EdadTrabajador = age,
								   GeneroTrabajador = a.GeneroTrabajador,
								   PuestoTrabajo = a.PuestoTrabajo,
								   AntecedentesImportancia = varAntecedentes,
								   Peso = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,
								   Talla = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
								   IMC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
								   EstadoNutricional = EstadoNutricional,
								   PerimetroAbdominal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor,
								   DxPerimetroAbdominal = PerimetroAbdominal,
								   PresionSistolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor,
								   PresionDiastolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor,
								   DxPA = PA,
								   UsaLentes = LentesNO + LentesSI,
								   AgudezaVisual = AgudezaVisual,
								   OtrasAlteEnfOculares = OtrasAgudezaVisual,
								   OtrasAlteracionesVision = OtrasEnfOculares,
								   Audiometria = Audiometria,
								   ComentarioAudiometria = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AUDIOMETRIA_ID && o.IdCampo == Constants.AUDIOMETRIA_CONCLUSIONES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AUDIOMETRIA_ID && o.IdCampo == Constants.AUDIOMETRIA_CONCLUSIONES_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.AUDIOMETRIA_ID && o.IdCampo == Constants.AUDIOMETRIA_CONCLUSIONES_ID).Valor,
								   Espirometria = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ESPIROMETRIA_ID && o.IdCampo == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_OBSERVACION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ESPIROMETRIA_ID && o.IdCampo == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_OBSERVACION).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ESPIROMETRIA_ID && o.IdCampo == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_OBSERVACION).Valor,
								   EvaOsteomuscular = EvaOsteo,
								   Hemoglobina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor,
								   DxHB = HB,
								   Hemograma = Hemograma,
								   Glucosa = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Valor,
								   DxGlucosa = DxGlucosa,
								   Colesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor,
								   DxColesterol = DxColesterol,
								   Trigliceridos = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TRIGLICERIDOS_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TRIGLICERIDOS_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TRIGLICERIDOS_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS).Valor,
								   DxTrigliceridos = DxTriglicerido,
								   RPR = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VDRL_ID && o.IdCampo == Constants.LABORATORIO_VDRL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VDRL_ID && o.IdCampo == Constants.LABORATORIO_VDRL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.VDRL_ID && o.IdCampo == Constants.LABORATORIO_VDRL_ID).Valor,
								   ExamenOrina = ExamenOrina1,
								   RadiografiaTorax = Rx,
								   ComentarioRadiografia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor,
								   Odontograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
								   EKG = EKG,
								   ComentarioEKG = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor,

								   Psicologico = PSICOLOGIA_APTITUD_PSICOLOGICA_ID + PSICOLOGIA_RECOMENDACIONES_ESPECIFICAS_ID,
								   OtrosDxs = "",
								   Aptitud = a.Aptitud,
								   Retricciones = GetRestrictionByServiceId(a.IdServicio),
								   InformeEntregado = "",
								   ComentariosObsRecomendaciones = GetRecommendationByServiceId(a.IdServicio) + a.v_ObsStatusService

							   }).ToList();

					return sql;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		public string DevolverTodosAntecedentesImportancia(DateTime? FeIni, DateTime? FeFin)
		{

			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{
				int isDeleted = (int)SiNo.NO;
				var ListaAntecedentesTodos = (from A in dbContext.personmedicalhistory
											  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
											  join E in dbContext.service on A.v_PersonId equals E.v_PersonId
											  where A.i_IsDeleted == 0
												  //&& A.v_PersonId == "N009-PP000000208"
													 && E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
											  orderby A.v_PersonId
											  select new AntecedentesList
											  {
												  PersonId = A.v_PersonId,
												  v_DiseasesName = D.v_Name,
												  d_StartDate = A.d_StartDate.Value,
												  Detalle_Dx = A.v_DiagnosticDetail,
												  Parentesco = "",
												  TipoAntecedente = "P"
											  }).Union(from A in dbContext.familymedicalantecedents
													   join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
													   join E in dbContext.service on A.v_PersonId equals E.v_PersonId

													   join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
														   equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
													   from J1 in J1_join.DefaultIfEmpty()

													   join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
														   equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
													   from J2 in J2_join.DefaultIfEmpty()

													   where A.i_IsDeleted == isDeleted
															 && E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
													   orderby A.v_PersonId
													   select new AntecedentesList
													   {
														   PersonId = A.v_PersonId,
														   v_DiseasesName = D.v_Name,
														   d_StartDate = DateTime.Now,
														   Detalle_Dx = "",
														   Parentesco = J2.v_Value1,
														   TipoAntecedente = "F"
													   }).ToList();



				var ListaAntcPersonales = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "P");
				var R1 = string.Join(", ", ListaAntcPersonales.Select(p => p.v_DiseasesName + " " + p.Detalle_Dx));

				var ListaAntcFamiliares = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "F");
				var R2 = string.Join(", ", ListaAntcFamiliares.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));

				return R1 + R2;
				//ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
			}
		}

		public string DevolverAntecedentesFamiliares(string pstrPersonId, string pstrParentesco)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var Sql = (from A in dbContext.familymedicalantecedents
					   join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
					   join E in dbContext.service on A.v_PersonId equals E.v_PersonId

					   join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
						   equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
					   from J1 in J1_join.DefaultIfEmpty()

					   join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
						   equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
					   from J2 in J2_join.DefaultIfEmpty()

					   where A.i_IsDeleted == 0
						   && A.v_PersonId == pstrPersonId && J2.v_Value1 == pstrParentesco

					   orderby A.v_PersonId
					   select new AntecedentesList
					   {
						   PersonId = A.v_PersonId,
						   v_DiseasesName = D.v_Name,
						   d_StartDate = DateTime.Now,
						   Detalle_Dx = "",
						   Parentesco = J2.v_Value1,
						   TipoAntecedente = "F"
					   }).ToList();

			return string.Join(", ", Sql.Select(p => p.v_DiseasesName));

		}

		// Alberto
		public List<ReportHistoriaClinicaPsicologica> GetHistoriaClinicaPsicologica(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join M in dbContext.systemparameter on new { a = B.i_MaritalStatusId.Value, b = 101 }
											  equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
								 from M in M_join.DefaultIfEmpty()
								 join N in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
												equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
								 from N in N_join.DefaultIfEmpty()

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
								 from D1 in D1_join.DefaultIfEmpty()

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = E.v_ServiceId, b = E.v_ComponentId }


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join E2 in dbContext.area on A.v_AreaId equals E2.v_AreaId into E2_join
								 from E2 in E2_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new ReportHistoriaClinicaPsicologica
								 {
									 ApellidosNombres = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 LugarNacimiento = B.v_AdressLocation,
									 EstadoCivil = M.v_Value1,
									 GradoInstruccion = N.v_Value1,
									 LugarResidencia = B.v_AdressLocation,
									 PuestoTrabajo = B.v_CurrentOccupation,
									 TipoESO = E1.i_EsoTypeId.Value,
									 NombreEmpresa = D1.v_Name,
									 ActividadEmpresa = D1.v_SectorName,
									 FechaEvaluacion = A.d_ServiceDate.Value,
									 IdServicio = A.v_ServiceId,
									 AreaTrabajo = E2.v_Name,
									 FirmaGraba = pme.b_SignatureImage,


								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let Valores = ValoresComponente(pstrserviceId, pstrComponentId)
						   let ValoresExamenMental = ValoresComponente(pstrserviceId, Constants.PSICOLOGIA_ID)
						   select new ReportHistoriaClinicaPsicologica
						   {
							   ApellidosNombres = a.ApellidosNombres,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   LugarNacimiento = a.LugarNacimiento,
							   EstadoCivil = a.EstadoCivil,
							   GradoInstruccion = a.GradoInstruccion,
							   LugarResidencia = a.LugarResidencia,
							   PuestoTrabajo = a.PuestoTrabajo,
							   TipoESO = a.TipoESO,
							   NombreEmpresa = a.NombreEmpresa,
							   ActividadEmpresa = a.ActividadEmpresa,
							   FechaEvaluacion = a.FechaEvaluacion,
							   IdServicio = a.IdServicio,
							   AreaTrabajo = a.AreaTrabajo,
							   LogoPropietaria = MedicalCenter.b_Image,
							   FirmaGraba = a.FirmaGraba,
							   HISTORIA_CLINICA_PSICOLOGICA_motivo_evaluacion_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_motivo_evaluacion_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_motivo_evaluacion_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_superficie_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_superficie_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_superficie_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_subsuelo_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_subsuelo_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_subsuelo_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_tiempo_total_laborando_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_tiempo_total_laborando_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_tiempo_total_laborando_ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_principales_riesgos_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_principales_riesgos_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_principales_riesgos_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_medidas_seguridad_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_medidas_seguridad_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_medidas_seguridad_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_fecha_1ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_fecha_1ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_fecha_1ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_nombre_1_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_nombre_1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_nombre_1_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_actividad_1_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_actividad_1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_actividad_1_ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_puesto_1_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_puesto_1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_puesto_1_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_sup_1_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sup_1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sup_1_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_sub_1ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sub_1ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sub_1ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_causa_1_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_causa_1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_causa_1_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_fecha_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_fecha_2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_fecha_2_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_nombre_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_nombre_2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_nombre_2_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_actividad_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_actividad_2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_actividad_2_ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_puesto_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_puesto_2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_puesto_2_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_sup_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sup_2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sup_2_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_sub_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sub_2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sub_2_ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_causa_2_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.CODO_IZQEXTENSION) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.CODO_IZQEXTENSION).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_fecha_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_fecha_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_fecha_3_ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_nombre_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_nombre_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_nombre_3_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_actividad_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_actividad_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_actividad_3_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_puesto_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_puesto_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_puesto_3_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_sup_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sup_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sup_3_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_sub_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sub_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_sub_3_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_causa_3_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_causa_3_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_causa_3_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_historia_familiar_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_historia_familiar_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_historia_familiar_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_accidentes_enf_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_accidentes_enf_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_accidentes_enf_ID).v_Value1,

							   HISTORIA_CLINICA_PSICOLOGICA_habitos_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_habitos_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_habitos_ID).v_Value1,
							   HISTORIA_CLINICA_PSICOLOGICA_obs_ID = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_obs_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HISTORIA_CLINICA_PSICOLOGICA_obs_ID).v_Value1,


							   EXAMEN_MENTAL_discurso_articulacion_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_discurso_articulacion_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_discurso_articulacion_ID).v_Value1,
							   EXAMEN_MENTAL_discuerso_ritmo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_discuerso_ritmo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_discuerso_ritmo_ID).v_Value1,
							   EXAMEN_MENTAL_discurso_tono_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_discurso_tono_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_discurso_tono_ID).v_Value1,



							   EXAMEN_MENTAL_orientacion_espacio_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_orientacion_espacio_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_orientacion_espacio_ID).v_Value1,
							   EXAMEN_MENTAL_orientacion_persona_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_orientacion_persona_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_orientacion_persona_ID).v_Value1,
							   EXAMEN_MENTAL_orientacion_tiempo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_orientacion_tiempo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_orientacion_tiempo_ID).v_Value1,
							   EXAMEN_MENTAL_postura_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_postura_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_postura_ID).v_Value1,


							   EXAMEN_MENTAL_presentacion_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_presentacion_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_presentacion_ID).v_Value1,
							   EXAMEN_MENTAL_lucido_atento_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_lucido_atento_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_lucido_atento_ID).v_Value1,
							   EXAMEN_MENTAL_afectividad_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_afectividad_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_afectividad_ID).v_Value1Name,

							   EXAMEN_MENTAL_apetito_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_apetito_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_apetito_ID).v_Value1,
							   EXAMEN_MENTAL_conducta_sexual_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_conducta_sexual_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_conducta_sexual_ID).v_Value1Name,
							   EXAMEN_MENTAL_inteligencia_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inteligencia_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inteligencia_ID).v_Value1Name,


							   EXAMEN_MENTAL_memoria_corto_plazo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_memoria_corto_plazo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_memoria_corto_plazo_ID).v_Value1Name,
							   EXAMEN_MENTAL_memoria_largo_plazo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_memoria_largo_plazo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_memoria_largo_plazo_ID).v_Value1Name,
							   EXAMEN_MENTAL_memoria_mediano_plazo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_memoria_mediano_plazo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_memoria_mediano_plazo_ID).v_Value1Name,
							   EXAMEN_MENTAL_pensamiento_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_pensamiento_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_pensamiento_ID).v_Value1Name,
							   EXAMEN_MENTAL_percepcion_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_percepcion_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_percepcion_ID).v_Value1Name,



							   EXAMEN_MENTAL_personalidad_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_personalidad_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_personalidad_ID).v_Value1Name,
							   EXAMEN_MENTAL_sueño_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_sueño_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_sueño_ID).v_Value1,

							   EXAMEN_MENTAL_batetia_conductores_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_batetia_conductores_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_batetia_conductores_ID).v_Value1,
							   EXAMEN_MENTAL_clima_laboral_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_clima_laboral_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_clima_laboral_ID).v_Value1,
							   EXAMEN_MENTAL_escala_apre_estres_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_escala_apre_estres_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_escala_apre_estres_ID).v_Value1,
							   EXAMEN_MENTAL_escala_memoria_vvechsler_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_escala_memoria_vvechsler_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_escala_memoria_vvechsler_ID).v_Value1,



							   EXAMEN_MENTAL_escala_motivacion_psicolo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_escala_motivacion_psicolo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_escala_motivacion_psicolo_ID).v_Value1,
							   EXAMEN_MENTAL_inventario_burnoutde_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_burnoutde_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_burnoutde_ID).v_Value1,
							   EXAMEN_MENTAL_inventario_ansiedad_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_ansiedad_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_ansiedad_ID).v_Value1,
							   EXAMEN_MENTAL_inventario_millon_estilos_pers_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_millon_estilos_pers_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_millon_estilos_pers_ID).v_Value1,
							   EXAMEN_MENTAL_inventario_depresion_zung_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_depresion_zung_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_inventario_depresion_zung_ID).v_Value1,
							   EXAMEN_MENTAL_luria_dna_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_luria_dna_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_luria_dna_ID).v_Value1,

							   EXAMEN_MENTAL_test_bender_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_test_bender_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_test_bender_ID).v_Value1,
							   EXAMEN_MENTAL_test_benton_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_test_benton_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_test_benton_ID).v_Value1,
							   EXAMEN_MENTAL_wais_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_wais_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_wais_ID).v_Value1,



							   EXAMEN_MENTAL_otros_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_otros_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_otros_ID).v_Value1,
							   EXAMEN_MENTAL_aptitud_psico_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_aptitud_psico_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_aptitud_psico_ID).v_Value1,
							   EXAMEN_MENTAL_area_psicolo_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_psicolo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_psicolo_ID).v_Value1,

							   EXAMEN_MENTAL_area_emocianal_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_emocianal_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_emocianal_ID).v_Value1,
							   EXAMEN_MENTAL_area_personal_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_personal_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_personal_ID).v_Value1,
							   EXAMEN_MENTAL_conclusiones_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_conclusiones_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_conclusiones_ID).v_Value1,
							   EXAMEN_MENTAL_recomendaciones_ID = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_restriccion_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_restriccion_ID).v_Value1,

							   AreaCognitiva = ValoresExamenMental.Count == 0 || ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_psicolo_ID) == null ? string.Empty : ValoresExamenMental.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_MENTAL_area_psicolo_ID).v_Value1,//  GetServiceComponentFielValue(a.v_ServiceId, "N002-ME000000033", "N002-MF000000336", "NOCOMBO", 0, "NO"),
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public void ActualizarServicioArea(string pstrServiceId, string pstrAreaId)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pstrServiceId
									   select a).FirstOrDefault();

				objEntitySource.v_AreaId = pstrAreaId;

				// Guardar los cambios
				dbContext.SaveChanges();

				return;

			}
			catch (Exception ex)
			{

				// Llenar entidad Log
				return;
			}


		}

		public void ActualizarServicioCosto(string pstrServiceId, decimal pdecCosto)
		{
			//try
			//{

			//    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			//    // Obtener la entidad fuente
			//    var objEntitySource = (from a in dbContext.service
			//                           where a.v_ServiceId == pstrServiceId
			//                           select a).FirstOrDefault();

			//    objEntitySource.r_Costo = pdecCosto;

			//    // Guardar los cambios
			//    dbContext.SaveChanges();

			//    return;

			//}
			//catch (Exception ex)
			//{

			//    // Llenar entidad Log
			//    return;
			//}


		}

		public void ActualizarFechaEntregaServicio(string pstrServiceId, DateTime? pFechaEntrega)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pstrServiceId
									   select a).FirstOrDefault();

				objEntitySource.d_FechaEntrega = pFechaEntrega;

				// Guardar los cambios
				dbContext.SaveChanges();

				return;

			}
			catch (Exception ex)
			{

				// Llenar entidad Log
				return;
			}


		}

		public void ActualizarFechaIniciarCircuitoCalendar(string pstrServiceId, DateTime? pFechaEntrega)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.calendar
									   where a.v_ServiceId == pstrServiceId
									   select a).FirstOrDefault();

				objEntitySource.d_CircuitStartDate = pFechaEntrega;

				// Guardar los cambios
				dbContext.SaveChanges();

				return;

			}
			catch (Exception ex)
			{

				// Llenar entidad Log
				return;
			}


		}


		// Alberto
		public List<ReportEvaNeurologica> GetReportEvaNeurologica(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
																		equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join oc in dbContext.organization on new { a = E1.v_CustomerOrganizationId }
								   equals new { a = oc.v_OrganizationId } into oc_join
								 from oc in oc_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId


								 where A.v_ServiceId == pstrserviceId
								 select new ReportEvaNeurologica
								 {

									 Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate,
									 Genero = J.v_Value1,
									 FechaServicio = A.d_ServiceDate.Value,
									 DNI = B.v_DocNumber,
									 v_ServiceId = A.v_ServiceId,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = oc.v_Name,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaEnu = ValoresComponente(pstrserviceId, Constants.EVA_NEUROLOGICA_ID)

						   select new ReportEvaNeurologica
						   {
							   Paciente = a.Paciente,
							   FechaNacimiento = a.FechaNacimiento,
							   Genero = a.Genero,
							   FechaServicio = a.FechaServicio,
							   DNI = a.DNI,
							   v_ServiceId = a.v_ServiceId,
							   FirmaMedico = a.FirmaMedico,
							   Empresa = a.Empresa,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   EVA_NEUROLOGICA_TEST_ROMBERG_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_TEST_ROMBERG_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_TEST_ROMBERG_ID).v_Value1,

							   EVA_NEUROLOGICA_PRUEBA_MARCHA_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_PRUEBA_MARCHA_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_PRUEBA_MARCHA_ID).v_Value1,

							   EVA_NEUROLOGICA_PRUEBA_INDICE_NARIZ_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_PRUEBA_INDICE_NARIZ_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_PRUEBA_INDICE_NARIZ_ID).v_Value1,

							   EVA_NEUROLOGICA_MIEMBRO_SUP_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_MIEMBRO_SUP_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_MIEMBRO_SUP_ID).v_Value1,

							   EVA_NEUROLOGICA_MIEMBRO_INF_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_MIEMBRO_INF_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_MIEMBRO_INF_ID).v_Value1,

							   EVA_NEUROLOGICA_POSITIVO_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_POSITIVO_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_POSITIVO_ID).v_Value1,

							   EVA_NEUROLOGICA_FLEXION_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_FLEXION_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_FLEXION_ID).v_Value1,

							   EVA_NEUROLOGICA_CONCLUSION_ID = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_CONCLUSION_ID) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EVA_NEUROLOGICA_CONCLUSION_ID).v_Value1,


							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ServiceGridJerarquizadaList> GetServicesPagedAndFiltered_(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds, DateTime? pFci, DateTime? pFcf)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join B in dbContext.person on A.v_PersonId equals B.v_PersonId

							join C in dbContext.diagnosticrepository on A.v_ServiceId equals C.v_ServiceId into C_join
							from C in C_join.DefaultIfEmpty()

							join D in dbContext.diseases on C.v_DiseasesId equals D.v_DiseasesId into D_join
							from D in D_join.DefaultIfEmpty()

							join E in dbContext.recommendation on new { a = A.v_ServiceId, b = C.v_DiagnosticRepositoryId }
																	equals new { a = E.v_ServiceId, b = E.v_DiagnosticRepositoryId } into E_join
							from E in E_join.DefaultIfEmpty()

							join E1 in dbContext.restriction on new { a = A.v_ServiceId, b = C.v_DiagnosticRepositoryId }
																   equals new { a = E1.v_ServiceId, b = E1.v_DiagnosticRepositoryId } into E1_join
							from E1 in E1_join.DefaultIfEmpty()

							join F in dbContext.masterrecommendationrestricction on E.v_MasterRecommendationId equals F.v_MasterRecommendationRestricctionId into F_join
							from F in F_join.DefaultIfEmpty()

							join F1 in dbContext.masterrecommendationrestricction on E1.v_MasterRestrictionId equals F1.v_MasterRecommendationRestricctionId into F1_join
							from F1 in F1_join.DefaultIfEmpty()

							join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = G.i_ParameterId, b = G.i_GroupId } into G_join
							from G in G_join.DefaultIfEmpty()

							join H in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
							from H in H_join.DefaultIfEmpty()

							join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
							from I in I_join.DefaultIfEmpty()

							join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
							from J in J_join.DefaultIfEmpty()

							join K in dbContext.location on I.v_EmployerLocationId equals K.v_LocationId into K_join
							from K in K_join.DefaultIfEmpty()

							join L in dbContext.calendar on A.v_ServiceId equals L.v_ServiceId into L_join
							from L in L_join.DefaultIfEmpty()

							join M in dbContext.servicecomponent on A.v_ServiceId equals M.v_ServiceId into M_join
							from M in M_join.DefaultIfEmpty()

							join N in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = N.i_ParameterId, b = N.i_GroupId } into N_join
							from N in N_join.DefaultIfEmpty()

							join O in dbContext.facturaciondetalle on A.v_ServiceId equals O.v_ServicioId into O_join
							from O in O_join.DefaultIfEmpty()

							join P in dbContext.facturacion on O.v_FacturacionId equals P.v_FacturacionId into P_join
							from P in P_join.DefaultIfEmpty()

							join et in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
							from et in et_join.DefaultIfEmpty()

							join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
															equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
															equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()

							where A.i_IsDeleted == 0
							&& L.i_LineStatusId == (int)LineStatus.EnCircuito
							//&& C.i_IsDeleted == 0
							//&& C.i_FinalQualificationId != (int)FinalQualification.Descartado
							select new ServiceGridJerarquizadaList
							{
								b_FechaEntrega = false,
								v_PersonId = B.v_PersonId,
								d_FechaEntrega = A.d_FechaEntrega,
								v_ServiceId = A.v_ServiceId,
								v_Pacient = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
								v_PacientDocument = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName + " " + B.v_DocNumber,
								d_ServiceDate = A.d_ServiceDate,
								i_ServiceStatusId = A.i_ServiceStatusId,
								v_ServiceStatusName = H.v_Value1,
								v_AptitudeStatusName = G.v_Value1,
								v_OrganizationName = J.v_Name,
								v_LocationName = K.v_Name,
								v_ProtocolId = A.v_ProtocolId,
								v_ProtocolName = I.v_Name,
								i_ServiceId = L.i_ServiceId,

								v_DiagnosticRepositoryId = C.v_DiagnosticRepositoryId,
								v_DiseasesName = D.v_Name,
								d_ExpirationDateDiagnostic = C.d_ExpirationDateDiagnostic,
								v_Recommendation = F.v_Name,
								v_Restriccion = F1.v_Name,
								v_ComponentId = M.v_ComponentId,
								i_ServiceTypeId = I.i_MasterServiceTypeId,
								i_MasterServiceId = A.i_MasterServiceId,
								i_EsoTypeId = I.i_EsoTypeId,
								i_AptitudeStatusId = A.i_AptitudeStatusId,
								v_CustomerOrganizationId = I.v_CustomerOrganizationId,
								v_CustomerLocationId = I.v_CustomerLocationId,
								v_CreationUser = J1.v_UserName,
								v_UpdateUser = J2.v_UserName,
								d_CreationDate = A.d_InsertDate,
								d_UpdateDate = A.d_UpdateDate,
								i_StatusLiquidation = A.i_StatusLiquidation,

								v_MasterServiceName = N.v_Value1,
								v_EsoTypeName = et.v_Value1,
								CIE10 = D.v_CIE10Id,
								d_FechaNacimiento = B.d_Birthdate,
								NroPoliza = B.v_NroPoliza,
								Moneda = "PEN",
								NroFactura = P.v_NumeroFactura,
								Valor = P.d_MontoTotal,
								i_FinalQualificationId = C.i_FinalQualificationId,
								d_Deducible = B.v_Deducible,
								i_IsDeleted = F1.i_IsDeleted.Value,
								i_IsDeletedDx = C.i_IsDeleted

							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				{
					query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}


				List<ServiceGridJerarquizadaList> FacturacionConSinDeducible = new List<ServiceGridJerarquizadaList>();

				foreach (var item in query)
				{
					//if (item.i_IsDeletedDx == 0)
					//{
					if (item.d_Deducible != null && item.d_Deducible.ToString() != "0.00")
					{
						item.Valor = item.Valor - (item.d_Deducible * item.Valor / 100);
					}
					else
					{
						item.Valor = item.Valor;
					}
					item.b_FechaEntrega = item.b_FechaEntrega;
					item.v_PersonId = item.v_PersonId;
					item.d_FechaEntrega = item.d_FechaEntrega;
					item.v_ServiceId = item.v_ServiceId;
					item.v_Pacient = item.v_Pacient;
					item.v_PacientDocument = item.v_PacientDocument;
					item.d_ServiceDate = item.d_ServiceDate;
					item.i_ServiceStatusId = item.i_ServiceStatusId;
					item.v_ServiceStatusName = item.v_ServiceStatusName;
					item.v_AptitudeStatusName = item.v_AptitudeStatusName;
					item.v_OrganizationName = item.v_OrganizationName;
					item.v_LocationName = item.v_LocationName;
					item.v_ProtocolId = item.v_ProtocolId;
					item.v_ProtocolName = item.v_ProtocolName;
					item.i_ServiceId = item.i_ServiceId;

					item.v_DiagnosticRepositoryId = item.v_DiagnosticRepositoryId;
					item.v_DiseasesName = item.v_DiseasesName;
					item.d_ExpirationDateDiagnostic = item.d_ExpirationDateDiagnostic;
					item.v_Recommendation = item.v_Recommendation;
					item.v_Restriccion = item.v_Restriccion;
					item.v_ComponentId = item.v_ComponentId;
					item.i_ServiceTypeId = item.i_ServiceTypeId;
					item.i_MasterServiceId = item.i_MasterServiceId;
					item.i_EsoTypeId = item.i_EsoTypeId;
					item.i_AptitudeStatusId = item.i_AptitudeStatusId;
					item.v_CustomerOrganizationId = item.v_CustomerOrganizationId;
					item.v_CustomerLocationId = item.v_CustomerLocationId;
					item.v_CreationUser = item.v_CreationUser;
					item.v_UpdateUser = item.v_UpdateUser;
					item.d_CreationDate = item.d_CreationDate;
					item.d_UpdateDate = item.d_UpdateDate;
					item.i_StatusLiquidation = item.i_StatusLiquidation;

					item.v_MasterServiceName = item.v_MasterServiceName;
					item.v_EsoTypeName = item.v_EsoTypeName;
					item.CIE10 = item.CIE10;
					item.d_FechaNacimiento = item.d_FechaNacimiento;
					item.NroPoliza = item.NroPoliza;
					item.Moneda = "PEN";
					item.NroFactura = item.NroFactura;

					item.i_FinalQualificationId = item.i_FinalQualificationId;
					item.d_Deducible = item.d_Deducible;
					item.i_IsDeleted = item.i_IsDeleted;

					FacturacionConSinDeducible.Add(item);
					//}


				}

				List<ServiceGridJerarquizadaList> objData = FacturacionConSinDeducible.ToList();


				//Agrupar Data para DXS
				var ServiciosDxs1 = (objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId })
							   .Select(s => s.First()).ToList()).FindAll(p => p.v_DiseasesName != null && p.i_FinalQualificationId != 4);


				var ServiciosRecomendaciones = objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId, g.v_Recommendation })
							 .Select(s => s.First()).ToList();

				var ServiciosRestricciones = objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId, g.v_Restriccion })
						   .Select(s => s.First()).ToList();

				var ServiciosDxs2 = objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId, g.v_ComponentId })
							   .Select(s => s.First()).ToList();



				//Cargar List<DiagnosticRepositoryJerarquizada> donde se encuentra los DX
				List<DiagnosticRepositoryJerarquizada> ListDx = new List<DiagnosticRepositoryJerarquizada>();
				DiagnosticRepositoryJerarquizada oDx;

				var x = ServiciosDxs1.FindAll(p => p.i_IsDeletedDx == 0);
				foreach (var item in x)
				{
					oDx = new DiagnosticRepositoryJerarquizada();

					oDx.v_ServiceId = item.v_ServiceId;
					oDx.v_DiagnosticRepositoryId = item.v_DiagnosticRepositoryId;
					oDx.v_DiseasesName = item.v_DiseasesName;
					oDx.d_ExpirationDateDiagnostic = item.d_ExpirationDateDiagnostic;
					oDx.CIE10 = item.CIE10;
					var ListaRecomendaciones = ServiciosRecomendaciones.FindAll(p => p.v_ServiceId == item.v_ServiceId && p.v_DiagnosticRepositoryId == item.v_DiagnosticRepositoryId);
					oDx.v_RecomendationsName = string.Join(", ", ListaRecomendaciones.Select(p => p.v_Recommendation));

					var ListaRestricciones = ServiciosRestricciones.FindAll(p => p.v_ServiceId == item.v_ServiceId && p.v_DiagnosticRepositoryId == item.v_DiagnosticRepositoryId && p.i_IsDeleted == 0);
					oDx.v_RestricctionName = string.Join(", ", ListaRestricciones.Select(p => p.v_Restriccion));

					ListDx.Add(oDx);

				}

				//JerarquizarData
				ServiciosDxs2.ForEach(a =>
				{
					a.Diagnosticos = (ListDx.FindAll(p => p.v_ServiceId == a.v_ServiceId));
				});


				if (componentIds != null)
				{
					var xx = ServiciosDxs2.FindAll(p => componentIds.Contains(p.v_ComponentId));

					var y = xx.GroupBy(g => g.v_ServiceId)
								  .Select(s => s.First());
					pobjOperationResult.Success = 1;

					return y.ToList();
				}
				else
				{
					var y = ServiciosDxs2.GroupBy(g => g.v_ServiceId)
							   .Select(s => s.First());

					if (pFcf == DateTime.Parse("01/01/2050") && pFci == DateTime.Parse("01/01/2000"))
					{
						pobjOperationResult.Success = 1;


						return y.ToList();
					}
					else
					{
						pobjOperationResult.Success = 1;
						var prueba = y.Where(s => s.Diagnosticos.Any(p => p.d_ExpirationDateDiagnostic > pFci && p.d_ExpirationDateDiagnostic < pFcf)).ToList();

						return prueba.ToList();
					}

				}

			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceGridJerarquizadaList> GetServicesPagedAndFiltered_F(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds, DateTime? pFci, DateTime? pFcf, string pstrDxs)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join B in dbContext.person on A.v_PersonId equals B.v_PersonId

							join C in dbContext.diagnosticrepository on A.v_ServiceId equals C.v_ServiceId into C_join
							from C in C_join.DefaultIfEmpty()

							join D in dbContext.diseases on C.v_DiseasesId equals D.v_DiseasesId into D_join
							from D in D_join.DefaultIfEmpty()

							join E in dbContext.recommendation on new { a = A.v_ServiceId, b = C.v_DiagnosticRepositoryId }
																	equals new { a = E.v_ServiceId, b = E.v_DiagnosticRepositoryId } into E_join
							from E in E_join.DefaultIfEmpty()

							join E1 in dbContext.restriction on new { a = A.v_ServiceId, b = C.v_DiagnosticRepositoryId }
																   equals new { a = E1.v_ServiceId, b = E1.v_DiagnosticRepositoryId } into E1_join
							from E1 in E1_join.DefaultIfEmpty()

							join F in dbContext.masterrecommendationrestricction on E.v_MasterRecommendationId equals F.v_MasterRecommendationRestricctionId into F_join
							from F in F_join.DefaultIfEmpty()

							join F1 in dbContext.masterrecommendationrestricction on E1.v_MasterRestrictionId equals F1.v_MasterRecommendationRestricctionId into F1_join
							from F1 in F1_join.DefaultIfEmpty()

							join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = G.i_ParameterId, b = G.i_GroupId } into G_join
							from G in G_join.DefaultIfEmpty()

							join H in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
							from H in H_join.DefaultIfEmpty()

							join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
							from I in I_join.DefaultIfEmpty()

							join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
							from J in J_join.DefaultIfEmpty()

							join K in dbContext.location on I.v_EmployerLocationId equals K.v_LocationId into K_join
							from K in K_join.DefaultIfEmpty()

							join L in dbContext.calendar on A.v_ServiceId equals L.v_ServiceId into L_join
							from L in L_join.DefaultIfEmpty()

							join M in dbContext.servicecomponent on A.v_ServiceId equals M.v_ServiceId into M_join
							from M in M_join.DefaultIfEmpty()

							join N in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = N.i_ParameterId, b = N.i_GroupId } into N_join
							from N in N_join.DefaultIfEmpty()

							join O in dbContext.facturaciondetalle on A.v_ServiceId equals O.v_ServicioId into O_join
							from O in O_join.DefaultIfEmpty()

							join P in dbContext.facturacion on O.v_FacturacionId equals P.v_FacturacionId into P_join
							from P in P_join.DefaultIfEmpty()

							join et in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
							from et in et_join.DefaultIfEmpty()

							join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
															equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
															equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()

							where A.i_IsDeleted == 0
							&& L.i_LineStatusId == (int)LineStatus.EnCircuito && A.v_ProtocolId != null
							&& A.d_ServiceDate > pdatBeginDate && A.d_ServiceDate < pdatEndDate
							//&& C.i_IsDeleted == 0
							//&& C.i_FinalQualificationId != (int)FinalQualification.Descartado
							select new ServiceGridJerarquizadaList
							{
								b_FechaEntrega = false,
								v_PersonId = B.v_PersonId,
								d_FechaEntrega = A.d_FechaEntrega,
								v_ServiceId = A.v_ServiceId,
								v_Pacient = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
								v_PacientDocument = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName + " " + B.v_DocNumber,
								d_ServiceDate = A.d_ServiceDate,
								i_ServiceStatusId = A.i_ServiceStatusId,
								v_ServiceStatusName = H.v_Value1,
								v_AptitudeStatusName = G.v_Value1,
								v_OrganizationName = J.v_Name,
								v_LocationName = K.v_Name,
								v_ProtocolId = A.v_ProtocolId,
								v_ProtocolName = I.v_Name,
								i_ServiceId = L.i_ServiceId,

								v_DiagnosticRepositoryId = C.v_DiagnosticRepositoryId,
								v_DiseasesName = D.v_Name,
								d_ExpirationDateDiagnostic = C.d_ExpirationDateDiagnostic,
								v_Recommendation = F.v_Name,
								v_Restriccion = F1.v_Name,
								v_ComponentId = M.v_ComponentId,
								i_ServiceTypeId = I.i_MasterServiceTypeId,
								i_MasterServiceId = A.i_MasterServiceId,
								i_EsoTypeId = I.i_EsoTypeId,
								i_AptitudeStatusId = A.i_AptitudeStatusId,
								v_CustomerOrganizationId = I.v_CustomerOrganizationId,
								v_CustomerLocationId = I.v_CustomerLocationId,
								v_CreationUser = J1.v_UserName,
								v_UpdateUser = J2.v_UserName,
								d_CreationDate = A.d_InsertDate,
								d_UpdateDate = A.d_UpdateDate,
								i_StatusLiquidation = A.i_StatusLiquidation,

								v_MasterServiceName = N.v_Value1,
								v_EsoTypeName = et.v_Value1,
								CIE10 = D.v_CIE10Id,
								d_FechaNacimiento = B.d_Birthdate,
								NroPoliza = B.v_NroPoliza,
								Moneda = "PEN",
								NroFactura = P.v_NumeroFactura,
								Valor = P.d_MontoTotal,
								i_FinalQualificationId = C.i_FinalQualificationId,
								d_Deducible = B.v_Deducible,
								i_IsDeleted = F1.i_IsDeleted.Value,
								i_IsDeletedDx = C.i_IsDeleted,
								i_IsDeletedRecomendaciones = E.i_IsDeleted,
								i_IsDeletedRestricciones = E1.i_IsDeleted
							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				//if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				//{
				//    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				//}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}


				List<ServiceGridJerarquizadaList> FacturacionConSinDeducible = new List<ServiceGridJerarquizadaList>();

				foreach (var item in query)
				{
					//if (item.i_IsDeletedDx == 0)
					//{
					if (item.d_Deducible != null && item.d_Deducible.ToString() != "0.00")
					{
						item.Valor = item.Valor - (item.d_Deducible * item.Valor / 100);
					}
					else
					{
						item.Valor = item.Valor;
					}
					item.b_FechaEntrega = item.b_FechaEntrega;
					item.v_PersonId = item.v_PersonId;
					item.d_FechaEntrega = item.d_FechaEntrega;
					item.v_ServiceId = item.v_ServiceId;
					item.v_Pacient = item.v_Pacient;
					item.v_PacientDocument = item.v_PacientDocument;
					item.d_ServiceDate = item.d_ServiceDate;
					item.i_ServiceStatusId = item.i_ServiceStatusId;
					item.v_ServiceStatusName = item.v_ServiceStatusName;
					item.v_AptitudeStatusName = item.v_AptitudeStatusName;
					item.v_OrganizationName = item.v_OrganizationName;
					item.v_LocationName = item.v_LocationName;
					item.v_ProtocolId = item.v_ProtocolId;
					item.v_ProtocolName = item.v_ProtocolName;
					item.i_ServiceId = item.i_ServiceId;

					item.v_DiagnosticRepositoryId = item.v_DiagnosticRepositoryId;
					item.v_DiseasesName = item.v_DiseasesName;
					item.d_ExpirationDateDiagnostic = item.d_ExpirationDateDiagnostic;
					item.v_Recommendation = item.v_Recommendation;
					item.v_Restriccion = item.v_Restriccion;
					item.v_ComponentId = item.v_ComponentId;
					item.i_ServiceTypeId = item.i_ServiceTypeId;
					item.i_MasterServiceId = item.i_MasterServiceId;
					item.i_EsoTypeId = item.i_EsoTypeId;
					item.i_AptitudeStatusId = item.i_AptitudeStatusId;
					item.v_CustomerOrganizationId = item.v_CustomerOrganizationId;
					item.v_CustomerLocationId = item.v_CustomerLocationId;
					item.v_CreationUser = item.v_CreationUser;
					item.v_UpdateUser = item.v_UpdateUser;
					item.d_CreationDate = item.d_CreationDate;
					item.d_UpdateDate = item.d_UpdateDate;
					item.i_StatusLiquidation = item.i_StatusLiquidation;

					item.v_MasterServiceName = item.v_MasterServiceName;
					item.v_EsoTypeName = item.v_EsoTypeName;
					item.CIE10 = item.CIE10;
					item.d_FechaNacimiento = item.d_FechaNacimiento;
					item.NroPoliza = item.NroPoliza;
					item.Moneda = "PEN";
					item.NroFactura = item.NroFactura;

					item.i_FinalQualificationId = item.i_FinalQualificationId;
					item.d_Deducible = item.d_Deducible;
					item.i_IsDeleted = item.i_IsDeleted;

					FacturacionConSinDeducible.Add(item);
					//}


				}

				List<ServiceGridJerarquizadaList> objData = FacturacionConSinDeducible.ToList();


				//Agrupar Data para DXS
				var ServiciosDxs1 = (objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId })
							   .Select(s => s.First()).ToList()).FindAll(p => p.v_DiseasesName != null && p.i_FinalQualificationId != 4);


				var ServiciosRecomendaciones = objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId, g.v_Recommendation })
							 .Select(s => s.First()).ToList();

				var ServiciosRestricciones = objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId, g.v_Restriccion })
						   .Select(s => s.First()).ToList();

				var ServiciosDxs2 = objData.GroupBy(g => new { g.v_ServiceId, g.v_DiagnosticRepositoryId, g.v_ComponentId })
							   .Select(s => s.First()).ToList();



				//Cargar List<DiagnosticRepositoryJerarquizada> donde se encuentra los DX
				List<DiagnosticRepositoryJerarquizada> ListDx = new List<DiagnosticRepositoryJerarquizada>();
				DiagnosticRepositoryJerarquizada oDx;

				var x = ServiciosDxs1.FindAll(p => p.i_IsDeletedDx == 0);
				foreach (var item in x)
				{
					oDx = new DiagnosticRepositoryJerarquizada();

					oDx.v_ServiceId = item.v_ServiceId;
					oDx.v_DiagnosticRepositoryId = item.v_DiagnosticRepositoryId;
					oDx.v_DiseasesName = item.v_DiseasesName;
					oDx.d_ExpirationDateDiagnostic = item.d_ExpirationDateDiagnostic;
					oDx.CIE10 = item.CIE10;
					var ListaRecomendaciones = ServiciosRecomendaciones.FindAll(p => p.v_ServiceId == item.v_ServiceId && p.v_DiagnosticRepositoryId == item.v_DiagnosticRepositoryId && p.i_IsDeletedRecomendaciones == 0);
					oDx.v_RecomendationsName = string.Join(", ", ListaRecomendaciones.Select(p => p.v_Recommendation));

					var ListaRestricciones = ServiciosRestricciones.FindAll(p => p.v_ServiceId == item.v_ServiceId && p.v_DiagnosticRepositoryId == item.v_DiagnosticRepositoryId && p.i_IsDeletedRestricciones == 0);
					oDx.v_RestricctionName = string.Join(", ", ListaRestricciones.Select(p => p.v_Restriccion));

					ListDx.Add(oDx);

				}

				//JerarquizarData
				ServiciosDxs2.ForEach(a =>
				{
					a.Diagnosticos = (ListDx.FindAll(p => p.v_ServiceId == a.v_ServiceId));
				});


				if (componentIds != null)
				{
					var xx = ServiciosDxs2.FindAll(p => componentIds.Contains(p.v_ComponentId));

					var y = xx.GroupBy(g => g.v_ServiceId)
								  .Select(s => s.First());
					pobjOperationResult.Success = 1;
					var y_Final = DevolverFiltroDx(y.ToList(), pstrDxs);

					return y_Final.ToList();
				}
				else
				{
					var y = ServiciosDxs2.GroupBy(g => g.v_ServiceId)
							   .Select(s => s.First());

					if (pFcf == DateTime.Parse("01/01/2050") && pFci == DateTime.Parse("01/01/2000"))
					{
						pobjOperationResult.Success = 1;

						var y_Final = DevolverFiltroDx(y.ToList(), pstrDxs);
						return y_Final.ToList();
					}
					else
					{
						pobjOperationResult.Success = 1;
						var prueba = y.Where(s => s.Diagnosticos.Any(p => p.d_ExpirationDateDiagnostic > pFci && p.d_ExpirationDateDiagnostic < pFcf)).ToList();

						var y_Final = DevolverFiltroDx(prueba.ToList(), pstrDxs);
						return y_Final.ToList();
						//return prueba.ToList();
					}

				}

			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}


		public List<ServiceGridJerarquizadaList> DevolverFiltroDx(List<ServiceGridJerarquizadaList> l, string pstrdxs)
		{
			List<ServiceGridJerarquizadaList> lServicios = new List<ServiceGridJerarquizadaList>();
			ServiceGridJerarquizadaList oServiceGridJerarquizadaList = new ServiceGridJerarquizadaList();

			if (pstrdxs == "")
			{
				return l;
			}
			else
			{
				foreach (var item in l)
				{
					var x = item.Diagnosticos.ToList();
					var users = x.Where(u => u.v_DiseasesName.Contains(pstrdxs.ToUpper())).ToList();
					if (users.Count() > 0)
					{
						lServicios.Add(item);
					}
				}
				return lServicios;
			}


		}
		// Alberto
		public List<ReportInterconsulta> GetReportInterconsulta(string pstrserviceId, string pstrAltitud, string pstrEspecialidad, string pstrLabor, string pstrSolicita, string pstrObservaciones)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
								 from C1 in C1_join.DefaultIfEmpty()


								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
															 equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()

								 join et in dbContext.systemparameter on new { a = C.i_EsoTypeId.Value, b = 118 }
											 equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()




								 where A.v_ServiceId == pstrserviceId
								 select new ReportInterconsulta
								 {
									 ServiceId = A.v_ServiceId,
									 Paciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 HuellaPaciente = B.b_FingerPrintImage,
									 FirmaPaciente = B.b_RubricImage,
									 //FirmaMedicoEvaluador = pme.b_SignatureImage,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Genero = B.i_SexTypeId.Value,
									 NroDocumento = B.v_DocNumber,
									 Puesto = B.v_CurrentOccupation,
									 Observaciones = pstrObservaciones,
									 FechaServicio = A.d_ServiceDate.Value,
									 TipoEso = et.v_Value1
								 });

				var MedicalCenter = GetInfoMedicalCenter();
				var FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrserviceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID);

				var sql = (from a in objEntity.ToList()
						   let Osteo = ValoresComponente(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1)


						   select new ReportInterconsulta
						   {
							   FirmaMedicoEvaluador = FirmaMedicoMedicina.Value5,
							   ServiceId = a.ServiceId,
							   Paciente = a.Paciente,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento),
							   Genero = a.Genero,
							   NroDocumento = a.NroDocumento,
							   HuellaPaciente = a.HuellaPaciente,
							   FirmaPaciente = a.FirmaPaciente,
							   Altitud = pstrAltitud,
							   Especialidad = pstrEspecialidad,
							   Labor = pstrLabor,
							   Solicita = pstrSolicita,
							   Logo = MedicalCenter.b_Image,
							   Puesto = a.Puesto,
							   Observaciones = a.Observaciones,
							   FechaServicio = a.FechaServicio,
							   TipoEso = a.TipoEso

						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}


		// Alberto
		public List<ReportEvaluacionPsicolaboralPersonal> GetReportEvaluacionPsicolaborlaPersonal(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
								 from C1 in C1_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
								 from E in E_join.DefaultIfEmpty()

								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
															 equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join y in dbContext.person on me.v_PersonId equals y.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportEvaluacionPsicolaboralPersonal
								 {
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 Genero = J.v_Value1,
									 FechaNacimiento = B.d_Birthdate.Value,
									 PuestoPostula = B.v_CurrentOccupation,
									 EmpresaCliente = D.v_Name,
									 FechaEvaluacion = A.d_ServiceDate.Value,
									 Evaluador = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,
									 Cpsp = pme.v_ProfessionalCode,
									 FirmaTrabajador = B.b_RubricImage,
									 FirmaProfesional = pme.b_SignatureImage,
									 NombreUsuarioGraba = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaPsicolaborla = ValoresComponente(pstrserviceId, Constants.EVALUACION_PSICOLABORAL)
						   select new ReportEvaluacionPsicolaboralPersonal
						   {

							   Trabajador = a.Trabajador,
							   Genero = a.Genero,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento),
							   PuestoPostula = a.PuestoPostula,
							   EmpresaCliente = a.EmpresaCliente,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Cs = (from n in dbContext.organization
									 where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
									 select n.v_Name).SingleOrDefault<string>(),
							   Evaluador = a.Evaluador,
							   Cpsp = a.Cpsp,
							   FirmaTrabajador = a.FirmaTrabajador,
							   FirmaProfesional = a.FirmaProfesional,

							   _1 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._1).v_Value1,
							   _2 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._2).v_Value1,
							   _3 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._3).v_Value1,
							   _4 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._4).v_Value1,
							   _5 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._5).v_Value1,
							   _6 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._6).v_Value1,
							   _7 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._7).v_Value1,
							   _8 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._8).v_Value1,
							   _9 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._9).v_Value1,
							   _10 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._10).v_Value1,
							   _11 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._11).v_Value1,
							   _12 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._12).v_Value1,
							   _13 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._13).v_Value1,
							   _14 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._14).v_Value1,
							   _15 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._15).v_Value1,
							   _16 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._16).v_Value1,
							   _17 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._17).v_Value1,
							   _18 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._18).v_Value1,
							   _19 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._19).v_Value1,
							   _20 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._20).v_Value1,
							   _21 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._21).v_Value1,
							   _22 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._22).v_Value1,
							   _23 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._23).v_Value1,
							   _24 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._24).v_Value1,
							   _25 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._25).v_Value1,
							   _26 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._26).v_Value1,
							   _27 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._27).v_Value1,
							   _28 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._28).v_Value1,

							   Fatiga = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_FATIGA_OBSERVACIONES).v_Value1,
							   Recomendacion = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_FATIGA_RECOMENDACIONES).v_Value1,
							   Somnolencia = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_SOMNOLENCIA).v_Value1,
							   ConclusionFinal = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_CONCLUSION_FINAL_CONCLUSION).v_Value1,
							   Conclusion = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_CONCLUSION_FINAL_APTITUD).v_Value1,
							   RiesgoEstres = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_RIESGO_ESTRES).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportOsteo> GetReportOsteo(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
								 from C1 in C1_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
								 from E in E_join.DefaultIfEmpty()

								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
															 equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join y in dbContext.person on me.v_PersonId equals y.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportOsteo
								 {
									 ServiceId = A.v_ServiceId,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 FirmaMedico = pme.b_SignatureImage,
									 NombreUsuarioGraba = y.v_FirstLastName + " " + y.v_SecondLastName + " " + y.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let Osteo = ValoresComponente(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1)


						   select new ReportOsteo
						   {

							   ServiceId = a.ServiceId,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   FirmaMedico = a.FirmaMedico,

							   TareasHorasDias = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_JALAR_CARGAS) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_JALAR_CARGAS).v_Value1,
							   TareasFrecuencia = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_LEVANTAR_CARGAS_DESCRIPCION) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_LEVANTAR_CARGAS_DESCRIPCION).v_Value1,
							   TareasHorasSemana = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_EMPUJAR_CARGA_DESCRIPCION) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_EMPUJAR_CARGA_DESCRIPCION).v_Value1,
							   TareasTipo = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.PESOS_SUPERIORES_A_25KG) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.PESOS_SUPERIORES_A_25KG).v_Value1,
							   TareasCiclo = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_LEVANTAR_CARGAS) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_LEVANTAR_CARGAS).v_Value1,
							   TareasCarga = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CARGA) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CARGA).v_Value1,
							   LateralCervical = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.LEVANTAMIENTO_POR_ENCIMA_DELHOMBRODESCRIPCION) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.LEVANTAMIENTO_POR_ENCIMA_DELHOMBRODESCRIPCION).v_Value1,
							   LateralLumbar = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_DE_VALVULAS_DESCRIPCION) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_DE_VALVULAS_DESCRIPCION).v_Value1,
							   LateralDorsal = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_DE_VALVULAS_) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_DE_VALVULAS_).v_Value1,
							   LordosisCervical = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA__) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA__).v_Value1,
							   LordosisLumbar = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.POSTURA_SEDENTARIA__) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.POSTURA_SEDENTARIA__).v_Value1,
							   EscoliosisLumbar = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA_DESCRIPCION_) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA_DESCRIPCION_).v_Value1,
							   ContracturaMuscular = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.SINTOMAS) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.SINTOMAS).v_Value1,
							   DolorEspalda = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.MOVIMIENTOS_REPETITIVOS__) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.MOVIMIENTOS_REPETITIVOS__).v_Value1,
							   ConclusionDescripcion = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.DESCRIPCION) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.DESCRIPCION).v_Value1,
							   Dx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1),
							   Aptitud = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.APTITUD) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.APTITUD).v_Value1,
							   Recomendaciones = GetRecommendationByServiceIdAndComponent(a.ServiceId, Constants.OSTEO_MUSCULAR_ID_1),

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}


		// Alberto
		public List<ReportCuestionarioNordico> GetReportCuestionarioNordico(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																   equals new { a = E.v_ServiceId, b = E.v_ComponentId }
								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId
								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId

                                 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

                                 join D in dbContext.organization on E1.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new ReportCuestionarioNordico
								 {
									 Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Genero = B.i_SexTypeId.Value,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
                                     LOGOCLIENTE = D.b_Image,
                                     
								 });

				var MedicalCenter = GetInfoMedicalCenter();
                var FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrserviceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID);

				var sql = (from a in objEntity.ToList()
						   let CuestNordi = ValoresComponente(pstrserviceId, Constants.C_N_ID)

						   select new ReportCuestionarioNordico
						   {
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Nombre_Trabajador = a.Nombre_Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Genero = a.Genero,
							   Edad = GetAge(a.FechaNacimiento),
                               LOGOCLIENTE = a.LOGOCLIENTE,
                               FirmaMedicina = FirmaMedicoMedicina.Value5,
							   C_N_CABECERA_TIPO_TRABAJO_REALIZA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_TIPO_TRABAJO_REALIZA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_TIPO_TRABAJO_REALIZA_ID).v_Value1,
							   C_N_CABECERA_TIEMPO_LABOR_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_HORAS_TRABAJO_SEMANAL_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_TIEMPO_LABOR_ID).v_Value1,
							   C_N_CABECERA_HORAS_TRABAJO_SEMANAL_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.MANIPULACION_EMPUJAR_CARGA_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_HORAS_TRABAJO_SEMANAL_ID).v_Value1,
							   C_N_CABECERA_DIESTRO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_DIESTRO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_DIESTRO_ID).v_Value1,
							   C_N_CABECERA_ZURDO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_ZURDO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_ZURDO_ID).v_Value1,

							   C_N_LOCOMOCION_TODOS_CUELLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CUELLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CUELLOS_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_HOMBROS_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_CODOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CODOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CODOS_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_MUÑECA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_MUÑECA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_MUÑECA_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_ESPALDA_ALTA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_ALTA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_ALTA_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_BAJA_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_CADERAS_MUSLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CADERAS_MUSLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CADERAS_MUSLOS_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_RODILLAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_RODILLAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_RODILLAS_ID).v_Value1,
							   C_N_LOCOMOCION_TODOS_TOBILLOS_PIES_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_TOBILLOS_PIES_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_TOBILLOS_PIES_ID).v_Value1,

							   C_N_LOCOMOCION_12_MESES_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CUELLO_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_HOMBROS_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_CODOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CODOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CODOS_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_MUÑECA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_MUÑECA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_MUÑECA_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_ESPALDA_ALTA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_ALTA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_ALTA_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_BAJA_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_CADERAS_MUSLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CADERAS_MUSLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CADERAS_MUSLOS_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_RODILLAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_RODILLAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_RODILLAS_ID).v_Value1,
							   C_N_LOCOMOCION_12_MESES_TOBILLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_TOBILLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_TOBILLOS_ID).v_Value1,

							   C_N_LOCOMOCION_7_DIAS_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CUELLO_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_HOMBROS_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_CODOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CODOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CODOS_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_MUÑECA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_MUÑECA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_MUÑECA_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_ESPALDA_ALTA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_ALTA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_ALTA_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_BAJA_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_CADERA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CADERA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CADERA_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_RODILLAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_RODILLAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_RODILLAS_ID).v_Value1,
							   C_N_LOCOMOCION_7_DIAS_TOBILLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_TOBILLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_TOBILLOS_ID).v_Value1,


							   C_N_ESPALDA_BAJA_PROBLEMAS_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_PROBLEMAS_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_PROBLEMAS_ESPALDA_BAJA_ID).v_Value1,
							   C_N_ESPALDA_BAJA_HOSPITALIZADO_PROBLEMA_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_HOSPITALIZADO_PROBLEMA_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_HOSPITALIZADO_PROBLEMA_ESPALDA_BAJA_ID).v_Value1,
							   C_N_ESPALDA_BAJA_CAMBIOS_TRABAJO_ACTIVIDAD_PROBLEMA_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CAMBIOS_TRABAJO_ACTIVIDAD_PROBLEMA_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CAMBIOS_TRABAJO_ACTIVIDAD_PROBLEMA_ESPALDA_BAJA_ID).v_Value1,
							   C_N_ESPALDA_BAJA_CURACION_TOTAL_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CURACION_TOTAL_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CURACION_TOTAL_ESPALDA_BAJA_ID).v_Value1,
							   C_N_ESPALDA_BAJA_ACTIVIDAD_TRABAJO_1_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_TRABAJO_1_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_TRABAJO_1_ID).v_Value1,
							   C_N_ESPALDA_BAJA_ACTIVIDAD_RECREATIVA_1_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_RECREATIVA_1_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_RECREATIVA_1_ID).v_Value1,

							   C_N_DURACION_PRBLEMAS_IMPEDIR_RUTINA_1_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_DURACION_PRBLEMAS_IMPEDIR_RUTINA_1_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_DURACION_PRBLEMAS_IMPEDIR_RUTINA_1_ID).v_Value1,
							   C_N_VISTO_PROFESIONAL_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_VISTO_PROFESIONAL_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_VISTO_PROFESIONAL_ESPALDA_BAJA_ID).v_Value1,
							   C_N_PROBLEMAS_ESPALDA_BAJA_7_DIAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_ESPALDA_BAJA_7_DIAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_ESPALDA_BAJA_7_DIAS_ID).v_Value1,


							   C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_LESION_HOMBROS_ACCIDENTES_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_LESION_HOMBROS_ACCIDENTES_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_LESION_HOMBROS_ACCIDENTES_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_CAMBIO_TRABAJO_ACTIVIDAD_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_CAMBIO_TRABAJO_ACTIVIDAD_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_CAMBIO_TRABAJO_ACTIVIDAD_HOMBROS_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ULTIMOS_12_MESES_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ULTIMOS_12_MESES_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ULTIMOS_12_MESES_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_TIEMPO_TOTAL_PROBLEMAS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_TIEMPO_TOTAL_PROBLEMAS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_TIEMPO_TOTAL_PROBLEMAS_HOMBROS_ID).v_Value1,


							   C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_TRABAJO_2_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_TRABAJO_2_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_TRABAJO_2_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_RECREATIVA_2_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_RECREATIVA_2_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_RECREATIVA_2_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_DURACION_PRBLEMAS_IMPEDIR_RUTINA_2_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_DURACION_PRBLEMAS_IMPEDIR_RUTINA_2_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_DURACION_PRBLEMAS_IMPEDIR_RUTINA_2_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_VISTO_PROFESIONAL_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_VISTO_PROFESIONAL_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_VISTO_PROFESIONAL_HOMBROS_ID).v_Value1,
							   C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_DURANTE_7_DIAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_DURANTE_7_DIAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_DURANTE_7_DIAS_ID).v_Value1,

							   C_N_PROBLEMA_CUELLO_PROBLEMA_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMA_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMA_CUELLO_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_LESIONADO_CUELLO_ACCIDENTE_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_LESIONADO_CUELLO_ACCIDENTE_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_LESIONADO_CUELLO_ACCIDENTE_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_CAMBIO_TRABAJO_PROBLEMA_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_CAMBIO_TRABAJO_PROBLEMA_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_CAMBIO_TRABAJO_PROBLEMA_CUELLO_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_DURACION_TOTAL_TIEMPO_PROBLEMA_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_TOTAL_TIEMPO_PROBLEMA_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_TOTAL_TIEMPO_PROBLEMA_CUELLO_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_DURACION_PRBLEMAS_IMPEDIR_RUTINA_3_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_PRBLEMAS_IMPEDIR_RUTINA_3_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_PRBLEMAS_IMPEDIR_RUTINA_3_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_VISTO_PROFESIONAL_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_VISTO_PROFESIONAL_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_VISTO_PROFESIONAL_CUELLO_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_PROBLEMAS_CUELLO_DURANTE_7_DIAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMAS_CUELLO_DURANTE_7_DIAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMAS_CUELLO_DURANTE_7_DIAS_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_ACTIVIDAD_TRABAJO_3_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_TRABAJO_3_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_TRABAJO_3_ID).v_Value1,
							   C_N_PROBLEMA_CUELLO_ACTIVIDAD_RECREATIVA_3_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_RECREATIVA_3_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_RECREATIVA_3_ID).v_Value1,
							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportCuestionarioActividadFisica> GetReportCuestionarioActividadFisica(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
															 equals new { a = E.v_ServiceId, b = E.v_ComponentId }
								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId
								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId
								 where A.v_ServiceId == pstrserviceId
								 select new ReportCuestionarioActividadFisica
								 {
									 Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaServicio = A.d_ServiceDate.Value,
									 IdServicio = A.v_ServiceId,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let CuestNordi = ValoresComponente(pstrserviceId, Constants.CUESTIONARIO_ACTIVIDAD_FISICA)

						   select new ReportCuestionarioActividadFisica
						   {

							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Nombre_Trabajador = a.Nombre_Trabajador,
							   FechaServicio = a.FechaServicio,
							   IdServicio = a.IdServicio,


							   CUESTIONARIO_ACTIVIDAD_FISICA_1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_1).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_2).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_3 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_3) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_3).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_4 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_4) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_4).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_5 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_5) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_5).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_6 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_6) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_6).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_7 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_7) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_7).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_8 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_8) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_8).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_9 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_9) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_9).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_10 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_10) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_10).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_11 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_11) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_11).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_12 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_12) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_12).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_13 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_13) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_13).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_14 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_14) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_14).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_15 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_15) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_15).v_Value1,
							   CUESTIONARIO_ACTIVIDAD_FISICA_16 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_16) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_16).v_Value1,
							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportInformeEcograficoProstata> GetReportInformeEcograficoProstata(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
									   equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId into F_join
								 from F in F_join.DefaultIfEmpty()

								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId


								 where A.v_ServiceId == pstrserviceId
								 select new ReportInformeEcograficoProstata
								 {
									 Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let CuestNordi = ValoresComponente(pstrserviceId, Constants.INFORME_ECOGRAFICO_PROSTATA_ID)

						   select new ReportInformeEcograficoProstata
						   {
							   Nombre_Trabajador = a.Nombre_Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento),

							   INFORME_ECOGRAFICO_PROSTATA_MOTIVO_EXAMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_MOTIVO_EXAMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_MOTIVO_EXAMEN).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_RECEPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RECEPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RECEPCION).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_PAREDES1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES1).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_PAREDES2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES2).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_CONT_ANECOICO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONT_ANECOICO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONT_ANECOICO).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_IAMGENES_EXPANSIVAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_IAMGENES_EXPANSIVAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_IAMGENES_EXPANSIVAS).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_CALCULOS_INTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CALCULOS_INTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CALCULOS_INTERIOR).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_TAMAÑO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_TAMAÑO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_TAMAÑO).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_VOL_PREMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_PREMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_PREMICCIONAL).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_VOL_POSMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_POSMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_POSMICCIONAL).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_RETECION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RETECION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RETECION).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_BORDES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_BORDES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_BORDES).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_TRANSVERSO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_TRANSVERSO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_TRANSVERSO).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_ANTERO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ANTERO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ANTERO).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_LONGITUDINAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_LONGITUDINAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_LONGITUDINAL).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_VOLUMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_VOLUMEN_VN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN_VN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN_VN).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_ECOESTRUCTURA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ECOESTRUCTURA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ECOESTRUCTURA).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_DESCRIPCION_OTROS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DESCRIPCION_OTROS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DESCRIPCION_OTROS).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_NINGUNA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_NINGUNA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_NINGUNA).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_OBSERVACIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_OBSERVACIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_OBSERVACIONES).v_Value1,
							   INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportInformeEcograficoAbdominal> GetReportInformeEcograficoAbdominal(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																  equals new { a = E.v_ServiceId, b = E.v_ComponentId }
								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId into F_join
								 from F in F_join.DefaultIfEmpty()

								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId
								 where A.v_ServiceId == pstrserviceId
								 select new ReportInformeEcograficoAbdominal
								 {
									 Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 FechaServicio = A.d_ServiceDate.Value,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let CuestNordi = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_ABDOMINAL_ID)

						   select new ReportInformeEcograficoAbdominal
						   {
							   Nombre_Trabajador = a.Nombre_Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento),
							   FechaServicio = a.FechaServicio,
							   ECOGRAFIA_ABDOMINAL_MOTIVO_EXAMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MOTIVO_EXAMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MOTIVO_EXAMEN).v_Value1,
							   ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD).v_Value1,
							   ECOGRAFIA_ABDOMINAL_BORDES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES).v_Value1,
							   ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD_DESCRIPCION).v_Value1,
							   ECOGRAFIA_ABDOMINAL_BORDES_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES_DESCRIPCION).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DIMENSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES).v_Value1,
							   ECOGRAFIA_ABDOMINAL_PAREMQUIMA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DIMENSIONES_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES_DESCRIPCION).v_Value1,
							   ECOGRAFIA_ABDOMINAL_ECOGENICIDA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ECOGENICIDA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ECOGENICIDA).v_Value1,
							   ECOGRAFIA_ABDOMINAL_IMAGENES_EXPANSIVAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_IMAGENES_EXPANSIVAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_IMAGENES_EXPANSIVAS).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DILATACION_VIAS_BILIARES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DILATACION_VIAS_BILIARES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DILATACION_VIAS_BILIARES).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DIAMETRO_COLEDOCO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_COLEDOCO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_COLEDOCO).v_Value1,
							   ECOGRAFIA_ABDOMINAL_FORMA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA).v_Value1,
							   ECOGRAFIA_ABDOMINAL_FORMA_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA_DESCRIPCION).v_Value1,
							   ECOGRAFIA_ABDOMINAL_PAREDES1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES1).v_Value1,
							   ECOGRAFIA_ABDOMINAL_PAREDES2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES2).v_Value1,
							   ECOGRAFIA_ABDOMINAL_CONT_ANECOICO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONT_ANECOICO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONT_ANECOICO).v_Value1,
							   ECOGRAFIA_ABDOMINAL_BARRO_BILIAR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BARRO_BILIAR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BARRO_BILIAR).v_Value1,
							   ECOGRAFIA_ABDOMINAL_CALCULOS_INTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_INTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_INTERIOR).v_Value1,
							   ECOGRAFIA_ABDOMINAL_CALCULOS_TAMAÑO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_TAMAÑO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_TAMAÑO).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DIAMETRO_TRANSVERSO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_TRANSVERSO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_TRANSVERSO).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DIAMETRO_LOGITUDINAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_LOGITUDINAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_LOGITUDINAL).v_Value1,

							   ECOGRAFIA_ABDOMINAL_PANCREAS_MORFOLOGIA_MOVILIDAD = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PANCREAS_MORFOLOGIA_MOVILIDAD) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PANCREAS_MORFOLOGIA_MOVILIDAD).v_Value1,
							   ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS).v_Value1,
							   ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS_DESCRIPCION).v_Value1,

							   ECOGRAFIA_ABDOMINAL_CABEZA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CABEZA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CABEZA).v_Value1,

							   ECOGRAFIA_ABDOMINAL_CUELLO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CUELLO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CUELLO).v_Value1,

							   ECOGRAFIA_ABDOMINAL_CUERNO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CUERNO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CUERNO).v_Value1,
							   ECOGRAFIA_ABDOMINAL_COLA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_COLA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_COLA).v_Value1,


							   ECOGRAFIA_ABDOMINAL_MEDIDAD_NO_EVALUABLES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MEDIDAD_NO_EVALUABLES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MEDIDAD_NO_EVALUABLES).v_Value1,
							   ECOGRAFIA_ABDOMINAL_ANORMAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ANORMAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ANORMAL).v_Value1,
							   ECOGRAFIA_ABDOMINAL_DIAMETRO_ANTOPOSTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_ANTOPOSTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_ANTOPOSTERIOR).v_Value1,
							   ECOGRAFIA_ABDOMINAL_LONGUITUD = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LONGUITUD) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LONGUITUD).v_Value1,
							   ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS).v_Value1,
							   ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS_DESCRIPCION).v_Value1,

							   ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL).v_Value1,
							   ECOGRAFIA_ABDOMINAL_NINGUNA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_NINGUNA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_NINGUNA).v_Value1,
							   ECOGRAFIA_ABDOMINAL_OBSERVACIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_OBSERVACIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_OBSERVACIONES).v_Value1,
							   ECOGRAFIA_ABDOMINAL_CONCLUSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES).v_Value1,
							   ECOGRAFIA_ABDOMINAL_PAREMQUIMA_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA_DESCRIPCION).v_Value1,
							   ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL_DESCRIPCION).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportInformeEcograficoRenal> GetReportInformeEcograficoRenal(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }
								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId into F_join
								 from F in F_join.DefaultIfEmpty()

								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportInformeEcograficoRenal
								 {
									 Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 FechaServicio = A.d_ServiceDate.Value,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();
                var CuestNordi = ValoresComponente(pstrserviceId, pstrComponentId);
				var sql = (from a in objEntity.ToList()
						   

						   select new ReportInformeEcograficoRenal
						   {
							   Nombre_Trabajador = a.Nombre_Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento),
							   FechaServicio = a.FechaServicio,
                               //Nombre del data set =  cambiar la constante por el id del camp
							   ECOGRAFIA_RENAL_MOTIVO_EXAMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000000456") == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000000456").v_Value1,
							   ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_DERECHO).v_Value1,

							   ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_DERECHO).v_Value1,

							   ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_DERECHO).v_Value1,


							   ECOGRAFIA_RENAL_LONGITUD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000001541") == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000001541").v_Value1,

							   ECOGRAFIA_RENAL_PARENQUIMA_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000001542") == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000001542").v_Value1,

							   ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_DERECHO).v_Value1,


							   ECOGRAFIA_RENAL_QUISTICAS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_DERECHO).v_Value1,


							   ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_DERECHO).v_Value1,


							   ECOGRAFIA_RENAL_MICROLITIAS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_DERECHO).v_Value1,

							   ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000001547") == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == "N009-MF000001547").v_Value1,




							   ECOGRAFIA_RENAL_CALCULOS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_DERECHO).v_Value1,

							   ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_DERECHO).v_Value1,

							   ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_IZQUIERDO).v_Value1,

							   ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_IZQUIERDO).v_Value1,



							   ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_IZQUIERDO).v_Value1,


							   ECOGRAFIA_RENAL_LONGITUD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_LONGITUD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_LONGITUD_RINION_IZQUIERDO).v_Value1,


							   ECOGRAFIA_RENAL_PARENQUIMA_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PARENQUIMA_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PARENQUIMA_RINION_IZQUIERDO).v_Value1,
							   ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_IZQUIERDO).v_Value1,
							   ECOGRAFIA_RENAL_QUISTICAS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_IZQUIERDO).v_Value1,
							   ECOGRAFIA_RENAL_MICROLITIAS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_IZQUIERDO).v_Value1,
							   ECOGRAFIA_RENAL_CALCULOS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_IZQUIERDO).v_Value1,

							   ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_IZQUIERDO).v_Value1,
							   ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_IZQUIERDO).v_Value1,
							   ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_DERECHO).v_Value1,

							   ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_IZQUIERDO).v_Value1,

							   ECOGRAFIA_RENAL_REPLICACION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_REPLICACION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_REPLICACION).v_Value1,

							   ECOGRAFIA_RENAL_PAREDES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PAREDES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PAREDES).v_Value1,
							   ECOGRAFIA_RENAL_CONT_ANECOICO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONT_ANECOICO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONT_ANECOICO).v_Value1,


							   ECOGRAFIA_RENAL_IMG_EXPANSIVAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXPANSIVAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXPANSIVAS).v_Value1,
							   ECOGRAFIA_RENAL_CALCULOS_INTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR).v_Value1,



							   ECOGRAFIA_RENAL_CALCULOS_INTERIOR_MEDIDA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR_MEDIDA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR_MEDIDA).v_Value1,
							   ECOGRAFIA_RENAL_VOL_PREMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_PREMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_PREMICCIONAL).v_Value1,
							   ECOGRAFIA_RENAL_VOL_POSMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_POSMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_POSMICCIONAL).v_Value1,

							   ECOGRAFIA_RENAL_RETENCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_RETENCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_RETENCION).v_Value1,

							   ECOGRAFIA_RENAL_DESCRIPCION_VEGIGA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_VEGIGA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_VEGIGA).v_Value1,
							   ECOGRAFIA_RENAL_NIGUNA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_NIGUNA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_NIGUNA).v_Value1,
							   ECOGRAFIA_RENAL_OBSERVACIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_OBSERVACIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_OBSERVACIONES).v_Value1,
							   ECOGRAFIA_RENAL_CONCLUSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONCLUSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONCLUSIONES).v_Value1,
							   ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_IZQUIERDO).v_Value1,
							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportTestVertigo> GetReportTestVertigo(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 //join me in dbContext.systemuser on A.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 //from me in me_join.DefaultIfEmpty()


								 //join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 //from pme in pme_join.DefaultIfEmpty()
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId into F_join
								 from F in F_join.DefaultIfEmpty()

								 join pme in dbContext.professional on F.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportTestVertigo
								 {
									 EmpresaCliente = D1.v_Name,
									 Nombres = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Fecha = A.d_ServiceDate.Value,
									 Firma = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let CuestNordi = ValoresComponente(pstrserviceId, Constants.TEST_VERTIGO_ID)

						   select new ReportTestVertigo
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   Nombres = a.Nombres,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento),
							   Fecha = a.Fecha,
							   Firma = a.Firma,
							   TEST_VERTIGO_1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_1).v_Value1,
							   TEST_VERTIGO_2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_2).v_Value1,
							   TEST_VERTIGO_3 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_3) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_3).v_Value1,
							   TEST_VERTIGO_4 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_4) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_4).v_Value1,
							   TEST_VERTIGO_5 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_5) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_5).v_Value1,
							   TEST_VERTIGO_6 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_6) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_6).v_Value1,
							   TEST_VERTIGO_7 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_7) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_7).v_Value1,
							   TEST_VERTIGO_8 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_8) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_8).v_Value1,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   Logo = MedicalCenter.b_Image,
							   Dx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.TEST_VERTIGO_ID),
							   Recomendaciones = ConcatenarRecomendacionesPorComponente(pstrserviceId, Constants.TEST_VERTIGO_ID)
						   }).ToList();


				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportEvaCardiologica> GetReportEvaluacionCardiologia(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on A.i_InsertUserOccupationalMedicalId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join F in dbContext.systemuser on E.i_ApprovedUpdateUserId equals F.i_SystemUserId into F_join
								 from F in F_join.DefaultIfEmpty()

								 join Z in dbContext.person on F.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportEvaCardiologica
								 {
									 NombreTrabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 Fecha = A.d_ServiceDate.Value,
									 FirmaMedico = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaCardio = ValoresComponente(pstrserviceId, Constants.EVA_CARDIOLOGICA_ID)

						   select new ReportEvaCardiologica
						   {
							   NombreTrabajador = a.NombreTrabajador,
							   Fecha = a.Fecha,
							   FirmaMedico = a.FirmaMedico,
							   EVA_CARDIOLOGICA_SOPLO_CARDIACO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SOPLO_CARDIACO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SOPLO_CARDIACO).v_Value1,
							   EVA_CARDIOLOGICA_PRESION_ALTA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ALTA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ALTA).v_Value1,
							   EVA_CARDIOLOGICA_CANSANCIO_RAPIDO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CANSANCIO_RAPIDO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CANSANCIO_RAPIDO).v_Value1,
							   EVA_CARDIOLOGICA_MAREOS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS).v_Value1,
							   EVA_CARDIOLOGICA_DOLOR_PRECORDIAL = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DOLOR_PRECORDIAL) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DOLOR_PRECORDIAL).v_Value1,
							   EVA_CARDIOLOGICA_PALPITACIONES = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES).v_Value1,
							   EVA_CARDIOLOGICA_ATAQUE_CORAZON = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ATAQUE_CORAZON) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ATAQUE_CORAZON).v_Value1,
							   EVA_CARDIOLOGICA_PERDIDA_CONCIENCIA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PERDIDA_CONCIENCIA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PERDIDA_CONCIENCIA).v_Value1,
							   EVA_CARDIOLOGICA_OBESIDAD = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OBESIDAD) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OBESIDAD).v_Value1,
							   EVA_CARDIOLOGICA_TABAQUISMO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_TABAQUISMO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_TABAQUISMO).v_Value1,
							   EVA_CARDIOLOGICA_DIABETES = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DIABETES) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DIABETES).v_Value1,
							   EVA_CARDIOLOGICA_DISLIPIDEMIA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISLIPIDEMIA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISLIPIDEMIA).v_Value1,
							   EVA_CARDIOLOGICA_VARICES_PIERNAS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_VARICES_PIERNAS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_VARICES_PIERNAS).v_Value1,
							   EVA_CARDIOLOGICA_SEDENTARISMO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SEDENTARISMO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SEDENTARISMO).v_Value1,
							   EVA_CARDIOLOGICA_OTROS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS).v_Value1,

							   EVA_CARDIOLOGICA_PRECORDIAL_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRECORDIAL_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRECORDIAL_1).v_Value1,
							   EVA_CARDIOLOGICA_DESMAYOS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DESMAYOS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DESMAYOS).v_Value1,
							   EVA_CARDIOLOGICA_PALPITACIONES_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES_1).v_Value1,
							   EVA_CARDIOLOGICA_DISNEA_PAROXISTICA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISNEA_PAROXISTICA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISNEA_PAROXISTICA).v_Value1,
							   EVA_CARDIOLOGICA_MAREOS_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS_1).v_Value1,
							   EVA_CARDIOLOGICA_CLAUDICACION = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CLAUDICACION) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CLAUDICACION).v_Value1,
							   EVA_CARDIOLOGICA_OTROS_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS_1).v_Value1,

							   EVA_CARDIOLOGICA_FREC_CARDIACA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FREC_CARDIACA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FREC_CARDIACA).v_Value1,
							   EVA_CARDIOLOGICA_PRESION_ARTERIAL = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ARTERIAL) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ARTERIAL).v_Value1,
							   EVA_CARDIOLOGICA_CHOQUE_PUNTA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CHOQUE_PUNTA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CHOQUE_PUNTA).v_Value1,

							   EVA_CARDIOLOGICA_RITMO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_RITMO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_RITMO).v_Value1,
							   EVA_CARDIOLOGICA_EJE = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_EJE) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_EJE).v_Value1,
							   EVA_CARDIOLOGICA_FC = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FC) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FC).v_Value1,
							   EVA_CARDIOLOGICA_PR = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PR) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PR).v_Value1,
							   EVA_CARDIOLOGICA_QRS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QRS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QRS).v_Value1,
							   EVA_CARDIOLOGICA_QT = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QT) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QT).v_Value1,
							   EVA_CARDIOLOGICA_ONDA_Q = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_Q) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_Q).v_Value1,
							   EVA_CARDIOLOGICA_ONDA_P = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_P) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_P).v_Value1,
							   EVA_CARDIOLOGICA_ONDA_R = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_R) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_R).v_Value1,
							   EVA_CARDIOLOGICA_ONDA_S = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_S) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_S).v_Value1,
							   EVA_CARDIOLOGICA_ONDA_T = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_T) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_T).v_Value1,
							   EVA_CARDIOLOGICA_ONDA_U = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_U) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_U).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   Conclusiones = GetDiagnosticByServiceIdAndComponent(pstrserviceId, pstrComponentId) == null ? "Examen sin alteración" : GetDiagnosticByServiceIdAndComponent(pstrserviceId, pstrComponentId),
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alejandro
		private string ConcatenateEppsAndPercentage(string pstrHistoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			int[] tipoEPPRuido = { (int)TipoEPP.Orejeras, 
								   (int)TipoEPP.TaponesAuditivosEspuma,
								   (int)TipoEPP.TaponesAuditivosSilicona 
								 };

			var qry = (from a in dbContext.typeofeep
					   join C1 in dbContext.systemparameter on new { a = a.i_TypeofEEPId.Value, b = 146 }
																equals new { a = C1.i_ParameterId, b = C1.i_GroupId }
					   where a.v_HistoryId == pstrHistoryId &&
							 a.i_IsDeleted == 0 &&
							 tipoEPPRuido.Contains(a.i_TypeofEEPId.Value)
					   select new
					   {
						   v_Epps = C1.v_Value1,
						   r_Percentage = a.r_Percentage
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_Epps + " " + p.r_Percentage + " % "));

			//return string.Join(", ", qry.Select(p => 
			//    new { v_Epps = p.v_Epps, 
			//          r_Percentage = p.r_Percentage 

			//        }));

		}

		// Alejandro
		public List<ReportHistoriaOcupacionalList> ReportHistoriaOcupacionalAudiometria(string pstrserviceId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var isDeleted = 0;

				var ruido = (int)PeligrosEnElPuesto.Ruido;

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join D in dbContext.history on B.v_PersonId equals D.v_PersonId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join wd in dbContext.workstationdangers on D.v_HistoryId equals wd.v_HistoryId into wd_join
								 from wd in wd_join.DefaultIfEmpty()

								 //*****
								 join ter in dbContext.systemparameter on new { a = wd.i_NoiseSource.Value, b = (int)SystemParameterGroups.TiempoExpsosicionRuido } // Tiempo exp. al ruido
											   equals new { a = ter.i_ParameterId, b = ter.i_GroupId } into ter_join
								 from ter in ter_join.DefaultIfEmpty()

								 join nr in dbContext.systemparameter on new { a = wd.i_NoiseLevel.Value, b = (int)SystemParameterGroups.NivelRuido } // Nivel de ruido
											  equals new { a = nr.i_ParameterId, b = nr.i_GroupId } into nr_join
								 from nr in nr_join.DefaultIfEmpty()
								 //************

								 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId into pro_join
								 from pro in pro_join.DefaultIfEmpty()

								 // Empresa / Sede Trabajo  ********************************************************
								 join ow in dbContext.organization on new { a = pro.v_WorkingOrganizationId }
										 equals new { a = ow.v_OrganizationId } into ow_join
								 from ow in ow_join.DefaultIfEmpty()

								 join lw in dbContext.location on new { a = pro.v_WorkingOrganizationId, b = pro.v_WorkingLocationId }
									  equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
								 from lw in lw_join.DefaultIfEmpty()

								 //************************************************************************************

								 where (A.v_ServiceId == pstrserviceId) &&
									   (D.i_IsDeleted == isDeleted) &&
									   (wd.i_DangerId == ruido)

								 select new ReportHistoriaOcupacionalList
								 {
									 IdHistory = D.v_HistoryId,
									 //Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 IdServicio = A.v_ServiceId,
									 FNacimiento = B.d_Birthdate,
									 Genero = B.i_SexTypeId.Value,
                                     LugarNacimiento = B.v_AdressLocation,

									 Puesto = B.v_CurrentOccupation,
									 FechaInicio = D.d_StartDate,
									 FechaFin = D.d_EndDate,
									 Empresa = D.v_Organization,
									 Altitud = D.i_GeografixcaHeight.Value,
									 AreaTrabajo = D.v_TypeActivity,
									 PuestoTrabajo = D.v_workstation,

									 FuenteRuidoName = wd.v_TimeOfExposureToNoise,
									 NivelRuidoName = nr.v_Value1,
									 TiempoExpoRuidoName = ter.v_Value1,
									 v_PersonId = B.v_PersonId,
									 //
									 v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 v_WorkingOrganizationName = ow.v_Name,
									 v_FullWorkingOrganizationName = ow.v_Name + " / " + lw.v_Name,
									 NroDocumento = B.v_DocNumber,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let date1 = a.FechaInicio == null ? "" : a.FechaInicio.Value.ToString("MMMM / yyyy")
						   let date2 = a.FechaFin == null ? "" : a.FechaFin.Value.ToString("MMMM / yyyy")

						   select new ReportHistoriaOcupacionalList
						   {
							   IdHistory = a.IdHistory,
							   //Trabajador = a.Trabajador,
							   IdServicio = a.IdServicio,
							   FechaNacimiento = a.FNacimiento == null ? "" : a.FNacimiento.Value.ToString("dd/MM/yyyy"),
							   Genero = a.Genero,
							   LugarNacimiento = a.LugarNacimiento,

							   Puesto = a.Puesto,
							   FechaInicio = a.FechaInicio,
							   FechaFin = a.FechaFin,
							   Fechas = "Fecha Ini. \n" + date1 + "\n" + "Fecha Fin. \n" + date2,
							   Empresa = a.Empresa,

							   AreaTrabajo = a.AreaTrabajo,
							   PuestoTrabajo = a.PuestoTrabajo,

							   //Peligros = ConcatenateExposiciones(a.IdHistory),
							   Epp = ConcatenateEppsAndPercentage(a.IdHistory),

							   FuenteRuidoName = a.FuenteRuidoName,
							   NivelRuidoName = a.NivelRuidoName,
							   TiempoExpoRuidoName = a.TiempoExpoRuidoName,
							   v_PersonId = a.v_PersonId,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

							   //
							   v_FullPersonName = a.v_FullPersonName,
							   v_WorkingOrganizationName = a.v_WorkingOrganizationName,
							   v_FullWorkingOrganizationName = a.v_FullWorkingOrganizationName,
							   NroDocumento = a.NroDocumento,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}


		// Alejandro
		public List<DiagnosticRepositoryList> GetDiagnosticRepositoryByComponent(string pstrServiceId, string componentId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var isDeleted = 0;
				var recomId = (int)Typifying.Recomendaciones;

				var qryRecom = (from dr in dbContext.diagnosticrepository
								join a in dbContext.recommendation on dr.v_DiagnosticRepositoryId equals a.v_DiagnosticRepositoryId  // RECOMENDACIONES
								join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId

								where dr.v_ServiceId == pstrServiceId &&
									  dr.v_ComponentId == componentId &&
									  a.i_IsDeleted == isDeleted &&
									  eee.i_TypifyingId == recomId
								select new RecomendationList
								{
									v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId,
									v_RecommendationName = eee.v_Name,
									v_ServiceId = dr.v_ServiceId
								}).ToList();

				var restricId = (int)Typifying.Restricciones;

				var qryRestric = (from dr in dbContext.diagnosticrepository
								  join a in dbContext.restriction on dr.v_DiagnosticRepositoryId equals a.v_DiagnosticRepositoryId  // RECOMENDACIONES
								  join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

								  where dr.v_ServiceId == pstrServiceId &&
										dr.v_ComponentId == componentId &&
										a.i_IsDeleted == isDeleted &&
										eee.i_TypifyingId == restricId
								  select new RestrictionList
								  {
									  v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId,
									  v_RestrictionName = eee.v_Name,
									  v_ServiceId = dr.v_ServiceId
								  }).ToList();


				var query = (from ccc in dbContext.diagnosticrepository

							 //join sss in dbContext.service on ccc.v_ServiceId equals sss.v_ServiceId  // ESO

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
							 from ddd in ddd_join.DefaultIfEmpty()
							 // Diagnosticos

							 where (ccc.v_ServiceId == pstrServiceId) &&
								   (ccc.v_ComponentId == componentId) &&
								   (ccc.i_IsDeleted == 0)
							 //&&(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
							 //ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 i_AutoManualId = ccc.i_AutoManualId,
								 i_PreQualificationId = ccc.i_PreQualificationId,
								 i_FinalQualificationId = ccc.i_FinalQualificationId,
								 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,

								 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,

								 v_DiseasesName = ddd.v_Name,
								 v_ComponentFieldsId = ccc.v_ComponentFieldId

							 }).ToList();

				query.ForEach(a =>
				{
					a.Recomendations = qryRecom.FindAll(p => p.v_DiagnosticRepositoryId == a.v_DiagnosticRepositoryId);
					a.Restrictions = qryRestric.FindAll(p => p.v_DiagnosticRepositoryId == a.v_DiagnosticRepositoryId);
				});


				//var q = (from a in query
				//         select new DiagnosticRepositoryList
				//         {
				//             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
				//             v_ServiceId = a.v_ServiceId,
				//             v_DiseasesId = a.v_DiseasesId,
				//             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
				//             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,



				//             v_DiseasesName = a.v_DiseasesName,
				//             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
				//             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
				//             v_AptitudeStatusName = a.v_AptitudeStatusName,
				//             v_OccupationName = a.v_OccupationName  // por ahora se muestra el GESO
				//         }).ToList();


				return query;
			}
			catch (Exception ex)
			{

				return null;
			}
		}

		// Alejandro
		public List<AudiometriaUserControlList> ReportAudiometriaUserControl(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var audiometriaList = new List<AudiometriaUserControlList>();

				var __sql = ValoresComponentesUserControl(pstrserviceId, pstrComponentId);

				if (__sql.Count == 0)
					return audiometriaList;

				var multimediaFileId_OD = string.Empty;
				var multimediaFileId_OI = string.Empty;

				var xMultimediaFileId_OD = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_MULTIMEDIA_FILE_OD);
				if (xMultimediaFileId_OD != null)
					multimediaFileId_OD = xMultimediaFileId_OD.v_Value1;

				var xMultimediaFileId_OI = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_MULTIMEDIA_FILE_OI);
				if (xMultimediaFileId_OI != null)
					multimediaFileId_OI = xMultimediaFileId_OI.v_Value1;

				var img_OD = (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId_OD select mf.b_File).SingleOrDefault();
				var img_OI = (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId_OI select mf.b_File).SingleOrDefault();

				var ent = new AudiometriaUserControlList();
				// OD
				var xVA_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_125);
				if (xVA_OD_125 != null)
					ent.VA_OD_125 = xVA_OD_125.v_Value1;

				var xVA_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_250);
				if (xVA_OD_250 != null)
					ent.VA_OD_250 = xVA_OD_250.v_Value1;

				var xVA_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_500);
				if (xVA_OD_500 != null)
					ent.VA_OD_500 = xVA_OD_500.v_Value1;

				var xVA_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_1000);
				if (xVA_OD_1000 != null)
					ent.VA_OD_1000 = xVA_OD_1000.v_Value1;

				var xVA_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_2000);
				if (xVA_OD_2000 != null)
					ent.VA_OD_2000 = xVA_OD_2000.v_Value1;

				var xVA_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_3000);
				if (xVA_OD_3000 != null)
					ent.VA_OD_3000 = xVA_OD_3000.v_Value1;

				var xVA_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_4000);
				if (xVA_OD_4000 != null)
					ent.VA_OD_4000 = xVA_OD_4000.v_Value1;

				var xVA_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_6000);
				if (xVA_OD_6000 != null)
					ent.VA_OD_6000 = xVA_OD_6000.v_Value1;

				var xVA_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_8000);
				if (xVA_OD_8000 != null)
					ent.VA_OD_8000 = xVA_OD_8000.v_Value1;





				var xVO_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_125);
				if (xVO_OD_125 != null)
					ent.VO_OD_125 = xVO_OD_125.v_Value1;

				var xVO_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_250);
				if (xVO_OD_250 != null)
					ent.VO_OD_250 = xVO_OD_250.v_Value1;

				var xVO_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_500);
				if (xVO_OD_500 != null)
					ent.VO_OD_500 = xVO_OD_500.v_Value1;

				var xVO_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_1000);
				if (xVO_OD_1000 != null)
					ent.VO_OD_1000 = xVO_OD_1000.v_Value1;

				var xVO_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_2000);
				if (xVO_OD_2000 != null)
					ent.VO_OD_2000 = xVO_OD_2000.v_Value1;

				var xVO_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_3000);
				if (xVO_OD_3000 != null)
					ent.VO_OD_3000 = xVO_OD_3000.v_Value1;

				var xVO_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_4000);
				if (xVO_OD_4000 != null)
					ent.VO_OD_4000 = xVO_OD_4000.v_Value1;

				var xVO_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_6000);
				if (xVO_OD_6000 != null)
					ent.VO_OD_6000 = xVO_OD_6000.v_Value1;

				var xVO_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_8000);
				if (xVO_OD_8000 != null)
					ent.VO_OD_8000 = xVO_OD_8000.v_Value1;



				var xEM_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_125);
				if (xEM_OD_125 != null)
					ent.EM_OD_125 = xEM_OD_125.v_Value1;

				var xEM_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_250);
				if (xEM_OD_250 != null)
					ent.EM_OD_250 = xEM_OD_250.v_Value1;

				var xEM_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_500);
				if (xEM_OD_500 != null)
					ent.EM_OD_500 = xEM_OD_500.v_Value1;

				var xEM_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_1000);
				if (xEM_OD_1000 != null)
					ent.EM_OD_1000 = xEM_OD_1000.v_Value1;

				var xEM_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_2000);
				if (xEM_OD_2000 != null)
					ent.EM_OD_2000 = xEM_OD_2000.v_Value1;

				var xEM_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_3000);
				if (xEM_OD_3000 != null)
					ent.EM_OD_3000 = xEM_OD_3000.v_Value1;

				var xEM_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_4000);
				if (xEM_OD_4000 != null)
					ent.EM_OD_4000 = xEM_OD_4000.v_Value1;

				var xEM_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_6000);
				if (xEM_OD_6000 != null)
					ent.EM_OD_6000 = xEM_OD_6000.v_Value1;

				var xEM_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_8000);
				if (xEM_OD_8000 != null)
					ent.EM_OD_8000 = xEM_OD_8000.v_Value1;







				// OI
				var xVA_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_125);
				if (xVA_OI_125 != null)
					ent.VA_OI_125 = xVA_OI_125.v_Value1;

				var xVA_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_250);
				if (xVA_OI_250 != null)
					ent.VA_OI_250 = xVA_OI_250.v_Value1;


				var xVA_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_500);
				if (xVA_OI_500 != null)
					ent.VA_OI_500 = xVA_OI_500.v_Value1;

				var xVA_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_1000);
				if (xVA_OI_1000 != null)
					ent.VA_OI_1000 = xVA_OI_1000.v_Value1;

				var xVA_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_2000);
				if (xVA_OI_2000 != null)
					ent.VA_OI_2000 = xVA_OI_2000.v_Value1;

				var xVA_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_3000);
				if (xVA_OI_3000 != null)
					ent.VA_OI_3000 = xVA_OI_3000.v_Value1;

				var xVA_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_4000);
				if (xVA_OI_4000 != null)
					ent.VA_OI_4000 = xVA_OI_4000.v_Value1;

				var xVA_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_6000);
				if (xVA_OI_6000 != null)
					ent.VA_OI_6000 = xVA_OI_6000.v_Value1;

				var xVA_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_8000);
				if (xVA_OI_8000 != null)
					ent.VA_OI_8000 = xVA_OI_8000.v_Value1;









				var xVO_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_125);
				if (xVO_OI_125 != null)
					ent.VO_OI_125 = xVO_OI_125.v_Value1;

				var xVO_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_250);
				if (xVO_OI_250 != null)
					ent.VO_OI_250 = xVO_OI_250.v_Value1;

				var xVO_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_500);
				if (xVO_OI_500 != null)
					ent.VO_OI_500 = xVO_OI_500.v_Value1;

				var xVO_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_1000);
				if (xVO_OI_1000 != null)
					ent.VO_OI_1000 = xVO_OI_1000.v_Value1;

				var xVO_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_2000);
				if (xVO_OI_2000 != null)
					ent.VO_OI_2000 = xVO_OI_2000.v_Value1;

				var xVO_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_3000);
				if (xVO_OI_3000 != null)
					ent.VO_OI_3000 = xVO_OI_3000.v_Value1;

				var xVO_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_4000);
				if (xVO_OI_4000 != null)
					ent.VO_OI_4000 = xVO_OI_4000.v_Value1;

				var xVO_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_6000);
				if (xVO_OI_6000 != null)
					ent.VO_OI_6000 = xVO_OI_6000.v_Value1;

				var xVO_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_8000);
				if (xVO_OI_8000 != null)
					ent.VO_OI_8000 = xVO_OI_8000.v_Value1;



				var xEM_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_125);
				if (xEM_OI_125 != null)
					ent.EM_OI_125 = xEM_OI_125.v_Value1;

				var xEM_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_250);
				if (xEM_OI_250 != null)
					ent.EM_OI_250 = xEM_OI_250.v_Value1;

				var xEM_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_500);
				if (xEM_OI_500 != null)
					ent.EM_OI_500 = xEM_OI_500.v_Value1;

				var xEM_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_1000);
				if (xEM_OI_1000 != null)
					ent.EM_OI_1000 = xEM_OI_1000.v_Value1;

				var xEM_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_2000);
				if (xEM_OI_2000 != null)
					ent.EM_OI_2000 = xEM_OI_2000.v_Value1;

				var xEM_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_3000);
				if (xEM_OI_3000 != null)
					ent.EM_OI_3000 = xEM_OI_3000.v_Value1;

				var xEM_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_4000);
				if (xEM_OI_4000 != null)
					ent.EM_OI_4000 = xEM_OI_4000.v_Value1;

				var xEM_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_6000);
				if (xEM_OI_6000 != null)
					ent.EM_OI_6000 = xEM_OI_6000.v_Value1;

				var xEM_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_8000);
				if (xEM_OI_8000 != null)
					ent.EM_OI_8000 = xEM_OI_8000.v_Value1;


				ent.b_AudiogramaOD = img_OD;
				ent.b_AudiogramaOI = img_OI;

				audiometriaList.Add(ent);

				return audiometriaList;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alejandro
		public List<AudiometriaList> ReportAudiometria(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var groupUbigeo = 113;
				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()


								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************  

								 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId

								 join H in dbContext.systemparameter on new { a = pro.i_EsoTypeId.Value, b = 118 }
												 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

								 // Empresa / Sede Trabajo  ********************************************************
								 join ow in dbContext.organization on new { a = pro.v_CustomerOrganizationId }
										 equals new { a = ow.v_OrganizationId } into ow_join
								 from ow in ow_join.DefaultIfEmpty()

                                 join o in dbContext.organization on new { a = pro.v_EmployerOrganizationId }
                                         equals new { a = o.v_OrganizationId } into o_join
                                 from o in o_join.DefaultIfEmpty()

								 join lw in dbContext.location on new { a = pro.v_WorkingOrganizationId, b = pro.v_WorkingLocationId }
									  equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
								 from lw in lw_join.DefaultIfEmpty()

								 //************************************************************************************
								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId into Z_join
								 from Z in Z_join.DefaultIfEmpty()

								 // Ubigeo de la persona *******************************************************
								 join dep in dbContext.datahierarchy on new { a = B.i_DepartmentId.Value, b = groupUbigeo }
													  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
								 from dep in dep_join.DefaultIfEmpty()

								 join prov in dbContext.datahierarchy on new { a = B.i_ProvinceId.Value, b = groupUbigeo }
													   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
								 from prov in prov_join.DefaultIfEmpty()

								 join distri in dbContext.datahierarchy on new { a = B.i_DistrictId.Value, b = groupUbigeo }
													   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
								 from distri in distri_join.DefaultIfEmpty()
								 //*********************************************************************************************
								 let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
								 let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
								 let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1
								 where A.v_ServiceId == pstrserviceId

								 select new AudiometriaList
								 {
									 v_PersonId = A.v_PersonId,

									 v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,

									 d_BirthDate = B.d_Birthdate,
									 d_ServiceDate = A.d_ServiceDate,

									 v_DocNumber = B.v_DocNumber,
									 i_SexTypeId = B.i_SexTypeId.Value,

									 FirmaTecnologo = ptec.b_SignatureImage,
									 FirmaMedico = pme.b_SignatureImage,

									 Puesto = B.v_CurrentOccupation,
									 v_SexType = B.i_SexTypeId == (int)Gender.MASCULINO ? "M" : "F",
									 //
									 v_EsoTypeName = H.v_Value1,
									 v_ServiceComponentId = E.v_ServiceComponentId,
									 v_CustomerOrganizationName = ow.v_Name,
									 v_EmployerOrganizationName = o.v_Name,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 Departamento = varDpto,
									 Provincia = varProv,
									 Distrito = varDistri,
									 DireccionPaciente = B.v_AdressLocation,
									 Telefono =  B.v_TelephoneNumber
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var __sql = ValoresComponente(pstrserviceId, pstrComponentId);

				var sql = (from a in objEntity.ToList()

						   select new AudiometriaList
						   {

							   v_PersonId = a.v_PersonId,
							   v_FullPersonName = a.v_FullPersonName,
							   Telefono = a.Telefono,
							   d_BirthDate = a.d_BirthDate,
							   i_AgePacient = GetAge(a.d_BirthDate.Value),
							   d_ServiceDate = a.d_ServiceDate,
							   v_DocNumber = a.v_DocNumber,
							   i_SexTypeId = a.i_SexTypeId,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTecnologo = a.FirmaTecnologo,
							   Puesto = a.Puesto,
							   v_SexType = a.v_SexType,
								Departamento = a.Departamento,
									 Provincia = a.Provincia,
									 Distrito = a.Distrito,
									 DireccionPaciente = a.DireccionPaciente,
							   // Requisitos para la Audiometria                         
							   CambiosAltitud = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CAMBIOS_ALTITUD) == null ? "" : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CAMBIOS_ALTITUD).v_Value1,
							   ExpuestoRuido = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_EXPUESTO_RUIDO)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_EXPUESTO_RUIDO).v_Value1,
							   ProcesoInfeccioso = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_PROCESO_INFECCIOSO) == null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_PROCESO_INFECCIOSO).v_Value1,
							   DurmioNochePrevia = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_DURMIO_NOCHE_PREVIA)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_DURMIO_NOCHE_PREVIA).v_Value1,
							   ConsumioAlcoholDiaPrevio = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CONSUMIO_ALCOHOL_DIA_PREVIO)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CONSUMIO_ALCOHOL_DIA_PREVIO).v_Value1,

							   //// Antecedentes Medicos de importancia

							   RinitisSinusitis = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_RINITIS_SINUSITIS)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_RINITIS_SINUSITIS).v_Value1,
							   UsoMedicamentos = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_USO_MEDICAMENTOS)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_USO_MEDICAMENTOS).v_Value1,
							   Sarampion = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SARAMPION)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SARAMPION).v_Value1,
							   Tec = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_TEC)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_TEC).v_Value1,
							   OtitisMediaCronica = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTITIS_MEDIA_CRONICA)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTITIS_MEDIA_CRONICA).v_Value1,
							   DiabetesMellitus = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DIABETES_MELLITUS)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DIABETES_MELLITUS).v_Value1,
							   SorderaAntecedente = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA).v_Value1,
							   SorderaFamiliar = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA_FAMILIAR)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA_FAMILIAR).v_Value1,
							   Meningitis = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_MENINGITIS)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_MENINGITIS).v_Value1,
							   Dislipidemia = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DISLIPIDEMIA)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DISLIPIDEMIA).v_Value1,
							   EnfTiroidea = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_ENF_TIROIDEA)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_ENF_TIROIDEA).v_Value1,
							   SustQuimicas = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SUST_QUIMICAS)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SUST_QUIMICAS).v_Value1,

							   //// Hobbies

							   UsoMP3 = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_USO_MP3)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_USO_MP3).v_Value1,
							   PracticaTiro = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_PRACTICA_TIRO)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_PRACTICA_TIRO).v_Value1,
							   Otros = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_OTROS)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_OTROS).v_Value1,

							   //// Sintomas actuales

							   Sordera = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SORDERA)== null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SORDERA).v_Value1,
							   Otalgia1 = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_OTALGIA)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_OTALGIA).v_Value1,
							   Acufenos = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_ACUFENOS)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_ACUFENOS).v_Value1,
							   SecrecionOtica = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SECRECION_OTICA)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SECRECION_OTICA).v_Value1,
							   Vertigos = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_VERTIGOS)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_VERTIGOS).v_Value1,

							   //// Otoscopia

							   OidoIzquierdo = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_IZQUIERDO)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_IZQUIERDO).v_Value1,
							   OidoDerecho = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_DERECHO)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_DERECHO).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

							   //
							   v_EsoTypeName = a.v_EsoTypeName,
							   v_ServiceComponentId = a.v_ServiceComponentId,
                               v_CustomerOrganizationName = a.v_CustomerOrganizationName,
                               v_EmployerOrganizationName = a.v_EmployerOrganizationName,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   MarcaAudiometria = __sql.Count == 0 || __sql  == null? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_MARCA) == null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_MARCA).v_Value1,
							   ModeloAudiometria = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_MODELO)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_MODELO).v_Value1,
							   CalibracionAudiometria = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_CALIBRACION)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_CALIBRACION).v_Value1,
							   TiempoTrabajo = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_TIEMPO_DE_TRABAJO)==null?"":__sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_TIEMPO_DE_TRABAJO).v_Value1,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   Dx = GetDiagnosticByServiceIdAndCategoryId(pstrserviceId, 15),
							   Recomendaciones = ConcatenateRecomendacionesByCategoria(15, pstrserviceId),



							   CuaelfrecuencidusoEspecificar = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002201") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002201").v_Value1,
							   DesdcuandoACUFENOS = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002202") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002202").v_Value1,
							   DesdcuandoMAREOS = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002203") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002203").v_Value1,
							   Arsenico = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002183") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002183").v_Value1,
							   Tolueno = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002184") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002184").v_Value1,
							   OTROS = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002185") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002185").v_Value1,
							   Infeccioaoidcronic = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002186") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002186").v_Value1,
							   OtalgiDesdcuando = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002204") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002204").v_Value1,
							   Otorrea = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002187") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002187").v_Value1,
							   AntecedentequirurgicoORL = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002188") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002188").v_Value1,
							   HIPERTENSIoARTERIAL = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002189") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002189").v_Value1,
							   EnfermedadMeniere = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002190") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002190").v_Value1,
							   Hipoacusifamiliar = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002191") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002191").v_Value1,
							   DIABETEMELLITUS = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002192") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002192").v_Value1,
							   TEFracturadehuestemporal = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002193") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002193").v_Value1,
							   Rinitis = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002194") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002194").v_Value1,
							   Sinusitis = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002195") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002195").v_Value1,
							   Parotiditis = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002196") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002196").v_Value1,
							   Sarampion1 = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002197") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002197").v_Value1,
							   UsdOtotoxicos = __sql.Count == 0 || __sql == null ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002198") == null ? "" : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002198").v_Value1,
							   
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alejandro
		public List<ServiceComponentFieldValuesList> ValoresComponentesUserControl(string pstrServiceId, string pstrComponentId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			int rpta = 0;

			try
			{
				var serviceComponentFieldValues = (from A in dbContext.service
												   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
												   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
												   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

												   where A.v_ServiceId == pstrServiceId
														   && B.v_ComponentId == pstrComponentId
														   && B.i_IsDeleted == 0
														   && C.i_IsDeleted == 0

												   select new ServiceComponentFieldValuesList
												   {
													   v_ComponentFieldId = C.v_ComponentFieldId,
													   //v_ComponentFielName = G.v_TextLabel,
													   v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
													   v_Value1 = D.v_Value1,
													   //i_GroupId = G.i_GroupId.Value
												   });


				return serviceComponentFieldValues.ToList();
			}
			catch (Exception)
			{

				throw;
			}

		}


		public List<DiagnosticRepositoryList> GetAptitudeCertificate(ref OperationResult pobjOperationResult, string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from sss in dbContext.service
							 join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
							 from ccc in ccc_join.DefaultIfEmpty()  // ESO

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
							 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

							 join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

							 join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
												equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

							 join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

							 join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

							 join ooo in dbContext.organization on E.v_EmployerOrganizationId equals ooo.v_OrganizationId

							 join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

							 join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
												 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

							 join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
									  equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

							 join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
														equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
							 from J3 in J3_join.DefaultIfEmpty()

							 join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
											 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							 from J1 in J1_join.DefaultIfEmpty()

							 join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
															 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							 from J2 in J2_join.DefaultIfEmpty()

							 join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
							 from su in su_join.DefaultIfEmpty()

							 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
							 from pr in pr_join.DefaultIfEmpty()

							 join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
											 equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
							 from H1 in H1_join.DefaultIfEmpty()

							 join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
																			 equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
							 from H2 in H2_join.DefaultIfEmpty()

							 where (ccc.v_ServiceId == pstrServiceId) &&
								   (ccc.i_IsDeleted == isDeleted) &&
								 //(ddd.v_DiseasesId != "N009-DD000000029") &&
								   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
								   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
							 //&& (ccc.v_DiseasesId != Constants.NORMOACUSIA || ccc.v_DiseasesId != Constants.NORMOACUSIA_OIDO_DERECHO || ccc.v_DiseasesId != Constants.NORMOACUSIA_OIDO_IZQUIERDO || ccc.v_DiseasesId != Constants.NORMOPESO || ccc.v_DiseasesId != Constants.DISEASES_RECOMENDACIONES)


							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 i_AutoManualId = ccc.i_AutoManualId,
								 i_PreQualificationId = ccc.i_PreQualificationId,
								 i_FinalQualificationId = ccc.i_FinalQualificationId,
								 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
								 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
								 v_DiseasesName = ddd.v_Name,
								 v_CreationUser = J1.v_UserName,
								 v_UpdateUser = J2.v_UserName,
								 d_CreationDate = J1.d_InsertDate,
								 d_UpdateDate = J2.d_UpdateDate,
								 i_IsDeleted = ccc.i_IsDeleted.Value,
								 v_ProtocolId = E.v_ProtocolId,
								 v_ProtocolName = E.v_Name,
								 v_PersonId = D.v_PersonId,
								 d_BirthDate = D.d_Birthdate,
								 v_EsoTypeName = H.v_Value1,
								 v_OrganizationPartialName = ooo.v_Name,
								 v_LocationName = lll.v_Name,
								 v_FirstName = D.v_FirstName,
								 v_FirstLastName = D.v_FirstLastName,
								 v_SecondLastName = D.v_SecondLastName,
								 v_DocNumber = D.v_DocNumber,
								 v_GenderName = J.v_Value1,
								 v_AptitudeStatusName = G.v_Value1,
								 v_OccupationName = D.v_CurrentOccupation,
								 g_Image = pr.b_SignatureImage,
								 d_ServiceDate = sss.d_ServiceDate,
								 i_AptitudeStatusId = sss.i_AptitudeStatusId,
								 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
								 v_ObsStatusService = sss.v_ObsStatusService,
								 b_Photo = D.b_PersonImage,
								 GrupoFactorSanguineo = H1.v_Value1 + " - " + H2.v_Value1,
								 d_FechaExpiracionServicio = sss.d_GlobalExpirationDate,
                                 v_Cie10 =  ddd.v_CIE10Id

							 });

				var MedicalCenter = GetInfoMedicalCenter();

				var q = (from a in query.ToList()
						 select new DiagnosticRepositoryList
						 {
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_ServiceId = a.v_ServiceId,
							 v_DiseasesId = a.v_DiseasesId,
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							 v_CreationUser = a.v_CreationUser,
							 v_UpdateUser = a.v_UpdateUser,
							 d_CreationDate = a.d_CreationDate,
							 d_UpdateDate = a.d_UpdateDate,
							 i_IsDeleted = a.i_IsDeleted,
							 i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
							 v_EsoTypeName = a.v_EsoTypeName,
							 v_OrganizationName = string.Format("{0} - {1}", a.v_OrganizationPartialName, a.v_LocationName),
							 v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
							 v_DocNumber = a.v_DocNumber,
							 i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
							 v_GenderName = a.v_GenderName,
							 v_DiseasesName = a.v_DiseasesName == "RECOMENDACIONES" ? "" : a.v_DiseasesName,
                             v_Cie10 = a.v_Cie10,
                             v_DiseasesNameCie10 = string.Format("{0}   {1}", a.v_Cie10, a.v_DiseasesName),
							 v_RecomendationsName = ConcatenateRecommendationByService(pstrServiceId),
							 v_RestrictionsName = ConcatenateRestrictionConcatecDx(a.v_DiagnosticRepositoryId),
							 //v_RecomendacionesConcatenadasDx = ConcatenateRecommendationByService(a.v_DiagnosticRepositoryId),
							 v_AptitudeStatusName = a.v_AptitudeStatusName,
							 v_OccupationName = a.v_OccupationName,  // por ahora se muestra el GESO
							 g_Image = a.g_Image,
							 b_Logo = MedicalCenter.b_Image,
							 EmpresaPropietaria = MedicalCenter.v_Name,
							 EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							 EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							 EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							 v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
							 d_ServiceDate = a.d_ServiceDate,
							 i_AptitudeStatusId = a.i_AptitudeStatusId,
							 v_ObsStatusService = a.v_ObsStatusService,
							 b_Photo = a.b_Photo,
							 GrupoFactorSanguineo = a.GrupoFactorSanguineo == null ? "NOAPLICA" : a.GrupoFactorSanguineo,
							 d_FechaExpiracionServicio = a.d_FechaExpiracionServicio
						 }).ToList();

				pobjOperationResult.Success = 1;

				return q.OrderByDescending(p => p.v_DiseasesName).ToList();
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public List<ServiceList> GetServicesPagedAndFilteredReport(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service
							join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
							join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId }
							join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId
							join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
							join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId
							join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId
							join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId }
							join I in dbContext.person on A.v_PersonId equals I.v_PersonId
							join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId }
							join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId }
							//join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId

							// Empresa / Sede Cliente ******************************************************
							join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
									equals new { a = oc.v_OrganizationId } into oc_join
							from oc in oc_join.DefaultIfEmpty()

							join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
								  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
							from lc in lc_join.DefaultIfEmpty()

							// Empresa / Sede Empleadora *******************************************
							join oe in dbContext.organization on new { a = E.v_EmployerOrganizationId }
								  equals new { a = oe.v_OrganizationId } into oe_join
							from oe in oe_join.DefaultIfEmpty()

							join le in dbContext.location on new { a = E.v_EmployerOrganizationId, b = E.v_EmployerLocationId }
								   equals new { a = le.v_OrganizationId, b = le.v_LocationId } into le_join
							from le in le_join.DefaultIfEmpty()

							// Empresa / Sede Trabajo *******************************************
							join ow in dbContext.organization on new { a = E.v_WorkingOrganizationId }
								  equals new { a = ow.v_OrganizationId } into ow_join
							from ow in ow_join.DefaultIfEmpty()

							join lw in dbContext.location on new { a = E.v_WorkingOrganizationId, b = E.v_WorkingLocationId }
								   equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
							from lw in lw_join.DefaultIfEmpty()
							// *****************************************************************************

							join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
															equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
							from J1 in J1_join.DefaultIfEmpty()

							join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
															equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
							from J2 in J2_join.DefaultIfEmpty()
							where A.i_IsDeleted == 0
							select new ServiceList
							{
								v_ServiceId = A.v_ServiceId,
								v_CalendarId = D.v_CalendarId,
								v_ProtocolId = A.v_ProtocolId,
								v_PersonId = A.v_PersonId,
								i_MasterServiceId = A.i_MasterServiceId.Value,
								v_MasterServiceName = C.v_Value1,
								i_ServiceStatusId = A.i_ServiceStatusId.Value,
								v_ServiceStatusName = B.v_Value1,
								i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
								d_ServiceDate = (DateTime)A.d_ServiceDate,
								d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
								d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
								i_FlagAgentId = A.i_FlagAgentId.Value,
								d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,
								v_OrganizationName = oc.v_Name + " / " + lc.v_Name,
								v_GenderName = G.v_Name,
								v_ServiceTypeName = H.v_Value1,
								i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
								i_EsoTypeId = E.i_EsoTypeId.Value,
								v_LocationId = E.v_EmployerLocationId,
								v_LocationName = G.v_Name,
								v_Pacient = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName,
								v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
								v_ProtocolName = E.v_Name,
								v_CreationUser = J1.v_UserName,
								v_UpdateUser = J2.v_UserName,
								d_CreationDate = A.d_InsertDate,
								d_UpdateDate = A.d_UpdateDate,
								v_AptitudeStatusName = K.v_Value1,
								v_DocTypeName = L.v_Value1,
								v_DocNumber = L.v_Value1 + " / " + I.v_DocNumber,
								FechaNacimiento = I.d_Birthdate.Value,
								Year = ((DateTime)A.d_ServiceDate).Year,

								v_CustomerOrganizationId = E.v_CustomerOrganizationId,
								v_CustomerLocationId = E.v_CustomerLocationId,
								v_EmployerOrganizationId = E.v_EmployerOrganizationId,
								v_EmployerLocationId = E.v_EmployerLocationId,
								v_WorkingOrganizationId = E.v_WorkingOrganizationId,
								v_WorkingLocationId = E.v_WorkingLocationId
							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
				{
					query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}

				var q = (from a in query.ToList()
						 select new ServiceList
						 {
							 v_ServiceId = a.v_ServiceId,
							 v_CalendarId = a.v_CalendarId,
							 v_ProtocolId = a.v_ProtocolId,
							 //v_PersonId = a.v_PersonId,
							 //i_MasterServiceId = a.i_MasterServiceId,
							 //v_MasterServiceName = a.v_MasterServiceName,
							 //i_ServiceStatusId = a.i_ServiceStatusId,
							 v_ServiceStatusName = a.v_ServiceStatusName,
							 //i_AptitudeStatusId = a.i_AptitudeStatusId.Value,
							 d_ServiceDate = (DateTime)a.d_ServiceDate,
							 //d_GlobalExpirationDate = (DateTime)a.d_GlobalExpirationDate,
							 //d_ObsExpirationDate = (DateTime)a.d_ObsExpirationDate,
							 //i_FlagAgentId = a.i_FlagAgentId,
							 //d_DateTimeCalendar = (DateTime)a.d_DateTimeCalendar,
							 v_OrganizationName = a.v_OrganizationName,
							 //v_GenderName = a.v_GenderName,
							 //v_ServiceTypeName = a.v_ServiceTypeName,
							 //i_ServiceTypeId = a.i_ServiceTypeId,
							 //i_EsoTypeId = a.i_EsoTypeId,
							 //v_LocationId = a.v_LocationId,
							 v_LocationName = a.v_LocationName,
							 v_Pacient = a.v_Pacient,
							 //v_PacientDocument = a.v_PacientDocument,
							 v_ProtocolName = a.v_ProtocolName,
							 //v_CreationUser = a.v_CreationUser,
							 //v_UpdateUser = a.v_UpdateUser,
							 //d_CreationDate = a.d_CreationDate,
							 //d_UpdateDate = a.d_UpdateDate,
							 v_AptitudeStatusName = a.v_AptitudeStatusName,
							 //v_CustomerOrganizationId = a.v_CustomerOrganizationId,
							 v_DocTypeName = a.v_DocTypeName,
							 v_DocNumber = a.v_DocNumber,
							 Year = a.Year,
							 FechaNacimiento = a.FechaNacimiento,
							 i_Age = (GetAge(a.FechaNacimiento)).ToString(),
							 //CostoProtocolo = GetServicesPagedAndFilteredReport(a.v_ProtocolId),

							 CostoProtocolo = GetServiceCost(a.v_ServiceId),

							 v_CustomerOrganizationId = a.v_CustomerOrganizationId,
							 v_CustomerLocationId = a.v_CustomerLocationId,
							 v_EmployerOrganizationId = a.v_EmployerOrganizationId,
							 v_EmployerLocationId = a.v_EmployerLocationId

						 }).ToList();

				List<ServiceList> objData = q.ToList();
				pobjOperationResult.Success = 1;
				return objData;

			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public int GetAge(DateTime FechaNacimiento)
		{
			return int.Parse((DateTime.Today.AddTicks(-FechaNacimiento.Ticks).Year - 1).ToString());

		}

		public float GetServicesPagedAndFilteredReport(string ProtocoloId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from A in dbContext.protocol
						 join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId
						 where (A.i_IsDeleted == 0) && (A.v_ProtocolId == ProtocoloId)
						 select new
						 {
							 v_ProtocolId = A.v_ProtocolId,
							 CostoProtocolo = M.r_Price.Value
						 });

			//List<ServiceList> objAutorizationList = query.AsEnumerable()                                                                     
			//                                                           .GroupBy(x => x.v_ProtocolId)
			//                                                           .Select(group => group.First())
			//                                                           .ToList();


			return query.Sum(o => o.CostoProtocolo);

		}

		public string GetServiceCost(string serviceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from sc in dbContext.servicecomponent
						 join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
						 where (sc.i_IsDeleted == 0) &&
							   (sc.v_ServiceId == serviceId) &&
							   (sc.i_IsRequiredId == (int?)SiNo.SI) &&
							   (sc.i_ServiceComponentStatusId != (int)ServiceComponentStatus.NoRealizado) &&
							   (c.i_ComponentTypeId == (int)ComponentType.Examen)
						 select new
						 {
							 v_ServiceId = sc.v_ServiceId,
							 CostoProtocolo = sc.r_Price.Value
						 });

			return string.Format("{0:0,0.00}", query.Sum(o => o.CostoProtocolo));

		}

		public decimal GetServiceCostfloat(string serviceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from sc in dbContext.servicecomponent
						 join a in dbContext.service on sc.v_ServiceId equals a.v_ServiceId
						 join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
						 join d in dbContext.protocolcomponent on new { a = a.v_ProtocolId, b = c.v_ComponentId }
										equals new { a = d.v_ProtocolId, b = d.v_ComponentId }


						 //join K in dbContext.systemparameter on new { a = 135, b = A.i_HasSymptomId.Value }
						 //                                                    equals new { a = K.i_GroupId, b = K.i_ParameterId } into K_join

						 where (sc.i_IsDeleted == 0) &&
							   (sc.v_ServiceId == serviceId) &&
							   (sc.i_IsRequiredId == (int?)SiNo.SI) &&
							   (sc.i_ServiceComponentStatusId != (int)ServiceComponentStatus.NoRealizado) &&
							   (c.i_ComponentTypeId == (int)ComponentType.Examen)
						 //&& (d.i_IsConditionalId == 0 || d.i_IsAdditional == 0)

						 select new
						 {
							 ComponenteId = sc.v_ComponentId,
							 i_IsConditionalId = d.i_IsConditionalId,
							 i_IsAdditional = d.i_IsAdditional,
							 v_ServiceId = sc.v_ServiceId,
							 CostoProtocolo = sc.r_Price.Value,
							 Componente = c.v_Name
						 });

			var x = query.Sum(o => o.CostoProtocolo);

			return decimal.Parse(x.ToString());

		}


		// Alejandro
		public ServiceList GetAnamnesisReport(string pstrServiceId)
		{
			//mon.IsActive = true;

			var isDeleted = 0;

			try
			{

				var FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrServiceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID);

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = from A in dbContext.service

							join K in dbContext.systemparameter on new { a = 135, b = A.i_HasSymptomId.Value }
													equals new { a = K.i_GroupId, b = K.i_ParameterId } into K_join
							from K in K_join.DefaultIfEmpty()

							join L in dbContext.systemparameter on new { a = 135, b = A.i_UrineId.Value }
													equals new { a = L.i_GroupId, b = L.i_ParameterId } into L_join
							from L in L_join.DefaultIfEmpty()

							join M in dbContext.systemparameter on new { a = 135, b = A.i_DepositionId.Value }
												  equals new { a = M.i_GroupId, b = M.i_ParameterId } into M_join
							from M in M_join.DefaultIfEmpty()

							join N in dbContext.systemparameter on new { a = 135, b = A.i_AppetiteId.Value }
										equals new { a = N.i_GroupId, b = N.i_ParameterId } into N_join
							from N in N_join.DefaultIfEmpty()

							join O in dbContext.systemparameter on new { a = 134, b = A.i_MacId.Value }
								  equals new { a = O.i_GroupId, b = O.i_ParameterId } into O_join
							from O in O_join.DefaultIfEmpty()

							join P in dbContext.systemparameter on new { a = 135, b = A.i_AppetiteId.Value }
									  equals new { a = P.i_GroupId, b = P.i_ParameterId } into P_join
							from P in P_join.DefaultIfEmpty()

							join su in dbContext.systemuser on A.i_UpdateUserMedicalAnalystId.Value equals su.i_SystemUserId into su_join
							from su in su_join.DefaultIfEmpty()

							join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
							from pr in pr_join.DefaultIfEmpty()

							where A.v_ServiceId == pstrServiceId && A.i_IsDeleted == isDeleted

							select new ServiceList
							{
								v_ServiceId = A.v_ServiceId,
								i_HasSymptomId = A.i_HasSymptomId,
								v_MainSymptom = A.v_MainSymptom,
								i_TimeOfDisease = A.i_TimeOfDisease,
								i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
								v_Story = A.v_Story,
								v_PersonId = pr.v_PersonId,

								i_DreamId = A.i_DreamId,
								v_Dream = K.v_Value1,
								i_UrineId = A.i_UrineId,
								v_Urine = L.v_Value1,
								i_DepositionId = A.i_DepositionId,
								v_Deposition = M.v_Value1,
								i_AppetiteId = A.i_AppetiteId,
								v_Appetite = N.v_Value1,
								i_ThirstId = A.i_ThirstId,
								v_Thirst = P.v_Value1,
								d_Fur = A.d_Fur.Value,
								v_CatemenialRegime = A.v_CatemenialRegime,
								i_MacId = A.i_MacId,
								v_Mac = O.v_Value1,

								// Antecedentes ginecologicos
								d_PAP = A.d_PAP.Value,
								d_Mamografia = A.d_Mamografia.Value,
								v_CiruGine = A.v_CiruGine,
								v_Gestapara = A.v_Gestapara,
								v_Menarquia = A.v_Menarquia,
								v_Findings = A.v_Findings,

								// firma y sello del medico que analisa y califica los diagnosticos
								FirmaDoctor = pr.b_SignatureImage,
								FirmaMedicoMedicina = FirmaMedicoMedicina.Value5

							};

				ServiceList objData = query.FirstOrDefault();
				return objData;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<ServiceComponentFieldValuesList> ValoresComponente(string pstrServiceId, string pstrComponentId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			int rpta = 0;

			try
			{
				var serviceComponentFieldValues = (from A in dbContext.service
												   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
												   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
												   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                   join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                   join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                   join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                   join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

												   where A.v_ServiceId == pstrServiceId
														   && H.v_ComponentId == pstrComponentId
                                                           && B.i_IsDeleted == 0
														   && C.i_IsDeleted == 0

												   select new ServiceComponentFieldValuesList
												   {
													   v_ComponentFieldId = G.v_ComponentFieldId,
													  v_ComponentFielName = G.v_TextLabel,
													   v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
													   v_Value1 = D.v_Value1,
													   i_GroupId = G.i_GroupId.Value
												   });

                var finalQuery = (from a in serviceComponentFieldValues.ToList()

                                  let value1 = int.TryParse(a.v_Value1, out rpta)
                                  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  select new ServiceComponentFieldValuesList
                                  {
                                      v_ComponentFieldId = a.v_ComponentFieldId,
                                      v_ComponentFielName = a.v_ComponentFielName,
                                      v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                      v_Value1 = a.v_Value1,
                                      v_Value1Name = sp == null ? "" : sp.v_Value1
                                  }).ToList();


                return finalQuery;
			}
			catch (Exception)
			{

				throw;
			}

		}

		// Alejandro
		public string GetValueComponent(string pstrServiceId, string pstrComponentId, string componentFieldId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			int isDeleted = (int)SiNo.NO;

			try
			{
				var value = (from A in dbContext.service
							 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
							 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
							 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
							 join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
							 join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
							 join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
							 join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
							 where A.v_ServiceId == pstrServiceId
									 && H.v_ComponentId == pstrComponentId
									 && B.i_IsDeleted == isDeleted
									 && C.i_IsDeleted == isDeleted
									 && G.v_ComponentFieldId == componentFieldId

							 select D.v_Value1).SingleOrDefault<string>();

				return value;
			}
			catch (Exception)
			{

				throw;
			}

		}

		// Alejandro
		public bool ExistComponentInService(string pstrServiceId, string pstrComponentId)
		{
			int isDeleted = (int)SiNo.NO;

			try
			{

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var exist = dbContext.servicecomponent.Any(p => p.v_ServiceId == pstrServiceId && p.v_ComponentId == pstrComponentId && p.i_IsDeleted == isDeleted);
					return exist;
				}
			}
			catch (Exception)
			{

				throw;
			}

		}


		//public List<ServiceComponentFieldValuesList> ValoresComponente(string pstrServiceId, string pstrComponentId)
		//{

		//    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

		//    List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponent
		//                                                                         join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
		//                                                                         join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
		//                                                                         join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
		//                                                                         where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.component.i_IsDeleted == 0 
		//                                                                         && B.i_IsDeleted == 0 && C.i_IsDeleted == 0

		//                                                                         select new ServiceComponentFieldValuesList
		//                                                                         {
		//                                                                             v_ComponentFieldId = B.v_ComponentFieldId,
		//                                                                             v_ComponentFielName = D.v_TextLabel,
		//                                                                             //v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
		//                                                                             //v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
		//                                                                             v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
		//                                                                             v_Value1 = C.v_Value1
		//                                                                             //v_Value2 = A.v_Value2,
		//                                                                             //i_Index = A.i_Index,
		//                                                                             //i_Value1 = A.i_Value1
		//                                                                         }).ToList();


		//    return serviceComponentFieldValues;
		//}

		public List<ServiceComponentFieldValuesList> ValoresComponente1(string pstrServiceId, string pstrComponentId)
		{

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponent
																				 join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
																				 join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
																				 join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
																				 where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.component.i_IsDeleted == 0
																				 && B.i_IsDeleted == 0 && C.i_IsDeleted == 0

																				 select new ServiceComponentFieldValuesList
																				 {
																					 v_ComponentFieldId = B.v_ComponentFieldId,
																					 v_ComponentFielName = D.v_TextLabel,
																					 //v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
																					 //v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
																					 v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
																					 v_Value1 = C.v_Value1
																					 //v_Value2 = A.v_Value2,
																					 //i_Index = A.i_Index,
																					 //i_Value1 = A.i_Value1
																				 }).ToList();


			return serviceComponentFieldValues;
		}

		public List<ServiceComponentFieldValuesList> ValoresExamenComponete(string pstrServiceId, string pstrComponentId, int pintParameter)
		{

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var systemParameters = (from a in dbContext.systemparameter
									where a.i_GroupId == pintParameter
									select a);


			List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
																				 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
																				 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
																				 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
																				 join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
																				 join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
																				 join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
																				 join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
																				 where A.v_ServiceId == pstrServiceId
																						 && H.v_ComponentId == pstrComponentId
																						 && B.i_IsDeleted == 0
																						 && C.i_IsDeleted == 0

																				 select new ServiceComponentFieldValuesList
																				 {
																					 v_ComponentFieldId = G.v_ComponentFieldId,
																					 v_ComponentFielName = G.v_TextLabel,
																					 v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
																					 v_Value1 = D.v_Value1

																				 }).ToList();


			var sql = (from A in serviceComponentFieldValues
					   join F in systemParameters on A.v_Value1 equals F.i_ParameterId.ToString() into F_join
					   from F in F_join.DefaultIfEmpty()
					   select new ServiceComponentFieldValuesList
					   {
						   v_ComponentFieldId = A.v_ComponentFieldId,
						   v_ComponentFielName = A.v_ComponentFielName,
						   v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
						   v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
						   v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
						   v_Value1 = A.v_Value1,
						   v_Value2 = A.v_Value2,
						   i_Index = A.i_Index,
						   i_Value1 = A.i_Value1,
						   v_Value1Name = F == null ? "" : F.v_Value1
					   }).ToList();

			return sql;
		}

		public ServiceComponentList ComponenteExamenFisico(string pstrServiceId, string pstrComponentId)
		{

			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = from A in dbContext.servicecomponent
							where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId
							select new ServiceComponentList
							{
								v_Comment = A.v_Comment
							};

				ServiceComponentList objData = query.FirstOrDefault();
				return objData;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		// Beto
		public List<DiagnosticRepositoryList> GetServiceDisgnosticsReports(string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository
														//join bbb in dbContext.servicecomponent on ccc.v_ServiceId equals bbb.v_ServiceId

														join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

														join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
																								equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

														join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																							equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
														from fff in J5_join.DefaultIfEmpty()

														join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																							equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
														from ggg in J4_join.DefaultIfEmpty()

														join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																								equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
														from hhh in J3_join.DefaultIfEmpty()

														join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
																							 equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
														from iii in J6_join.DefaultIfEmpty()

														join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
																		equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
														from J1 in J1_join.DefaultIfEmpty()

														join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
																						equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
														from J2 in J2_join.DefaultIfEmpty()

														join c in dbContext.component on ccc.v_ComponentId equals c.v_ComponentId



														where (ccc.v_ServiceId == pstrServiceId) &&
															  (ccc.i_IsDeleted == isDeleted)
														select new DiagnosticRepositoryList
														{
															v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
															v_ServiceId = ccc.v_ServiceId,
															v_ComponentId = ccc.v_ComponentId,
															//v_ComponentName = bbb.v_Name,
															v_DiseasesId = ccc.v_DiseasesId,
															i_AutoManualId = ccc.i_AutoManualId,
															i_PreQualificationId = ccc.i_PreQualificationId,
															i_FinalQualificationId = ccc.i_FinalQualificationId, //sirve
															i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,//sirve
															i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
															d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
															i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
															v_ComponentFieldsId = ccc.v_ComponentFieldId,
															v_DiseasesName = ddd.v_Name,
															v_Cie10 = ddd.v_CIE10Id,

															v_AutoManualName = eee.v_Value1,

															v_PreQualificationName = fff.v_Value1,
															v_FinalQualificationName = ggg.v_Value1,
															v_DiagnosticTypeName = hhh.v_Value1,
															v_IsSentToAntecedentName = iii.v_Value1,
															i_RecordStatus = (int)RecordStatus.Grabado,
															i_RecordType = (int)RecordType.NoTemporal,

															v_CreationUser = J1.v_UserName,
															v_UpdateUser = J2.v_UserName,
															d_CreationDate = J1.d_InsertDate,
															d_UpdateDate = J2.d_UpdateDate,
															i_IsDeleted = ccc.i_IsDeleted.Value,
															i_CategoryId = c.i_CategoryId.Value
														}).ToList();


				var q = new List<DiagnosticRepositoryList>();
				q = query.Select((a, index) => new DiagnosticRepositoryList
						 {
							 i_Item = index + 1,
							 v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							 v_ServiceId = a.v_ServiceId,
							 v_ComponentId = a.v_ComponentId,
							 v_ComponentName = a.v_ComponentName,
							 v_DiseasesId = a.v_DiseasesId,
							 i_AutoManualId = a.i_AutoManualId,
							 i_PreQualificationId = a.i_PreQualificationId,
							 i_FinalQualificationId = a.i_FinalQualificationId,
							 i_DiagnosticTypeId = a.i_DiagnosticTypeId,
							 i_IsSentToAntecedent = a.i_IsSentToAntecedent,
							 d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							 i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
							 v_ComponentFieldsId = a.v_ComponentFieldsId,

							 v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
							 v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
							 v_DiseasesName = a.v_DiseasesName,
							 v_Cie10 = a.v_Cie10,
							 v_AutoManualName = a.v_AutoManualName,

							 v_PreQualificationName = a.v_PreQualificationName,
							 v_FinalQualificationName = a.v_FinalQualificationName,
							 v_DiagnosticTypeName = a.v_DiagnosticTypeName,
							 v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
							 i_RecordStatus = a.i_RecordStatus,
							 i_RecordType = a.i_RecordType,

							 v_CreationUser = a.v_CreationUser,
							 v_UpdateUser = a.v_UpdateUser,
							 d_CreationDate = a.d_CreationDate,
							 d_UpdateDate = a.d_UpdateDate,
							 i_IsDeleted = a.i_IsDeleted,
							 i_CategoryId = a.i_CategoryId
						 }).ToList();

				// Agregamos Restricciones / Recomendaciones
				OperationResult objOperationResult = new OperationResult();

				foreach (DiagnosticRepositoryList dr in q)
				{
					dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
					dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
				}

				return q;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<DiagnosticRepositoryList> GetServiceDisgnosticsHistoriaClinica(string pstrServiceId)
		{
			//mon.IsActive = true;
			var isDeleted = 0;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository

														join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
														from ddd in ddd_join.DefaultIfEmpty()

														where (ccc.v_ServiceId == pstrServiceId) &&
															  (ccc.i_IsDeleted == isDeleted)
														select new DiagnosticRepositoryList
														{
															v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
															v_ServiceId = ccc.v_ServiceId,
															v_ComponentId = ccc.v_ComponentId,
															v_DiseasesId = ccc.v_DiseasesId,
															i_AutoManualId = ccc.i_AutoManualId,
															i_PreQualificationId = ccc.i_PreQualificationId,
															i_FinalQualificationId = ccc.i_FinalQualificationId, //sirve
															i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,//sirve
															i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
															d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
															i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
															v_ComponentFieldsId = ccc.v_ComponentFieldId,
															v_DiseasesName = ddd.v_Name,
															v_Cie10 = ddd.v_CIE10Id,
															i_IsDeleted = ccc.i_IsDeleted.Value
														}).ToList();


				var q = new List<DiagnosticRepositoryList>();
				q = query.Select((a, index) => new DiagnosticRepositoryList
				{
					i_Item = index + 1,
					v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
					v_ServiceId = a.v_ServiceId,
					v_ComponentId = a.v_ComponentId,
					v_ComponentName = a.v_ComponentName,
					v_DiseasesId = a.v_DiseasesId,
					i_AutoManualId = a.i_AutoManualId,
					i_PreQualificationId = a.i_PreQualificationId,
					i_FinalQualificationId = a.i_FinalQualificationId,
					i_DiagnosticTypeId = a.i_DiagnosticTypeId,
					i_IsSentToAntecedent = a.i_IsSentToAntecedent,
					d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
					i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
					v_ComponentFieldsId = a.v_ComponentFieldsId,

					v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
					v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
					v_DiseasesName = a.v_DiseasesName,
					v_Cie10 = a.v_Cie10,
					v_AutoManualName = a.v_AutoManualName,

					v_PreQualificationName = a.v_PreQualificationName,
					v_FinalQualificationName = a.v_FinalQualificationName,
					v_DiagnosticTypeName = a.v_DiagnosticTypeName,
					v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
					i_RecordStatus = a.i_RecordStatus,
					i_RecordType = a.i_RecordType,

					v_CreationUser = a.v_CreationUser,
					v_UpdateUser = a.v_UpdateUser,
					d_CreationDate = a.d_CreationDate,
					d_UpdateDate = a.d_UpdateDate,
					i_IsDeleted = a.i_IsDeleted

				}).ToList();

				// Agregamos Restricciones / Recomendaciones
				OperationResult objOperationResult = new OperationResult();

				foreach (DiagnosticRepositoryList dr in q)
				{
					dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
					dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
				}

				return q;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		// Alejandro
		public List<ServiceComponentFieldsList> GetServiceComponentFieldsAndValuesReport(string pstrServiceId, string pstrComponentId)
		{


			int isDeleted = 0;
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var serviceComponentFields = (from A in dbContext.servicecomponent
										  join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
										  join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
										  join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
										  join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
										  join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

										  join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
															 equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
										  from dh in dh_join.DefaultIfEmpty()

										  where (A.v_ServiceId == pstrServiceId) &&
												(cm.v_ComponentId == pstrComponentId) &&
												(A.i_IsDeleted == isDeleted) &&
												(B.i_IsDeleted == isDeleted) &&
												(C.i_IsDeleted == isDeleted)

										  select new ServiceComponentFieldsList
										  {
											  v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
											  v_ComponentFieldsId = B.v_ComponentFieldId,
											  v_ComponentFielName = D.v_TextLabel,
											  v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
											  i_GroupId = D.i_GroupId.Value,
											  v_MeasurementUnitName = dh.v_Value1
										  }).ToList();

			int rpta = 0;

			var finalQuery = (from a in serviceComponentFields
							  let value1 = int.TryParse(a.v_Value1, out rpta)
							  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
											  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
							  from sp in sp_join.DefaultIfEmpty()

							  select new ServiceComponentFieldsList
							  {
								  v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
								  v_ComponentFieldsId = a.v_ComponentFieldsId,
								  v_ComponentFielName = a.v_ComponentFielName,
								  i_GroupId = a.i_GroupId,
								  v_Value1 = a.v_Value1,
								  v_Value1Name = sp == null ? "" : sp.v_Value1,
								  v_MeasurementUnitName = a.v_MeasurementUnitName,
								  v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, pstrComponentId)
							  }).ToList();

			return finalQuery;
		}


		public PersonList ObtenerDatosPacientePorServiceId(string ServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var query = (from A in dbContext.service
						 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
						 join L in dbContext.datahierarchy on new { a = B.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
						 from L in L_join.DefaultIfEmpty()
						 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
						 from I in I_join.DefaultIfEmpty()
						 join J in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
													 equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join
						 from J in J_join.DefaultIfEmpty()

						 join D1 in dbContext.organization on I.v_CustomerOrganizationId equals D1.v_OrganizationId
						 join C in dbContext.organization on I.v_CustomerOrganizationId equals C.v_OrganizationId
						 join F in dbContext.groupoccupation on I.v_GroupOccupationId equals F.v_GroupOccupationId
						 where A.v_ServiceId == ServiceId
						 select new PersonList
						 {
							 TipoDocumento = L.v_Value1,
							 v_DocNumber = B.v_DocNumber,
							 Puesto = B.v_CurrentOccupation,
							 d_Birthdate = B.d_Birthdate.Value,
							 Empresa = C.v_Name,
							 Perfil = J.v_Value1,
							 TipoExamen = F.v_Name

						 }).ToList();


			var queryFinal = (from A in query
							  select new PersonList
							  {
								  TipoDocumento = A.TipoDocumento,
								  v_DocNumber = A.v_DocNumber,
								  Puesto = A.Puesto,
								  d_Birthdate = A.d_Birthdate,
								  Edad = GetAge(A.d_Birthdate.Value),
								  Empresa = A.Empresa,
								  Perfil = A.Perfil,
								  TipoExamen = A.TipoExamen
							  }).FirstOrDefault();

			return queryFinal;
		}

		//AMC
		public IEnumerable<ListaExamenes> DevolverExamenesPorProtocolo(string pstrEmpresaId, string pstrSedeId, string pstrProtocoloId, DateTime? Fechainicio, DateTime? FechaFin)
		{
			try
			{
                //SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                //ListaExamenes oListaExamenes = new ListaExamenes();
                //List<ListaExamenes> ListListaExamenes = new List<ListaExamenes>();

                //var query = dbContext.consolidadoexamenes("", pstrEmpresaId, pstrSedeId, pstrProtocoloId, Fechainicio, FechaFin, -1).ToList();

                //var CantidadPacientes = query.GroupBy(x => new { x.T_Paciente, x.T_Id_Servicio })
                //.Select(group => group.First())
                //.ToList();

                //for (int i = 0; i < CantidadPacientes.Count(); i++)
                //{
                //    oListaExamenes = new ListaExamenes();

                //    oListaExamenes.Paciente = CantidadPacientes[i].T_Paciente;
                //    //Obtener Datos de Paciente 
                //    var o = ObtenerDatosPacientePorServiceId(CantidadPacientes[i].T_Id_Servicio);


                //    oListaExamenes.Documento = o.TipoDocumento + " / " + o.v_DocNumber;
                //    oListaExamenes.Cargo = o.Puesto;
                //    oListaExamenes.Edad = o.Edad;

                //    oListaExamenes.Empresa = o.Empresa;
                //    oListaExamenes.Perfil = o.Perfil;
                //    oListaExamenes.TipoExamen = o.TipoExamen;

                //    oListaExamenes.ServiceId = CantidadPacientes[i].T_Id_Servicio;
                //    oListaExamenes.FechaServicio = CantidadPacientes[i].T_FechaServicio;

                //    oListaExamenes.TESTESTEREOPSIS_N009_ME000000011 = query.Find(p => p.T_Id_Componente == "N009-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
				   
                //    oListaExamenes.AcidoUrico_N009_ME000000086 = query.Find(p => p.T_Id_Componente == "N009-ME000000086" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000086" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000086" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.AglutinacionesLamina_N009_ME000000025 = query.Find(p => p.T_Id_Componente == "N009-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.AntigenoProstatico_N009_ME000000009 = query.Find(p => p.T_Id_Componente == "N009-ME000000009" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000009" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000009" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.Bioquimica3_N009_ME000000088 = query.Find(p => p.T_Id_Componente == "N009-ME000000088" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000088" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000088" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Bioquimica2_N009_ME000000087 = query.Find(p => p.T_Id_Componente == "N009-ME000000087" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000087" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009_ME000000087" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.BkDirecto_N009_ME000000081 = query.Find(p => p.T_Id_Componente == "N009-ME000000081" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000081" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000081" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.BkEsputo_N002_ME000000030 = query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.ColesterolHDL_N009_ME000000074 = query.Find(p => p.T_Id_Componente == "N009-ME000000074" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000074" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000074" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.ColesterolLDL_N002_ME000000011 = query.Find(p => p.T_Id_Componente == "N009-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.ColesterolLDL_N009_ME000000075 = query.Find(p => p.T_Id_Componente == "N009-ME000000075" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000075" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000075" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();

                //    oListaExamenes.ColesterolTotal_N009_ME000000016 = query.Find(p => p.T_Id_Componente == "N009-ME000000016" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000016" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000016" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.ColesterolVLDL_N009_ME000000076 = query.Find(p => p.T_Id_Componente == "N009-ME000000076" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000076" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000076" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.CoprocultivoSalmonela_N002_ME000000018 = query.Find(p => p.T_Id_Componente == "N002-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Creatina_N009_ME000000028 = query.Find(p => p.T_Id_Componente == "N009-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    //oListaExamenes.ExamenCompletoOrina_N002_ME000000014= query.Find(p => p.T_Id_Componente == "N009-ME000000086" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar":query.Find(p => p.T_Id_Componente == "N002-ME000000014" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ?  "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000014" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ExamenCompletoOrina_N009_ME000000046 = query.Find(p => p.T_Id_Componente == "N009-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VHI_N009_ME000000030 = query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Fecatest_N009_ME000000097 = query.Find(p => p.T_Id_Componente == "N009-ME000000097" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000097" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000097" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Glucosa_N009_ME000000008 = query.Find(p => p.T_Id_Componente == "N009-ME000000008" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000008" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000008" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.GrupoFactorSanguineo_N009_ME000000000 = query.Find(p => p.T_Id_Componente == "N009-ME000000000" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000000" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000000" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.HAVIGM_N009_ME000000004 = query.Find(p => p.T_Id_Componente == "N009-ME000000004" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000004" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000004" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Hematocrito_N009_ME000000001 = query.Find(p => p.T_Id_Componente == "N009-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Hemoglobina_N009_ME000000006 = query.Find(p => p.T_Id_Componente == "N009-ME000000006" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000006" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000006" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.HemogramaCompleto_N009_ME000000045 = query.Find(p => p.T_Id_Componente == "N009-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.HisopadoFaringeo_N009_ME000000095 = query.Find(p => p.T_Id_Componente == "N009-ME000000095" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000095" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000095" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.InmunoEnzima_N009_ME000000005 = query.Find(p => p.T_Id_Componente == "N009-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ParasitologicoSeriado_N009_ME000000049 = query.Find(p => p.T_Id_Componente == "N009-ME000000049" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000049" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000049" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ParasitologicoSimple_N009_ME000000010 = query.Find(p => p.T_Id_Componente == "N009-ME000000010" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000010" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000010" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.PerfilHepatico_N009_ME000000096 = query.Find(p => p.T_Id_Componente == "N009-ME000000096" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000096" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000096" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.PlomoSangre_N009_ME000000060 = query.Find(p => p.T_Id_Componente == "N009-ME000000060" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000060" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000060" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.SeriologiaLues_N002_ME000000013 = query.Find(p => p.T_Id_Componente == "N002-ME000000013" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000013" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000013" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.SubUniBetaCualitativo_N009_ME000000027 = query.Find(p => p.T_Id_Componente == "N002-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TGO_N009_ME000000054 = query.Find(p => p.T_Id_Componente == "N009-ME000000054" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000054" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000054" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TGP_N009_ME000000055 = query.Find(p => p.T_Id_Componente == "N009-ME000000055" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000055" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000055" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TIFICOH_N009_ME000000080 = query.Find(p => p.T_Id_Componente == "N009-ME000000080" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000080" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000080" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TIFICOO_N009_ME000000079 = query.Find(p => p.T_Id_Componente == "N009-ME000000079" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000079" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000079" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ToxicologicoAlcoholemia_N009_ME000000041 = query.Find(p => p.T_Id_Componente == "N009-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ToxicologicoAnfetaminas_N009_ME000000043 = query.Find(p => p.T_Id_Componente == "N009-ME000000043" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000043" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000043" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ToxicologicoBenzodiazepinas_N009_ME000000040 = query.Find(p => p.T_Id_Componente == "N009-ME000000040" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000040" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000040" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ToxicologicoCarboxihemoglobina_N002_ME000000042 = query.Find(p => p.T_Id_Componente == "N002-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.ToxicologicoColinesterasa_N009_ME000000042 = query.Find(p => p.T_Id_Componente == "N009-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ToxicologicoCocainaMarihuana_N009_ME000000053 = query.Find(p => p.T_Id_Componente == "N009-ME000000053" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000053" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000053" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Trigliceridos_N002_ME000000012 = query.Find(p => p.T_Id_Componente == "N002-ME000000012" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000012" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000012" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Trigliceridos_N009_ME000000017 = query.Find(p => p.T_Id_Componente == "N009-ME000000017" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000017" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000017" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Urea_N009_ME000000073 = query.Find(p => p.T_Id_Componente == "N009-ME000000073" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000073" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000073" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VDRL_N009_ME000000003 = query.Find(p => p.T_Id_Componente == "N009-ME000000003" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000003" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000003" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Odontograma_N002_ME000000027 = query.Find(p => p.T_Id_Componente == "N002-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Electrocardiograma_N002_ME000000025 = query.Find(p => p.T_Id_Componente == "N002-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.PruebaEsfuerzo_N002_ME000000029 = query.Find(p => p.T_Id_Componente == "N002-ME000000029" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000029" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000029" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EvaCardiologica_N009_ME000000092 = query.Find(p => p.T_Id_Componente == "N009-ME000000092" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000092" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000092" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.RadiografiaTorax_N002_ME000000032 = query.Find(p => p.T_Id_Componente == "N002-ME000000032" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000032" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000032" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EcografiaRenal_N009_ME000000019 = query.Find(p => p.T_Id_Componente == "N009-ME000000019" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000019" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000019" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EcografiaProstata_N009_ME000000020 = query.Find(p => p.T_Id_Componente == "N009-ME000000020" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000020" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000020" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EcografiaAbdominal_N009_ME000000051 = query.Find(p => p.T_Id_Componente == "N009-ME000000051" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000051" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000051" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.RadiografiaOIT_N009_ME000000062 = query.Find(p => p.T_Id_Componente == "N009-ME000000062" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000062" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000062" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.InformePsicologico_N002_ME000000033 = query.Find(p => p.T_Id_Componente == "N002-ME000000033" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000033" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000033" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.FuncionesVitales_N002_ME000000001 = query.Find(p => p.T_Id_Componente == "N002-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Antropometria_N002_ME000000002 = query.Find(p => p.T_Id_Componente == "N002-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ExamenFisico_N002_ME000000022 = query.Find(p => p.T_Id_Componente == "N002-ME000000022" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000022" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000022" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ExamenAlturaGeografica_N002_ME000000045 = query.Find(p => p.T_Id_Componente == "N002-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.ExamenOsteomuscular_N002_ME000000046 = query.Find(p => p.T_Id_Componente == "N002-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ExamenAlturaEstructural_N009_ME000000015 = query.Find(p => p.T_Id_Componente == "N009-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.CuestionarioActividadFisica_N009_ME000000018 = query.Find(p => p.T_Id_Componente == "N009-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TamizajeDermatologico_N009_ME000000044 = query.Find(p => p.T_Id_Componente == "N009-ME000000044" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000044" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000044" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ExamenFisico7C_N009_ME000000052 = query.Find(p => p.T_Id_Componente == "N009-ME000000052" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000052" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000052" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ExamenOsteomuscular2_N009_ME000000084 = query.Find(p => p.T_Id_Componente == "N009-ME000000084" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000084" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000084" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EvaluacionNeurologica_N009_ME000000085 = query.Find(p => p.T_Id_Componente == "N009-ME000000085" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000085" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000085" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.CuestionarioNordicoOsteomuscular_N009_ME000000089 = query.Find(p => p.T_Id_Componente == "N009-ME000000089" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000089" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000089" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TestVertigo_N009_ME000000090 = query.Find(p => p.T_Id_Componente == "N009-ME000000090" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000090" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000090" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.OsteoMuscular_N009_ME000000091 = query.Find(p => p.T_Id_Componente == "N009-ME000000091" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000091" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000091" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.VacunaFiebreAmarilla_N009_ME000000063 = query.Find(p => p.T_Id_Componente == "N009-ME000000063" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000063" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000063" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaInfluencia_N009_ME000000064 = query.Find(p => p.T_Id_Componente == "N009-ME000000064" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000064" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000064" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaDifteria_N009_ME000000065 = query.Find(p => p.T_Id_Componente == "N009-ME000000065" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000065" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000065" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaHepatitisA_N009_ME000000066 = query.Find(p => p.T_Id_Componente == "N009-ME000000066" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000066" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000066" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaHepatitisB_N009_ME000000067 = query.Find(p => p.T_Id_Componente == "N009-ME000000067" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000067" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000067" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaAntirrabica_N009_ME000000068 = query.Find(p => p.T_Id_Componente == "N009-ME000000068" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000068" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000068" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.InfluenzaA1H1N1_N009_ME000000069 = query.Find(p => p.T_Id_Componente == "N009-ME000000069" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000069" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000069" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaTriple_N009_ME000000070 = query.Find(p => p.T_Id_Componente == "N009-ME000000070" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000070" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000070" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VacunaVaricela_N009_ME000000071 = query.Find(p => p.T_Id_Componente == "N009-ME000000071" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000071" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000071" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Oftalmolgia_N002_ME000000028 = query.Find(p => p.T_Id_Componente == "N002-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.TestOjoSeco_N009_ME000000083 = query.Find(p => p.T_Id_Componente == "N009-ME000000083" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000083" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000083" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Petrinovic_N009_ME000000098 = query.Find(p => p.T_Id_Componente == "N009-ME000000098" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000098" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000098" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Audiometria_N002_ME000000005 = query.Find(p => p.T_Id_Componente == "N002-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Espirometria_N002_ME000000031 = query.Find(p => p.T_Id_Componente == "N002-ME000000031" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000031" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000031" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.Electroencefalograma_N009_ME000000099 = query.Find(p => p.T_Id_Componente == "N009-ME000000099" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000099" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000099" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.FATIGA_N002_ME000000034 = query.Find(p => p.T_Id_Componente == "N002_ME000000034" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002_ME000000034" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002_ME000000034" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.MASLACHBURNOUTESTRES_N002_ME000000036 = query.Find(p => p.T_Id_Componente == "N002-ME000000036" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000036" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000036" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.DEPRESION_N002_ME000000037 = query.Find(p => p.T_Id_Componente == "N002-ME000000037" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000037" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000037" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.FOBIAALASALTURAS_N002_ME000000038 = query.Find(p => p.T_Id_Componente == "N002-ME000000038" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000038" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000038" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ANSIEDAD_N002_ME000000039 = query.Find(p => p.T_Id_Componente == "N002-ME000000039" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000039" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000039" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ESPACIOSCONFINADOS_N002_ME000000041 = query.Find(p => p.T_Id_Componente == "N002-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.INFORMEDELABORATORIO_N009_ME000000002 = query.Find(p => p.T_Id_Componente == "N009-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.SUBUNIDADBETACUALITATIVO_N009_ME000000027 = query.Find(p => p.T_Id_Componente == "N009-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EVALUACIONPSICOLABORALNOVALE_N009_ME000000072 = query.Find(p => p.T_Id_Componente == "N009-ME000000072" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000072" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000072" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TESTISHIHARA_N009_ME000000093 = query.Find(p => p.T_Id_Componente == "N009-ME000000093" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000093" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000093" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.HISTORIACLINICAPSICOLOGICA_N009_ME000000112 = query.Find(p => p.T_Id_Componente == "N009-ME000000112" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000112" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000112" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.HEMOGRAMACONSTANTESCORP_N009_ME000000113 = query.Find(p => p.T_Id_Componente == "N009-ME000000113" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000113" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000113" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.PERFILLIPIDICO_N009_ME000000114 = query.Find(p => p.T_Id_Componente == "N009-ME000000114" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000114" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000114" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.MICROALBUMINURIA_N009_ME000000117 = query.Find(p => p.T_Id_Componente == "N009-ME000000117" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000117" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000117" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.HISOPADONASOFARINGEO_N009_ME000000118 = query.Find(p => p.T_Id_Componente == "N009-ME000000118" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000118" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000118" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.REACCIONINFLAMATORIA_N009_ME000000119 = query.Find(p => p.T_Id_Componente == "N009-ME000000119" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000119" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000119" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.HCV_N009_ME000000120 = query.Find(p => p.T_Id_Componente == "N009-ME000000120" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000120" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000120" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.HBsAg_N009_ME000000121 = query.Find(p => p.T_Id_Componente == "N009-ME000000121" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000121" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000121" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EXAMENKOH_N009_ME000000122 = query.Find(p => p.T_Id_Componente == "N009-ME000000122" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000122" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000122" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TIEMPODESANGRIA_N009_ME000000123 = query.Find(p => p.T_Id_Componente == "N009-ME000000123" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000123" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000123" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.TIEMPODECOAGULACION_N009_ME000000124 = query.Find(p => p.T_Id_Componente == "N009-E000000124" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-E000000124" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-E000000124" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.INSULINABASAL_N009_ME000000125 = query.Find(p => p.T_Id_Componente == "N009-ME000000125" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000125" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000125" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.SOMNOLENCIA_N009_ME000000126 = query.Find(p => p.T_Id_Componente == "N009-ME000000126" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000126" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000126" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.ACUAMETRIA_N009_ME000000127 = query.Find(p => p.T_Id_Componente == "N009-ME000000127" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000127" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000127" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.EVALUACIONERGONOMICA_N009_ME000000128 = query.Find(p => p.T_Id_Componente == "N009-ME000000128" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000128" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000128" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.OTOSCOPIA_N009_ME000000129 = query.Find(p => p.T_Id_Componente == "N009-ME000000129" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000129" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000129" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.RADIOGRAFIALUMBOSACRA_N009_ME000000130 = query.Find(p => p.T_Id_Componente == "N009-ME000000130" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000130" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000130" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.SINTOMATICORESPIRATORIO_N009_ME000000131 = query.Find(p => p.T_Id_Componente == "N009-ME000000131" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000131" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000131" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.FONDODEOJO_N009_ME000000132 = query.Find(p => p.T_Id_Componente == "N009-ME000000132" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000132" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000132" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.CAMPIMETRIA_N009_ME000000133 = query.Find(p => p.T_Id_Componente == "N009-ME000000133" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000133" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000133" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.TONOMETRIA_N009_ME000000134 = query.Find(p => p.T_Id_Componente == "N009-ME000000134" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000134" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000134" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.RADIOGRAFIADECOLUMNACERVICODORSOLUMBAR_N009_ME000000302 = query.Find(p => p.T_Id_Componente == "N009-ME000000302" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000302" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000302" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TOXICOLOGICO_N009_ME000000303 = query.Find(p => p.T_Id_Componente == "N009-ME000000303" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000303" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000303" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.AFECTIVIDAD_N009_ME000000304 = query.Find(p => p.T_Id_Componente == "N009-ME000000304" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000304" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000304" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.AUTOESTIMA_N009_ME000000305 = query.Find(p => p.T_Id_Componente == "N009-ME000000305" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000305" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000305" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.FOBIASOCIAL02_N009_ME000000306 = query.Find(p => p.T_Id_Componente == "N009-ME000000306" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000306" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000306" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.PERSONALIDAD_N009_ME000000307 = query.Find(p => p.T_Id_Componente == "N009-ME000000307" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000307" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000307" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.FOBIASOCIALSOCIALPHOBIAINVENTORYSPIN_N009_ME000000308 = query.Find(p => p.T_Id_Componente == "N009-ME000000308" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000308" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000308" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TRABAJOENEQUIPO_N009_ME000000309 = query.Find(p => p.T_Id_Componente == "N009-ME000000309" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000309" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000309" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.AUTOEVALUACION_N009_ME000000310 = query.Find(p => p.T_Id_Componente == "N009-ME000000310" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000310" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000310" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.ISTASRIESGOPSICOSOCIAL_N009_ME000000311 = query.Find(p => p.T_Id_Componente == "N009-ME000000311" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000311" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000311" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.WONDERLICIMPRIMIR_N009_ME000000312 = query.Find(p => p.T_Id_Componente == "N009-ME000000312" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000312" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000312" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.COMPETENCIASLOGROPIMPRIMIR_N009_ME000000312 = query.Find(p => p.T_Id_Componente == "N009-ME000000312" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000312" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000312" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.CARGAVOCALIMPRIMIR_N009_ME000000314 = query.Find(p => p.T_Id_Componente == "N009-ME000000314" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000314" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000314" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.SENSIBILIDADMUCOSAEDITARHCL_N009_ME000000315 = query.Find(p => p.T_Id_Componente == "N009-ME000000315" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000315" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000315" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.VSGEDITARHCL_N009_ME000000316 = query.Find(p => p.T_Id_Componente == "N009-ME000000316" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000316" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000316" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.TESTTRABAJOENEQUIPONOVALE_N009_ME000000317 = query.Find(p => p.T_Id_Componente == "N009-ME000000317" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000317" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000317" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.COMUNICACIONIMPRIMIR_N009_ME000000318 = query.Find(p => p.T_Id_Componente == "N009-ME000000318" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000318" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000318" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.DESCARTEDEADICCIONESIMPRIMIR_N009_ME000000319 = query.Find(p => p.T_Id_Componente == "N009-ME000000319" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000319" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000319" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.INTELIGENCIAIMPRIMIR_N009_ME000000320 = query.Find(p => p.T_Id_Componente == "N009-ME000000320" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000320" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000320" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.ATENCIONCONCENTRACIONIMPRIMIR_N009_ME000000321 = query.Find(p => p.T_Id_Componente == "N009-ME000000321" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000321" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000321" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.MONOTONIAIMPRIMIR_N009_ME000000322 = query.Find(p => p.T_Id_Componente == "N009-ME000000322" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000322" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000322" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.DECLARNODROGASEDITARHCL_N009_ME000000323 = query.Find(p => p.T_Id_Componente == "N009-ME000000323" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000323" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000323" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.MINIMENTALIMPRIMIR_N009_ME000000324 = query.Find(p => p.T_Id_Componente == "N009-ME000000324" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000324" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000324" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.GINECOLOGIAPAP_N009_ME000000325 = query.Find(p => p.T_Id_Componente == "N009-ME000000325" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000325" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000325" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.LAKELOUISIMPRIMIR_N009_ME000000326 = query.Find(p => p.T_Id_Componente == "N009-ME000000326" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000326" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000326" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
                //    oListaExamenes.COPROPORFORINAEDITAR_N009_ME000000329 = query.Find(p => p.T_Id_Componente == "N009-ME000000329" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N009-ME000000329" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000329" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();


                //    oListaExamenes.FATIGA_N002_ME000000034 = query.Find(p => p.T_Id_Componente == "N002-ME000000034" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "Borrar" : query.Find(p => p.T_Id_Componente == "N002-ME000000034" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO == "NO REALIZADO" ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000034" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_Total.ToString();
				   



                //    var x = query.FindAll(p => p.T_Id_Servicio == oListaExamenes.ServiceId && p.T_REALIZADO != "NO REALIZADO");
                //    oListaExamenes.COSTO = x.Sum(p => decimal.Parse(p.T_Total.ToString()));

                //    var r = double.Parse(oListaExamenes.COSTO.ToString()) * 0.18;
                //    oListaExamenes.IGV = decimal.Parse(r.ToString());

                //    oListaExamenes.TOTALSERVICIO = oListaExamenes.COSTO + oListaExamenes.IGV;


                //    ListListaExamenes.Add(oListaExamenes);
                //}

				return null;
			}
			catch (Exception ex)
			{
				throw;
			}
		}

		public List<ServiceComponentList> GetServiceComponentsReport(string pstrServiceId)
		{
			//mon.IsActive = true;        
			int isDeleted = 0;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				#region serviceComponentFields

				var serviceComponentFields = (from A in dbContext.servicecomponent
											  join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
											  join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
											  join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
											  join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
											  join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

											  join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
																 equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
											  from dh in dh_join.DefaultIfEmpty()

											  where (A.v_ServiceId == pstrServiceId) &&
												  //(cm.v_ComponentId == pstrComponentId) &&
													(A.i_IsDeleted == isDeleted) &&
													(B.i_IsDeleted == isDeleted) &&
													(C.i_IsDeleted == isDeleted)

											  select new ServiceComponentFieldsList
											  {
												  v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
												  v_ComponentFieldsId = B.v_ComponentFieldId,
												  v_ComponentFielName = D.v_TextLabel,
												  v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
												  i_GroupId = D.i_GroupId.Value,
												  v_MeasurementUnitName = dh.v_Value1,
												  v_ComponentId = cm.v_ComponentId,
												  v_ServiceComponentId = A.v_ServiceComponentId
											  }).ToList();

				int rpta = 0;

				var _finalQuery = (from a in serviceComponentFields
								   let value1 = int.TryParse(a.v_Value1, out rpta)
								   join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
												   equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
								   from sp in sp_join.DefaultIfEmpty()

								   select new ServiceComponentFieldsList
								   {
									   v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
									   v_ComponentFieldsId = a.v_ComponentFieldsId,
									   v_ComponentFielName = a.v_ComponentFielName,
									   i_GroupId = a.i_GroupId,
									   v_Value1 = a.v_Value1,
									   v_Value1Name = sp == null ? "" : sp.v_Value1,
									   v_MeasurementUnitName = a.v_MeasurementUnitName,
									   v_ComponentId = a.v_ComponentId,
									   v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, a.v_ComponentId),
									   v_ServiceComponentId = a.v_ServiceComponentId
								   }).ToList();


				#endregion

				var components = (from aaa in dbContext.servicecomponent
								  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
								  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
												  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
								  from J1 in J1_join.DefaultIfEmpty()

								  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
																  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
								  from J2 in J2_join.DefaultIfEmpty()

								  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
																			   equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
								  from fff in J5_join.DefaultIfEmpty()

								  // Usuario Medico Evaluador / Medico Aprobador ****************************
								  join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								  from me in me_join.DefaultIfEmpty()

								  join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								  from pme in pme_join.DefaultIfEmpty()

								  //*********************************************************************

								  where (aaa.v_ServiceId == pstrServiceId) &&
										(bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
										(aaa.i_IsDeleted == 0) &&
										(aaa.i_IsRequiredId == (int?)SiNo.SI)

								  //orderby bbb.i_CategoryId, bbb.v_Name

								  select new
								  {
									  v_ComponentId = bbb.v_ComponentId,
									  v_ComponentName = bbb.v_Name,
									  v_ServiceComponentId = aaa.v_ServiceComponentId,
									  v_CreationUser = J1.v_UserName,
									  v_UpdateUser = J2.v_UserName,
									  d_CreationDate = aaa.d_InsertDate,
									  d_UpdateDate = aaa.d_UpdateDate,
									  i_IsDeleted = aaa.i_IsDeleted.Value,
									  i_CategoryId = bbb.i_CategoryId.Value,
									  v_CategoryName = fff.v_Value1,
									  i_ServiceComponentStatusId = aaa.i_ServiceComponentStatusId,
									  DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
															  where (dr.v_ServiceId == pstrServiceId) &&
																	(dr.v_ComponentId == aaa.v_ComponentId && dr.i_IsDeleted == 0)
															  select new DiagnosticRepositoryList
															  {
																  v_DiseasesId = dr.diseases.v_DiseasesId,
																  v_DiseasesName = dr.diseases.v_Name
															  }),
									  FirmaMedico = pme.b_SignatureImage
								  }).AsEnumerable().Select(p => new ServiceComponentList
								  {
									  v_ComponentId = p.v_ComponentId,
									  v_ComponentName = p.v_ComponentName,
									  v_ServiceComponentId = p.v_ServiceComponentId,
									  v_CreationUser = p.v_CreationUser,
									  v_UpdateUser = p.v_UpdateUser,
									  d_CreationDate = p.d_CreationDate,
									  d_UpdateDate = p.d_UpdateDate,
									  i_IsDeleted = p.i_IsDeleted,
									  i_CategoryId = p.i_CategoryId,
									  v_CategoryName = p.v_CategoryName,
									  i_ServiceComponentStatusId = p.i_ServiceComponentStatusId,
									  DiagnosticRepository = p.DiagnosticRepository.ToList(),
									  FirmaMedico = p.FirmaMedico
								  }).ToList();

				//var ff = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GLUCOSA_ID);
				//var ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);
				//var _ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.COLESTEROL_ID);

				components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
				components.ForEach(a => a.ServiceComponentFields = _finalQuery.FindAll(p => p.v_ComponentId == a.v_ComponentId));

				return components;
			}
			catch (Exception)
			{
				throw;
			}
		}

		public List<ServiceComponentList> GetServiceComponentsReport_(string pstrServiceId)
		{
			//mon.IsActive = true;        
			int isDeleted = 0;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				#region serviceComponentFields

				var serviceComponentFields = (from A in dbContext.servicecomponent
											  join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
											  join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
											  join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
											  join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
											  join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

											  join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
																 equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
											  from dh in dh_join.DefaultIfEmpty()

											  where (A.v_ServiceId == pstrServiceId) &&
												  //(cm.v_ComponentId == pstrComponentId) &&
													(A.i_IsDeleted == isDeleted) &&
													(B.i_IsDeleted == isDeleted) &&
													(C.i_IsDeleted == isDeleted)

											  select new ServiceComponentFieldsList
											  {
												  v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
												  v_ComponentFieldsId = B.v_ComponentFieldId,
												  v_ComponentFielName = D.v_TextLabel,
												  v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
												  i_GroupId = D.i_GroupId.Value,
												  v_MeasurementUnitName = dh.v_Value1,
												  v_ComponentId = cm.v_ComponentId,
												  v_ServiceComponentId = A.v_ServiceComponentId
											  }).ToList();

				int rpta = 0;

				var _finalQuery = (from a in serviceComponentFields
								   let value1 = int.TryParse(a.v_Value1, out rpta)
								   join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
												   equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
								   from sp in sp_join.DefaultIfEmpty()

								   select new ServiceComponentFieldsList
								   {
									   v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
									   v_ComponentFieldsId = a.v_ComponentFieldsId,
									   v_ComponentFielName = a.v_ComponentFielName,
									   i_GroupId = a.i_GroupId,
									   v_Value1 = a.v_Value1,
									   v_Value1Name = sp == null ? "" : sp.v_Value1,
									   v_MeasurementUnitName = a.v_MeasurementUnitName,
									   v_ComponentId = a.v_ComponentId,
									   v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, a.v_ComponentId),
									   v_ServiceComponentId = a.v_ServiceComponentId
								   }).ToList();


				#endregion

				var components = (from aaa in dbContext.servicecomponent
								  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
								  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
												  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
								  from J1 in J1_join.DefaultIfEmpty()

								  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
																  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
								  from J2 in J2_join.DefaultIfEmpty()

								  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
																			   equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
								  from fff in J5_join.DefaultIfEmpty()

								  // Usuario Medico Evaluador / Medico Aprobador ****************************
								  join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								  from me in me_join.DefaultIfEmpty()

								  join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								  from pme in pme_join.DefaultIfEmpty()

								  //*********************************************************************

								  where (aaa.v_ServiceId == pstrServiceId) &&
										(bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
										(aaa.i_IsDeleted == 0) &&
										(aaa.i_IsRequiredId == (int?)SiNo.SI)

								  //orderby bbb.i_CategoryId, bbb.v_Name

								  select new
								  {
									  v_ComponentId = bbb.v_ComponentId,
									  v_ComponentName = bbb.v_Name,
									  v_ServiceComponentId = aaa.v_ServiceComponentId,
									  v_CreationUser = J1.v_UserName,
									  v_UpdateUser = J2.v_UserName,
									  d_CreationDate = aaa.d_InsertDate,
									  d_UpdateDate = aaa.d_UpdateDate,
									  i_IsDeleted = aaa.i_IsDeleted.Value,
									  i_CategoryId = bbb.i_CategoryId.Value,
									  v_CategoryName = fff.v_Value1,
									  DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
															  where (dr.v_ServiceId == pstrServiceId) &&
																	(dr.v_ComponentId == aaa.v_ComponentId) &&
																	(dr.i_FinalQualificationId == (int)FinalQualification.Presuntivo || dr.i_FinalQualificationId == (int)FinalQualification.Definitivo) &&
																	(dr.i_IsDeleted == 0)


															  select new DiagnosticRepositoryList
															  {
																  v_DiseasesId = dr.diseases.v_DiseasesId,
																  v_DiseasesName = dr.diseases.v_Name
															  }),
									  FirmaMedico = pme.b_SignatureImage
								  }).AsEnumerable().Select(p => new ServiceComponentList
								  {
									  v_ComponentId = p.v_ComponentId,
									  v_ComponentName = p.v_ComponentName,
									  v_ServiceComponentId = p.v_ServiceComponentId,
									  v_CreationUser = p.v_CreationUser,
									  v_UpdateUser = p.v_UpdateUser,
									  d_CreationDate = p.d_CreationDate,
									  d_UpdateDate = p.d_UpdateDate,
									  i_IsDeleted = p.i_IsDeleted,
									  i_CategoryId = p.i_CategoryId,
									  v_CategoryName = p.v_CategoryName,
									  DiagnosticRepository = p.DiagnosticRepository.ToList(),
									  FirmaMedico = p.FirmaMedico
								  }).ToList();

				//var ff = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GLUCOSA_ID);
				//var ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);
				//var _ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.COLESTEROL_ID);

				components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
				components.ForEach(a => a.ServiceComponentFields = _finalQuery.FindAll(p => p.v_ComponentId == a.v_ComponentId));

				return components;
			}
			catch (Exception)
			{
				throw;
			}
		}

		// Alejandro
		public List<ServiceComponentList> GetServiceComponentsForManagementReport(string pstrServiceId)
		{
			//mon.IsActive = true;        
			var isDeleted = 0;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var components = (from aaa in dbContext.servicecomponent
								  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
								  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
												  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
								  from J1 in J1_join.DefaultIfEmpty()

								  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
																  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
								  from J2 in J2_join.DefaultIfEmpty()

								  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
																			   equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
								  from fff in J5_join.DefaultIfEmpty()

								  where (aaa.v_ServiceId == pstrServiceId) &&
										(bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
										(aaa.i_IsDeleted == isDeleted) &&
										(aaa.i_IsRequiredId == (int?)SiNo.SI)
								  orderby bbb.i_CategoryId, bbb.v_Name

								  select new ServiceComponentList
								  {
									  v_ComponentId = bbb.v_ComponentId,
									  v_ComponentName = bbb.v_Name,
									  v_ServiceComponentId = aaa.v_ServiceComponentId,
									  i_CategoryId = bbb.i_CategoryId.Value,
									  v_CategoryName = fff.v_Value1

								  }).ToList();

				return components;
			}
			catch (Exception)
			{
				throw;
			}
		}


		public List<ServiceComponentList> GetServiceComponentsForManagementReportAtxMedica(string pstrServiceId)
		{
			//mon.IsActive = true;        
			var isDeleted = 0;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var components = (from ccc in dbContext.auxiliaryexam

								  join ddd in dbContext.component on ccc.v_ComponentId equals ddd.v_ComponentId

								  where (ccc.v_ServiceId == pstrServiceId) &&
										(ccc.i_IsDeleted == isDeleted)

								  orderby ddd.i_CategoryId, ddd.v_Name

								  select new ServiceComponentList
								  {
									  v_ComponentId = ccc.v_ComponentId,
									  v_ComponentName = ddd.v_Name

								  }).ToList();

				return components;
			}
			catch (Exception)
			{
				throw;
			}
		}

		// Alejandro
		public string GetServiceComponentDiagnosticsReport(string pstrServiceId, string pstrComponentId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from ccc in dbContext.diagnosticrepository
							 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId
							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
							 where (ccc.v_ServiceId == pstrServiceId) &&
								   (ccc.v_ComponentId == pstrComponentId) &&
								   (ccc.i_IsDeleted == 0)
							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_ComponentId = ccc.v_ComponentId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 v_DiseasesName = ddd.v_Name,

							 }).ToList();

				var concat = string.Join(", ", query.Select(p => p.v_DiseasesName));

				return concat;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		// Alejandro
		public List<RecomendationList> GetServiceRecommendationByDiagnosticRepositoryIdReport(string pstrDiagnosticRepositoryId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<RecomendationList> query = (from ddd in dbContext.recommendation
												 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId
																		 equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                                                              
												 where (ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId) &&
													   (ddd.i_IsDeleted == 0)
												 select new RecomendationList
												 {
													 v_RecommendationId = ddd.v_RecommendationId,
													 v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
													 v_ServiceId = ddd.v_ServiceId,
													 v_ComponentId = ddd.v_ComponentId,
													 v_MasterRecommendationId = ddd.v_MasterRecommendationId,
													 v_RecommendationName = eee.v_Name,

												 }).ToList();

				var objData = query.AsEnumerable()
					 .GroupBy(x => x.v_RecommendationId)
					 .Select(group => group.First());


				// add the sequence number on the fly
				var finalQuery = objData.Select((a, index) => new RecomendationList
				{
					i_Item = index + 1,
					v_RecommendationId = a.v_RecommendationId,
					v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
					v_ServiceId = a.v_ServiceId,
					v_ComponentId = a.v_ComponentId,
					v_MasterRecommendationId = a.v_MasterRecommendationId,
					v_RecommendationName = a.v_RecommendationName,
				}).ToList();

				return finalQuery;
			}
			catch (Exception ex)
			{

				return null;
			}
		}

		// Beto
		public List<RestrictionList> GetServiceRestrictionByDiagnosticRepositoryIdReport(string pstrDiagnosticRepositoryId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<RestrictionList> query = (from ddd in dbContext.restriction
											   join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId
																	   equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                                                              
											   where (ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId) &&
													 (ddd.i_IsDeleted == 0)
											   select new RestrictionList
											   {
												   v_RestrictionId = ddd.v_RestrictionId,
												   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
												   v_ServiceId = ddd.v_ServiceId,
												   v_ComponentId = ddd.v_ComponentId,
												   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
												   v_RestrictionName = eee.v_Name,

											   }).ToList();

				// add the sequence number on the fly
				var finalQuery = query.Select((a, index) => new RestrictionList
				{
					i_Item = index + 1,
					v_RestrictionId = a.v_RestrictionId,
					v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
					v_ServiceId = a.v_ServiceId,
					v_ComponentId = a.v_ComponentId,
					v_MasterRestrictionId = a.v_MasterRestrictionId,
					v_RestrictionName = a.v_RestrictionName,
				}).ToList();

				return finalQuery;
			}
			catch (Exception ex)
			{

				return null;
			}
		}

		// Alejandro 
		public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceIdReport(string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from ccc in dbContext.diagnosticrepository
							 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
							 from bbb in J7_join.DefaultIfEmpty()

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       

							 join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
							 from fff in J5_join.DefaultIfEmpty()

							 join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
							 from ggg in J4_join.DefaultIfEmpty()

							 join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																	 equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
							 from hhh in J3_join.DefaultIfEmpty()

							 join cat in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 }
																   equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
							 from cat in cat_join.DefaultIfEmpty()

							 where (ccc.v_ServiceId == pstrServiceId) &&
							 (ccc.i_IsDeleted == 0) &&
							 (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
							 ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo ||
							 ccc.i_FinalQualificationId == (int)FinalQualification.Descartado)

							 orderby bbb.v_Name

							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_ComponentId = ccc.v_ComponentId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 v_DiseasesName = ddd.v_Name,
								 v_ComponentName = bbb.v_Name,
								 v_PreQualificationName = fff.v_Value1,
								 v_FinalQualificationName = ggg.v_Value1,
								 v_DiagnosticTypeName = hhh.v_Value1,
								 v_ComponentFieldsId = ccc.v_ComponentFieldId,
								 v_Dx_CIE10 = ddd.v_CIE10Id,
								 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
								 i_FinalQualificationId = ccc.i_FinalQualificationId,
								 i_CategoryId = bbb.i_CategoryId.Value,
								 Categoria = cat.v_Value1
							 }).ToList();

				// add the sequence number on the fly
				var finalQuery = query.Select((a, index) => new DiagnosticRepositoryList
				{
					i_Item = index + 1,
					v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
					v_ServiceId = a.v_ServiceId,
					v_ComponentId = a.v_ComponentId,
					v_DiseasesId = a.v_DiseasesId,
					v_DiseasesName = a.v_DiseasesName,
					v_ComponentName = a.v_ComponentName,
					v_DiagnosticTypeName = a.v_DiagnosticTypeName,
					Recomendations = GetServiceRecommendationByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
					Restrictions = GetServiceRestrictionByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
					v_ComponentFieldsId = a.v_ComponentFieldsId,
					v_Dx_CIE10 = a.v_Dx_CIE10,
					i_DiagnosticTypeId = a.i_DiagnosticTypeId,
					i_FinalQualificationId = a.i_FinalQualificationId,
					i_CategoryId = a.i_CategoryId,
					Categoria = a.Categoria
				}).ToList();

				return finalQuery;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceIdReport_TODOS(string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from ccc in dbContext.diagnosticrepository
							 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
							 from bbb in J7_join.DefaultIfEmpty()

							 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       

							 join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
																 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
							 from fff in J5_join.DefaultIfEmpty()

							 join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
																 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
							 from ggg in J4_join.DefaultIfEmpty()

							 join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
																	 equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
							 from hhh in J3_join.DefaultIfEmpty()

							 join cat in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 }
																   equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
							 from cat in cat_join.DefaultIfEmpty()

							 where (ccc.v_ServiceId == pstrServiceId) &&
							 (ccc.i_IsDeleted == 0)                            

							 orderby cat.v_Value1

							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
								 v_ServiceId = ccc.v_ServiceId,
								 v_ComponentId = ccc.v_ComponentId,
								 v_DiseasesId = ccc.v_DiseasesId,
								 v_DiseasesName = ddd.v_Name,
								 v_ComponentName = bbb.v_Name,
								 v_PreQualificationName = fff.v_Value1,
								 v_FinalQualificationName = ggg.v_Value1,
								 v_DiagnosticTypeName = hhh.v_Value1,
								 v_ComponentFieldsId = ccc.v_ComponentFieldId,
								 v_Dx_CIE10 = ddd.v_CIE10Id,
								 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
								 i_FinalQualificationId = ccc.i_FinalQualificationId,
								 i_CategoryId = bbb.i_CategoryId.Value,
								 Categoria = cat.v_Value1
							 }).ToList();

				// add the sequence number on the fly
				var finalQuery = query.Select((a, index) => new DiagnosticRepositoryList
				{
					i_Item = index + 1,
					v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
					v_ServiceId = a.v_ServiceId,
					v_ComponentId = a.v_ComponentId,
					v_DiseasesId = a.v_DiseasesId,
					v_DiseasesName = a.v_DiseasesName,
					v_ComponentName = a.v_ComponentName,
					v_DiagnosticTypeName = a.v_DiagnosticTypeName,
					Recomendations = GetServiceRecommendationByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
					Restrictions = GetServiceRestrictionByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
					v_ComponentFieldsId = a.v_ComponentFieldsId,
					v_Dx_CIE10 = a.v_Dx_CIE10,
					i_DiagnosticTypeId = a.i_DiagnosticTypeId,
					i_FinalQualificationId = a.i_FinalQualificationId,
					i_CategoryId = a.i_CategoryId,
					Categoria = a.Categoria
				}).ToList();

				return finalQuery;
			}
			catch (Exception ex)
			{
				return null;
			}
		}


		//AMC
		public List<DiagnosticRepositoryList> GetDxByServiceId(string pstrServiceId)
		{
			//mon.IsActive = true;

			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var query = (from ccc in dbContext.diagnosticrepository
								 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
								 from bbb in J7_join.DefaultIfEmpty()
								 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       
								 where (ccc.v_ServiceId == pstrServiceId) &&
									 (ccc.i_IsDeleted == isDeleted) &&
									 (ccc.i_FinalQualificationId == definitivo ||
									 ccc.i_FinalQualificationId == presuntivo)
								 //orderby bbb.v_Name

								 select new DiagnosticRepositoryList
								 {
									 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
									 v_ServiceId = ccc.v_ServiceId,
									 v_ComponentId = ccc.v_ComponentId,
									 v_DiseasesId = ccc.v_DiseasesId,
									 v_DiseasesName = ddd.v_Name,
									 v_ComponentName = bbb.v_Name
								 }).ToList();

					return query;
				}
			}
			catch (Exception ex)
			{
				return null;
			}
		}



		// Alejandro
		public bool IsPsicoExamIntoServiceComponent(string pstrserviceId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = "N002-ME000000033" }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }
								 where (A.v_ServiceId == pstrserviceId) &&
									   (E.i_IsRequiredId == (int)SiNo.SI)

								 select new ServiceList
								 {
									 v_ServiceComponentId = E.v_ServiceComponentId
								 }).FirstOrDefault();

				if (objEntity != null)
				{
					return true;
				}
			}
			catch (Exception)
			{

				throw;
			}

			return false;

		}



		//AMC

		public List<ServiceList> ReportAscensoGrandesAlturas(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join G in dbContext.professional on new { a = me.v_PersonId }
																	  equals new { a = G.v_PersonId } into G_join
								 from G in G_join.DefaultIfEmpty()

								 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
								 from H in H_join.DefaultIfEmpty()

								 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
								 from I in I_join.DefaultIfEmpty()

								 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
								 from J in J_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new ServiceList
								 {
									 v_PersonId = A.v_PersonId,
									 v_NamePacient = B.v_FirstName,
									 v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
									 DireccionPaciente = B.v_AdressLocation,
									 d_BirthDate = B.d_Birthdate,
									 d_ServiceDate = A.d_ServiceDate,
									 v_ServiceId = A.v_ServiceId,
									 v_DocNumber = B.v_DocNumber,
									 i_SexTypeId = B.i_SexTypeId.Value,
									 FirmaMedico = pme.b_SignatureImage,
									 ApellidosDoctor = H.v_FirstLastName + " " + H.v_SecondLastName,
									 NombreDoctor = H.v_FirstName,
									 CMP = pme.v_ProfessionalCode,
									 DireccionDoctor = H.v_AdressLocation,
									 EmpresaEmpleadora = J.v_Name,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 v_ServiceComponentId = E.v_ServiceComponentId,
									 NombreUsuarioGraba = H.v_FirstName + " " + H.v_FirstLastName + " " + H.v_SecondLastName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var funcionesVitales = ReportFuncionesVitales(pstrserviceId, Constants.FUNCIONES_VITALES_ID);
				var antropometria = ReportAntropometria(pstrserviceId, Constants.ANTROPOMETRIA_ID);
				var FirmaMedicoMedicina = ObtenerDatosMedicoMedicina(pstrserviceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID);

				var sql = (from a in objEntity.ToList()

						   select new ServiceList
						   {
							   v_ServiceId = a.v_ServiceId,
							   v_ServiceComponentId = a.v_ServiceComponentId,
							   v_PersonId = a.v_PersonId,
							   v_NamePacient = a.v_NamePacient,
							   DireccionPaciente = a.DireccionPaciente,
							   v_Surnames = a.v_Surnames,
							   d_BirthDate = a.d_BirthDate,
							   i_AgePacient = GetAge(a.d_BirthDate.Value),
							   d_ServiceDate = a.d_ServiceDate,
							   v_DocNumber = a.v_DocNumber,
							   i_SexTypeId = a.i_SexTypeId,

							   Anemia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ALTURA_7D_ANEMIA_ID, "NOCOMBO", 0, "SI"),
							   Cirugia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_CIRUGIA_MAYOR_CRECIENTE_ID, "NOCOMBO", 0, "SI"),
							   Desordenes = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_DESORDENES_COAGULACION_ID, "NOCOMBO", 0, "SI"),
							   Diabetes = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_DIABETES_MELLITUS_ID, "NOCOMBO", 0, "SI"),
							   Hipertension = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_HIPERTENSION_ARTERIAL_ID, "NOCOMBO", 0, "SI"),
							   Embarazo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_EMBARAZO_ID, "NOCOMBO", 0, "SI"),
							   ProbNeurologicos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_NEUROLOGICOS_ID, "NOCOMBO", 0, "SI"),
							   Infecciones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_INFECCIONES_RECIENTES_ID, "NOCOMBO", 0, "SI"),
							   Obesidad = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_OBESIDAD_MORBIDA_ID, "NOCOMBO", 0, "SI"),
							   ProCardiacos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_CARDIACOS_ID, "NOCOMBO", 0, "SI"),
							   ProRespiratorios = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_RESPIRATORIOS_ID, "NOCOMBO", 0, "SI"),
							   ProOftalmologico = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_OFTALMOLOGICOS_ID, "NOCOMBO", 0, "SI"),
							   ProDigestivo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_DIGESTIVOS_ID, "NOCOMBO", 0, "SI"),
							   Apnea = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_APNEA_SUEÑO_ID, "NOCOMBO", 0, "SI"),
							   Otra = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_OTRA_CONDICON_ID, "NOCOMBO", 0, "SI"),
							   Alergia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_ALERGIAS_ID, "NOCOMBO", 0, "SI"),
							   MedicacionActual = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_USO_MEDICACION_ACTUAL_ID, "NOCOMBO", 0, "SI"),
							   AptoAscenderAlturas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_APTO_ASCENDER_GRANDES_ALTURAS_ID, "SICOMBO", 163, "NO"),
							   ActividadRealizar = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_ACTIVIDAD_REALIZAR_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),


							   EmpresaEmpleadora = a.EmpresaEmpleadora,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Descripcion = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ALTURA_7D_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,

							   FirmaMedico = FirmaMedicoMedicina.FirmaMedicoMedicina,
							   ApellidosDoctor = FirmaMedicoMedicina.ApellidosDoctor,
							   NombreDoctor = FirmaMedicoMedicina.NombreDoctor,
							   CMP = FirmaMedicoMedicina.CMP,
							   DireccionDoctor = FirmaMedicoMedicina.DireccionDoctor,

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ServiceList> ReportFuncionesVitales(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId

								 //join G in dbContext.professional on new { a = F.v_PersonId }
								 //                                     equals new { a = G.v_PersonId } into G_join
								 //from G in G_join.DefaultIfEmpty()

								 //join H in dbContext.person on F.v_PersonId equals H.v_PersonId

								 //join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

								 //join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


								 where A.v_ServiceId == pstrserviceId
								 select new ServiceList
								 {
									 v_PersonId = A.v_PersonId,
									 v_NamePacient = B.v_FirstName,
									 v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
									 DireccionPaciente = B.v_AdressLocation,
									 d_BirthDate = B.d_Birthdate,
									 d_ServiceDate = A.d_ServiceDate,
									 v_ServiceId = A.v_ServiceId,
									 v_DocNumber = B.v_DocNumber


								 });

				var sql = (from a in objEntity.ToList()
						   select new ServiceList
						   {

							   FC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID, "NOCOMBO", 0, "SI"),
							   PA = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_PAS_ID, "NOCOMBO", 0, "SI"),
							   FR = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID, "NOCOMBO", 0, "SI"),
							   //IMC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_im_ID, "NOCOMBO", 0, "SI"),
							   Sat = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_SAT_O2_ID, "NOCOMBO", 0, "SI"),
							   PAD = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_PAD_ID, "NOCOMBO", 0, "SI")

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ServiceList> ReportAntropometria(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId

								 //join G in dbContext.professional on new { a = F.v_PersonId }
								 //                                     equals new { a = G.v_PersonId } into G_join
								 //from G in G_join.DefaultIfEmpty()

								 //join H in dbContext.person on F.v_PersonId equals H.v_PersonId

								 //join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

								 //join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


								 where A.v_ServiceId == pstrserviceId
								 select new ServiceList
								 {
									 v_PersonId = A.v_PersonId,
									 v_NamePacient = B.v_FirstName,
									 v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
									 DireccionPaciente = B.v_AdressLocation,
									 d_BirthDate = B.d_Birthdate,
									 d_ServiceDate = A.d_ServiceDate,
									 v_ServiceId = A.v_ServiceId,
									 v_DocNumber = B.v_DocNumber


								 }).ToList();

				var sql = (from a in objEntity.ToList()
						   select new ServiceList
						   {
							   IMC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_IMC_ID, "NOCOMBO", 0, "SI"),
							   Peso = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_PESO_ID, "NOCOMBO", 0, "SI"),
							   talla = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_TALLA_ID, "NOCOMBO", 0, "SI"),
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public string GetServiceComponentFielValue(string pstrServiceId, string pstrComponentId, string pstrFieldId, string Type, int pintParameter, string pstrConX)
		{
			try
			{
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
				string xx = "";
				if (Type == "NOCOMBO")
				{
					oServiceComponentFieldValuesList = oServiceBL.ValoresComponente(pstrServiceId, pstrComponentId);
					xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
				}
				else
				{
					oServiceComponentFieldValuesList = oServiceBL.ValoresExamenComponete(pstrServiceId, pstrComponentId, pintParameter);
					if (pstrConX == "SI")
					{
						xx = oServiceComponentFieldValuesList.Count() == 0 ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
					}
					else
					{
						xx = oServiceComponentFieldValuesList.Count() == 0 ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1Name;
					}

				}

				return xx;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public class Data
		{
			public string _Key { get; set; }
			public string StringData { get; set; }
		}

		public List<ServiceComponentFieldValuesList> GetValueOdontograma(string pstrServiceId, string pstrComponentId, string pstrpath)
		{
			try
			{
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList1 = new List<ServiceComponentFieldValuesList>();


				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma(pstrServiceId, pstrComponentId, pstrpath);
				//var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

				#region Comentado

				oServiceComponentFieldValuesList1 = ValoresComponenteOdontogramaValue1(pstrServiceId, pstrComponentId);

				List<Data> x = new List<Data>();
				Data y = new Data();

				x.Add(new Data() { _Key = "", StringData = "" });
				x.Add(new Data() { _Key = Constants.D11_1, StringData = "11" });
				x.Add(new Data() { _Key = Constants.D11_2, StringData = "11" });
				x.Add(new Data() { _Key = Constants.D11_3, StringData = "11" });
				x.Add(new Data() { _Key = Constants.D11_4, StringData = "11" });
				x.Add(new Data() { _Key = Constants.D11_5, StringData = "11" });

				x.Add(new Data() { _Key = Constants.D12_1, StringData = "12" });
				x.Add(new Data() { _Key = Constants.D12_2, StringData = "12" });
				x.Add(new Data() { _Key = Constants.D12_3, StringData = "12" });
				x.Add(new Data() { _Key = Constants.D12_4, StringData = "12" });
				x.Add(new Data() { _Key = Constants.D12_5, StringData = "12" });

				x.Add(new Data() { _Key = Constants.D13_1, StringData = "13" });
				x.Add(new Data() { _Key = Constants.D13_2, StringData = "13" });
				x.Add(new Data() { _Key = Constants.D13_3, StringData = "13" });
				x.Add(new Data() { _Key = Constants.D13_4, StringData = "13" });
				x.Add(new Data() { _Key = Constants.D13_5, StringData = "13" });

				x.Add(new Data() { _Key = Constants.D14_1, StringData = "14" });
				x.Add(new Data() { _Key = Constants.D14_2, StringData = "14" });
				x.Add(new Data() { _Key = Constants.D14_3, StringData = "14" });
				x.Add(new Data() { _Key = Constants.D14_4, StringData = "14" });
				x.Add(new Data() { _Key = Constants.D14_5, StringData = "14" });

				x.Add(new Data() { _Key = Constants.D15_1, StringData = "15" });
				x.Add(new Data() { _Key = Constants.D15_2, StringData = "15" });
				x.Add(new Data() { _Key = Constants.D15_3, StringData = "15" });
				x.Add(new Data() { _Key = Constants.D15_4, StringData = "15" });
				x.Add(new Data() { _Key = Constants.D15_5, StringData = "15" });

				x.Add(new Data() { _Key = Constants.D16_1, StringData = "16" });
				x.Add(new Data() { _Key = Constants.D16_2, StringData = "16" });
				x.Add(new Data() { _Key = Constants.D16_3, StringData = "16" });
				x.Add(new Data() { _Key = Constants.D16_4, StringData = "16" });
				x.Add(new Data() { _Key = Constants.D16_5, StringData = "16" });

				x.Add(new Data() { _Key = Constants.D17_1, StringData = "17" });
				x.Add(new Data() { _Key = Constants.D17_2, StringData = "17" });
				x.Add(new Data() { _Key = Constants.D17_3, StringData = "17" });
				x.Add(new Data() { _Key = Constants.D17_4, StringData = "17" });
				x.Add(new Data() { _Key = Constants.D17_5, StringData = "17" });

				x.Add(new Data() { _Key = Constants.D18_1, StringData = "18" });
				x.Add(new Data() { _Key = Constants.D18_2, StringData = "18" });
				x.Add(new Data() { _Key = Constants.D18_3, StringData = "18" });
				x.Add(new Data() { _Key = Constants.D18_4, StringData = "18" });
				x.Add(new Data() { _Key = Constants.D18_5, StringData = "18" });

				//--------------
				x.Add(new Data() { _Key = Constants.D21_1, StringData = "21" });
				x.Add(new Data() { _Key = Constants.D21_2, StringData = "21" });
				x.Add(new Data() { _Key = Constants.D21_3, StringData = "21" });
				x.Add(new Data() { _Key = Constants.D21_4, StringData = "21" });
				x.Add(new Data() { _Key = Constants.D21_5, StringData = "21" });

				x.Add(new Data() { _Key = Constants.D22_1, StringData = "22" });
				x.Add(new Data() { _Key = Constants.D22_2, StringData = "22" });
				x.Add(new Data() { _Key = Constants.D22_3, StringData = "22" });
				x.Add(new Data() { _Key = Constants.D22_4, StringData = "22" });
				x.Add(new Data() { _Key = Constants.D22_5, StringData = "22" });

				x.Add(new Data() { _Key = Constants.D23_1, StringData = "23" });
				x.Add(new Data() { _Key = Constants.D23_2, StringData = "23" });
				x.Add(new Data() { _Key = Constants.D23_3, StringData = "23" });
				x.Add(new Data() { _Key = Constants.D23_4, StringData = "23" });
				x.Add(new Data() { _Key = Constants.D23_5, StringData = "23" });

				x.Add(new Data() { _Key = Constants.D24_1, StringData = "24" });
				x.Add(new Data() { _Key = Constants.D24_2, StringData = "24" });
				x.Add(new Data() { _Key = Constants.D24_3, StringData = "24" });
				x.Add(new Data() { _Key = Constants.D24_4, StringData = "24" });
				x.Add(new Data() { _Key = Constants.D24_5, StringData = "24" });

				x.Add(new Data() { _Key = Constants.D25_1, StringData = "25" });
				x.Add(new Data() { _Key = Constants.D25_2, StringData = "25" });
				x.Add(new Data() { _Key = Constants.D25_3, StringData = "25" });
				x.Add(new Data() { _Key = Constants.D25_4, StringData = "25" });
				x.Add(new Data() { _Key = Constants.D25_5, StringData = "25" });

				x.Add(new Data() { _Key = Constants.D26_1, StringData = "26" });
				x.Add(new Data() { _Key = Constants.D26_2, StringData = "26" });
				x.Add(new Data() { _Key = Constants.D26_3, StringData = "26" });
				x.Add(new Data() { _Key = Constants.D26_4, StringData = "26" });
				x.Add(new Data() { _Key = Constants.D26_5, StringData = "26" });

				x.Add(new Data() { _Key = Constants.D27_1, StringData = "27" });
				x.Add(new Data() { _Key = Constants.D27_2, StringData = "27" });
				x.Add(new Data() { _Key = Constants.D27_3, StringData = "27" });
				x.Add(new Data() { _Key = Constants.D27_4, StringData = "27" });
				x.Add(new Data() { _Key = Constants.D27_5, StringData = "27" });

				x.Add(new Data() { _Key = Constants.D28_1, StringData = "28" });
				x.Add(new Data() { _Key = Constants.D28_2, StringData = "28" });
				x.Add(new Data() { _Key = Constants.D28_3, StringData = "28" });
				x.Add(new Data() { _Key = Constants.D28_4, StringData = "28" });
				x.Add(new Data() { _Key = Constants.D28_5, StringData = "28" });
				//------------------------
				x.Add(new Data() { _Key = Constants.D31_1, StringData = "31" });
				x.Add(new Data() { _Key = Constants.D31_2, StringData = "31" });
				x.Add(new Data() { _Key = Constants.D31_3, StringData = "31" });
				x.Add(new Data() { _Key = Constants.D31_4, StringData = "31" });
				x.Add(new Data() { _Key = Constants.D31_5, StringData = "31" });

				x.Add(new Data() { _Key = Constants.D32_1, StringData = "32" });
				x.Add(new Data() { _Key = Constants.D32_2, StringData = "32" });
				x.Add(new Data() { _Key = Constants.D32_3, StringData = "32" });
				x.Add(new Data() { _Key = Constants.D32_4, StringData = "32" });
				x.Add(new Data() { _Key = Constants.D32_5, StringData = "32" });

				x.Add(new Data() { _Key = Constants.D33_1, StringData = "33" });
				x.Add(new Data() { _Key = Constants.D33_2, StringData = "33" });
				x.Add(new Data() { _Key = Constants.D33_3, StringData = "33" });
				x.Add(new Data() { _Key = Constants.D33_4, StringData = "33" });
				x.Add(new Data() { _Key = Constants.D33_5, StringData = "33" });

				x.Add(new Data() { _Key = Constants.D34_1, StringData = "34" });
				x.Add(new Data() { _Key = Constants.D34_2, StringData = "34" });
				x.Add(new Data() { _Key = Constants.D34_3, StringData = "34" });
				x.Add(new Data() { _Key = Constants.D34_4, StringData = "34" });
				x.Add(new Data() { _Key = Constants.D34_5, StringData = "34" });

				x.Add(new Data() { _Key = Constants.D35_1, StringData = "35" });
				x.Add(new Data() { _Key = Constants.D35_2, StringData = "35" });
				x.Add(new Data() { _Key = Constants.D35_3, StringData = "35" });
				x.Add(new Data() { _Key = Constants.D35_4, StringData = "35" });
				x.Add(new Data() { _Key = Constants.D35_5, StringData = "35" });

				x.Add(new Data() { _Key = Constants.D36_1, StringData = "36" });
				x.Add(new Data() { _Key = Constants.D36_2, StringData = "36" });
				x.Add(new Data() { _Key = Constants.D36_3, StringData = "36" });
				x.Add(new Data() { _Key = Constants.D36_4, StringData = "36" });
				x.Add(new Data() { _Key = Constants.D36_5, StringData = "36" });

				x.Add(new Data() { _Key = Constants.D37_1, StringData = "37" });
				x.Add(new Data() { _Key = Constants.D37_2, StringData = "37" });
				x.Add(new Data() { _Key = Constants.D37_3, StringData = "37" });
				x.Add(new Data() { _Key = Constants.D37_4, StringData = "37" });
				x.Add(new Data() { _Key = Constants.D37_5, StringData = "37" });

				x.Add(new Data() { _Key = Constants.D38_1, StringData = "38" });
				x.Add(new Data() { _Key = Constants.D38_2, StringData = "38" });
				x.Add(new Data() { _Key = Constants.D38_3, StringData = "38" });
				x.Add(new Data() { _Key = Constants.D38_4, StringData = "38" });
				x.Add(new Data() { _Key = Constants.D38_5, StringData = "38" });
				//---------------------
				x.Add(new Data() { _Key = Constants.D41_1, StringData = "41" });
				x.Add(new Data() { _Key = Constants.D41_2, StringData = "41" });
				x.Add(new Data() { _Key = Constants.D41_3, StringData = "41" });
				x.Add(new Data() { _Key = Constants.D41_4, StringData = "41" });
				x.Add(new Data() { _Key = Constants.D41_5, StringData = "41" });

				x.Add(new Data() { _Key = Constants.D42_1, StringData = "42" });
				x.Add(new Data() { _Key = Constants.D42_2, StringData = "42" });
				x.Add(new Data() { _Key = Constants.D42_3, StringData = "42" });
				x.Add(new Data() { _Key = Constants.D42_4, StringData = "42" });
				x.Add(new Data() { _Key = Constants.D42_5, StringData = "42" });

				x.Add(new Data() { _Key = Constants.D43_1, StringData = "43" });
				x.Add(new Data() { _Key = Constants.D43_2, StringData = "43" });
				x.Add(new Data() { _Key = Constants.D43_3, StringData = "43" });
				x.Add(new Data() { _Key = Constants.D43_4, StringData = "43" });
				x.Add(new Data() { _Key = Constants.D43_5, StringData = "43" });

				x.Add(new Data() { _Key = Constants.D44_1, StringData = "44" });
				x.Add(new Data() { _Key = Constants.D44_2, StringData = "44" });
				x.Add(new Data() { _Key = Constants.D44_3, StringData = "44" });
				x.Add(new Data() { _Key = Constants.D44_4, StringData = "44" });
				x.Add(new Data() { _Key = Constants.D44_5, StringData = "44" });

				x.Add(new Data() { _Key = Constants.D45_1, StringData = "45" });
				x.Add(new Data() { _Key = Constants.D45_2, StringData = "45" });
				x.Add(new Data() { _Key = Constants.D45_3, StringData = "45" });
				x.Add(new Data() { _Key = Constants.D45_4, StringData = "45" });
				x.Add(new Data() { _Key = Constants.D45_5, StringData = "45" });

				x.Add(new Data() { _Key = Constants.D46_1, StringData = "46" });
				x.Add(new Data() { _Key = Constants.D46_2, StringData = "46" });
				x.Add(new Data() { _Key = Constants.D46_3, StringData = "46" });
				x.Add(new Data() { _Key = Constants.D46_4, StringData = "46" });
				x.Add(new Data() { _Key = Constants.D46_5, StringData = "46" });

				x.Add(new Data() { _Key = Constants.D47_1, StringData = "47" });
				x.Add(new Data() { _Key = Constants.D47_2, StringData = "47" });
				x.Add(new Data() { _Key = Constants.D47_3, StringData = "47" });
				x.Add(new Data() { _Key = Constants.D47_4, StringData = "47" });
				x.Add(new Data() { _Key = Constants.D47_5, StringData = "47" });

				x.Add(new Data() { _Key = Constants.D48_1, StringData = "48" });
				x.Add(new Data() { _Key = Constants.D48_2, StringData = "48" });
				x.Add(new Data() { _Key = Constants.D48_3, StringData = "48" });
				x.Add(new Data() { _Key = Constants.D48_4, StringData = "48" });
				x.Add(new Data() { _Key = Constants.D48_5, StringData = "48" });

				var rangodientes = x.ToList();
				foreach (var item in oServiceComponentFieldValuesList1)
				{

					var NroDiente = rangodientes.Find(p => p._Key == item.v_ComponentFieldId) == null ? "" : rangodientes.Find(p => p._Key == item.v_ComponentFieldId).StringData;//.f x[item.v_ComponentFieldId];
					var valorDiente = oServiceComponentFieldValuesList1.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == item.v_ComponentFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == item.v_ComponentFieldId)).v_Value1;
					#region SWITCH
					switch (NroDiente)
					{
						case "18":
							if (valorDiente == "3")
							{
								//ContadorD18 = 1;
								ListaDiente.Add(18);
							}
							break;
						case "17":
							if (valorDiente == "3")
							{
								ListaDiente.Add(17);
							}
							break;
						case "16":
							if (valorDiente == "3")
							{
								ListaDiente.Add(16);
							}
							break;
						case "15":
							if (valorDiente == "3")
							{
								ListaDiente.Add(15);
							}
							break;
						case "14":
							if (valorDiente == "3")
							{
								ListaDiente.Add(14);
							}
							break;
						case "13":
							if (valorDiente == "3")
							{
								ListaDiente.Add(13);
							}
							break;
						case "12":
							if (valorDiente == "3")
							{
								ListaDiente.Add(12);
							}
							break;
						case "11":
							if (valorDiente == "3")
							{
								ListaDiente.Add(11);
							}
							break;

						//--------------------------------------

						case "21":
							if (valorDiente == "3")
							{
								//ContadorD18 = 1;
								ListaDiente.Add(21);
							}
							break;
						case "22":
							if (valorDiente == "3")
							{
								ListaDiente.Add(22);
							}
							break;
						case "23":
							if (valorDiente == "3")
							{
								ListaDiente.Add(23);
							}
							break;
						case "24":
							if (valorDiente == "3")
							{
								ListaDiente.Add(24);
							}
							break;
						case "25":
							if (valorDiente == "3")
							{
								ListaDiente.Add(25);
							}
							break;
						case "26":
							if (valorDiente == "3")
							{
								ListaDiente.Add(26);
							}
							break;
						case "27":
							if (valorDiente == "3")
							{
								ListaDiente.Add(27);
							}
							break;
						case "28":
							if (valorDiente == "3")
							{
								ListaDiente.Add(28);
							}
							break;

						//------------------------------

						case "31":
							if (valorDiente == "3")
							{
								//ContadorD18 = 1;
								ListaDiente.Add(31);
							}
							break;
						case "32":
							if (valorDiente == "3")
							{
								ListaDiente.Add(32);
							}
							break;
						case "33":
							if (valorDiente == "3")
							{
								ListaDiente.Add(33);
							}
							break;
						case "34":
							if (valorDiente == "3")
							{
								ListaDiente.Add(34);
							}
							break;
						case "35":
							if (valorDiente == "3")
							{
								ListaDiente.Add(35);
							}
							break;
						case "36":
							if (valorDiente == "3")
							{
								ListaDiente.Add(36);
							}
							break;
						case "37":
							if (valorDiente == "3")
							{
								ListaDiente.Add(37);
							}
							break;
						case "38":
							if (valorDiente == "3")
							{
								ListaDiente.Add(38);
							}
							break;

						//------------------------------

						case "41":
							if (valorDiente == "3")
							{
								//ContadorD18 = 1;
								ListaDiente.Add(41);
							}
							break;
						case "42":
							if (valorDiente == "3")
							{
								ListaDiente.Add(42);
							}
							break;
						case "43":
							if (valorDiente == "3")
							{
								ListaDiente.Add(43);
							}
							break;
						case "44":
							if (valorDiente == "3")
							{
								ListaDiente.Add(44);
							}
							break;
						case "45":
							if (valorDiente == "3")
							{
								ListaDiente.Add(45);
							}
							break;
						case "46":
							if (valorDiente == "3")
							{
								ListaDiente.Add(46);
							}
							break;
						case "47":
							if (valorDiente == "3")
							{
								ListaDiente.Add(47);
							}
							break;
						case "48":
							if (valorDiente == "3")
							{
								ListaDiente.Add(48);
							}
							break;
						default:
							break;
					}
					#endregion

				}
				#endregion



				return oServiceComponentFieldValuesList;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ServiceComponentFieldValuesList> GetValueOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrPath)
		{
			try
			{
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontogramaAusente(pstrServiceId, pstrComponentId, pstrPath);
				//var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? String.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

				return oServiceComponentFieldValuesList;

			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ValorComponenteList> GetListValueComponent(string pstrServiceId, string pstrComponentId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			int isDeleted = (int)SiNo.NO;

			try
			{

				var PreQuery = (from A in dbContext.service
								join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
								join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
								join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
								join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
								join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
								join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
								where A.v_ServiceId == pstrServiceId
										&& B.i_IsDeleted == isDeleted
										&& C.i_IsDeleted == isDeleted
								select new ValorComponenteList
								{
									ServicioId = A.v_ServiceId,
									Valor = D.v_Value1,
									NombreComponente = H.v_Name,
									IdComponente = C.v_ComponentId,
									NombreCampo = G.v_TextLabel,
									IdCampo = C.v_ComponentFieldId
								}

						   ).ToList();

				//var value = (from A in dbContext.service
				//             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
				//             join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
				//             join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
				//             join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
				//             join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
				//             join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
				//             join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
				//             where A.v_ServiceId == pstrServiceId
				//                     && H.v_ComponentId == pstrComponentId
				//                     && B.i_IsDeleted == isDeleted
				//                     && C.i_IsDeleted == isDeleted
				//             select D.v_Value1).SingleOrDefault<string>();

				return PreQuery;
			}
			catch (Exception)
			{

				throw;
			}

		}


		public List<ReportOdontograma> ReportOdontograma(string pstrserviceId, string pstrComponentId, string Path)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

								 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 //**************************************************************************************


								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportOdontograma
								 {
									 IdServicio = A.v_ServiceId,
									 Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 Fecha = A.d_ServiceDate.Value,
									 Puesto = B.v_CurrentOccupation,
									 Ficha = E.v_ServiceComponentId,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = J.v_Name,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var ValorDiente = GetValueOdontograma(pstrserviceId, pstrComponentId, Path).ToList();
				var ValorDienteAusente = GetValueOdontogramaAusente(pstrserviceId, pstrComponentId, Path);
				var ValorCampos = GetListValueComponent(pstrserviceId, pstrComponentId);
				var Test = ValoresComponentesUserControl(pstrserviceId, pstrComponentId);
				var sql = (from a in objEntity.ToList()
						   select new ReportOdontograma
						   {
							   IdServicio = a.IdServicio,
							   Trabajador = a.Trabajador,
							   Fecha = a.Fecha,
							   Puesto = a.Puesto,
							   Ficha = a.Ficha,
							   FirmaMedico = a.FirmaMedico,
							   Empresa = a.Empresa,
							   Tabaco = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TABACO_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TABACO_ID).Valor,
							   Diabetes = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_DIABETES_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_DIABETES_ID).Valor,
							   Tbc = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TBC_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TBC_ID).Valor,
							   Ets = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_ETS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_ETS_ID).Valor,
							   Hematopatias = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_HEMATOPATIAS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_HEMATOPATIAS_ID).Valor,
							   Obesidad = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_OBESIDAD_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_OBESIDAD_ID).Valor,
							   Periodontitis = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_PERIODONTITIS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_PERIODONTITIS_ID).Valor,
							   Movilidad = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_MOVILIDAD_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_MOVILIDAD_ID).Valor,
							   Recesion = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_RECESION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_RECESION_ID).Valor,
							   Exudacion = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_EXUDACION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_EXUDACION_ID).Valor,
							   Gingivitis = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_GINGIVITIS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_GINGIVITIS_ID).Valor,
							   BolsaPeriodontales = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID).Valor,
							   //Diagnosticos = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
							   Diagnosticos = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.ODONTOGRAMA_ID),
							   PiezasCaries = GetCantidadCaries(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PIEZAS_CARIES_ID),
							   PiezasAusentes = GetCantidadAusentes(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PIEZAS_AUSENTES_ID),

							   ////PiezasCuracion = GetCantidad(a.IdServicio, pstrComponentId),
							   //Corona = GetCantidad(a.IdServicio, pstrComponentId)[0].ToString(),
							   //Exodoncia = GetCantidad(a.IdServicio, pstrComponentId)[1].ToString(),
							   //Implante = GetCantidad(a.IdServicio, pstrComponentId)[2].ToString(),
							   //Ppr = GetCantidad(a.IdServicio, pstrComponentId)[3].ToString(),
							   //ProtesisTotal = GetCantidad(a.IdServicio, pstrComponentId)[4].ToString(),

							   PlacaBacteriana = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PLACA_BACTERIANA_ID),
							   RemanentesReticulares = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_REMANENTES_RETICULARES_ID),
							   OtrosExamen = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_OTROS_EXAMEN_ID),
							   Aptitud = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_APTITUD_ID),


							   Diente181 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_1).v_Value1,
							   Diente182 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_2).v_Value1,
							   Diente183 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_3).v_Value1,
							   Diente184 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_4).v_Value1,
							   Diente185 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_5).v_Value1,
							   Diente186 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D18_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D18_6).v_Value1,

							   Diente171 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_1).v_Value1,
							   Diente172 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_2).v_Value1,
							   Diente173 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_3).v_Value1,
							   Diente174 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_4).v_Value1,
							   Diente175 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_5).v_Value1,
							   Diente176 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D17_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D17_6).v_Value1,


							   Diente161 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_1).v_Value1,
							   Diente162 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_2).v_Value1,
							   Diente163 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_3).v_Value1,
							   Diente164 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_4).v_Value1,
							   Diente165 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_5).v_Value1,
							   Diente166 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D16_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D16_6).v_Value1,


							   Diente151 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_1).v_Value1,
							   Diente152 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_2).v_Value1,
							   Diente153 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_3).v_Value1,
							   Diente154 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_4).v_Value1,
							   Diente155 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_5).v_Value1,
							   Diente156 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D15_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D15_6).v_Value1,


							   Diente141 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_1).v_Value1,
							   Diente142 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_2).v_Value1,
							   Diente143 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_3).v_Value1,
							   Diente144 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_4).v_Value1,
							   Diente145 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_5).v_Value1,
							   Diente146 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D14_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D14_6).v_Value1,


							   Diente131 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_1).v_Value1,
							   Diente132 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_2).v_Value1,
							   Diente133 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_3).v_Value1,
							   Diente134 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_4).v_Value1,
							   Diente135 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_5).v_Value1,
							   Diente136 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D13_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D13_6).v_Value1,


							   Diente121 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_1).v_Value1,
							   Diente122 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_2).v_Value1,
							   Diente123 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_3).v_Value1,
							   Diente124 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_4).v_Value1,
							   Diente125 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_5).v_Value1,
							   Diente126 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D12_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D12_6).v_Value1,


							   Diente111 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_1).v_Value1,
							   Diente112 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_2).v_Value1,
							   Diente113 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_3).v_Value1,
							   Diente114 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_4).v_Value1,
							   Diente115 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_5).v_Value1,
							   Diente116 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D11_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D11_6).v_Value1,


							   //-------------------------------------------------------------------------------

							   Diente211 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_1).v_Value1,
							   Diente212 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_2).v_Value1,
							   Diente213 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_3).v_Value1,
							   Diente214 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_4).v_Value1,
							   Diente215 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_5).v_Value1,
							   Diente216 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D21_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D21_6).v_Value1,


							   Diente221 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_1).v_Value1,
							   Diente222 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_2).v_Value1,
							   Diente223 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_3).v_Value1,
							   Diente224 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_4).v_Value1,
							   Diente225 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_5).v_Value1,
							   Diente226 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D22_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D22_6).v_Value1,


							   Diente231 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_1).v_Value1,
							   Diente232 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_2).v_Value1,
							   Diente233 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_3).v_Value1,
							   Diente234 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_4).v_Value1,
							   Diente235 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_5).v_Value1,
							   Diente236 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D23_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D23_6).v_Value1,


							   Diente241 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_1).v_Value1,
							   Diente242 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_2).v_Value1,
							   Diente243 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_3).v_Value1,
							   Diente244 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_4).v_Value1,
							   Diente245 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_5).v_Value1,
							   Diente246 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D24_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D24_6).v_Value1,


							   Diente251 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_1).v_Value1,
							   Diente252 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_2).v_Value1,
							   Diente253 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_3).v_Value1,
							   Diente254 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_4).v_Value1,
							   Diente255 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_5).v_Value1,
							   Diente256 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D25_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D25_6).v_Value1,


							   Diente261 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_1).v_Value1,
							   Diente262 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_2).v_Value1,
							   Diente263 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_3).v_Value1,
							   Diente264 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_4).v_Value1,
							   Diente265 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_5).v_Value1,
							   Diente266 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D26_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D26_6).v_Value1,


							   Diente271 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_1).v_Value1,
							   Diente272 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_2).v_Value1,
							   Diente273 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_3).v_Value1,
							   Diente274 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_4).v_Value1,
							   Diente275 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_5).v_Value1,
							   Diente276 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D27_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D27_6).v_Value1,


							   Diente281 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_1).v_Value1,
							   Diente282 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_2).v_Value1,
							   Diente283 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_3).v_Value1,
							   Diente284 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_4).v_Value1,
							   Diente285 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_5).v_Value1,
							   Diente286 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D28_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D28_6).v_Value1,


							   //-------------------------------------------------------------------------------

							   Diente311 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_1).v_Value1,
							   Diente312 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_2).v_Value1,
							   Diente313 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_3).v_Value1,
							   Diente314 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_4).v_Value1,
							   Diente315 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_5).v_Value1,
							   Diente316 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D31_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D31_6).v_Value1,


							   Diente321 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_1).v_Value1,
							   Diente322 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_2).v_Value1,
							   Diente323 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_3).v_Value1,
							   Diente324 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_4).v_Value1,
							   Diente325 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_5).v_Value1,
							   Diente326 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D32_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D32_6).v_Value1,


							   Diente331 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_1).v_Value1,
							   Diente332 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_2).v_Value1,
							   Diente333 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_3).v_Value1,
							   Diente334 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_4).v_Value1,
							   Diente335 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_5).v_Value1,
							   Diente336 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D33_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D33_6).v_Value1,


							   Diente341 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_1).v_Value1,
							   Diente342 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_2).v_Value1,
							   Diente343 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_3).v_Value1,
							   Diente344 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_4).v_Value1,
							   Diente345 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_5).v_Value1,
							   Diente346 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D34_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D34_6).v_Value1,


							   Diente351 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_1).v_Value1,
							   Diente352 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_2).v_Value1,
							   Diente353 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_3).v_Value1,
							   Diente354 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_4).v_Value1,
							   Diente355 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_5).v_Value1,
							   Diente356 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D35_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D35_6).v_Value1,


							   Diente361 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_1).v_Value1,
							   Diente362 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_2).v_Value1,
							   Diente363 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_3).v_Value1,
							   Diente364 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_4).v_Value1,
							   Diente365 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_5).v_Value1,
							   Diente366 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D36_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D36_6).v_Value1,


							   Diente371 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_1).v_Value1,
							   Diente372 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_2).v_Value1,
							   Diente373 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_3).v_Value1,
							   Diente374 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_4).v_Value1,
							   Diente375 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_5).v_Value1,
							   Diente376 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D37_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D37_6).v_Value1,


							   Diente381 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_1).v_Value1,
							   Diente382 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_2).v_Value1,
							   Diente383 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_3).v_Value1,
							   Diente384 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_4).v_Value1,
							   Diente385 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_5).v_Value1,
							   Diente386 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D38_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D38_6).v_Value1,

							   //-------------------------------------------------------------------------------

							   Diente411 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_1).v_Value1,
							   Diente412 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_2).v_Value1,
							   Diente413 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_3).v_Value1,
							   Diente414 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_4).v_Value1,
							   Diente415 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_5).v_Value1,
							   Diente416 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D41_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D41_6).v_Value1,


							   Diente421 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_1).v_Value1,
							   Diente422 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_2).v_Value1,
							   Diente423 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_3).v_Value1,
							   Diente424 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_4).v_Value1,
							   Diente425 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_5).v_Value1,
							   Diente426 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D42_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D42_6).v_Value1,


							   Diente431 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_1).v_Value1,
							   Diente432 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_2).v_Value1,
							   Diente433 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_3).v_Value1,
							   Diente434 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_4).v_Value1,
							   Diente435 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_5).v_Value1,
							   Diente436 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D43_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D43_6).v_Value1,


							   Diente441 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_1).v_Value1,
							   Diente442 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_2).v_Value1,
							   Diente443 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_3).v_Value1,
							   Diente444 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_4).v_Value1,
							   Diente445 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_5).v_Value1,
							   Diente446 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D44_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D44_6).v_Value1,


							   Diente451 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_1).v_Value1,
							   Diente452 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_2).v_Value1,
							   Diente453 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_3).v_Value1,
							   Diente454 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_4).v_Value1,
							   Diente455 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_5).v_Value1,
							   Diente456 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D45_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D45_6).v_Value1,

							   Diente461 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_1).v_Value1,
							   Diente462 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_2).v_Value1,
							   Diente463 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_3).v_Value1,
							   Diente464 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_4).v_Value1,
							   Diente465 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_5).v_Value1,
							   Diente466 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D46_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D46_6).v_Value1,


							   Diente471 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_1).v_Value1,
							   Diente472 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_2).v_Value1,
							   Diente473 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_3).v_Value1,
							   Diente474 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_4).v_Value1,
							   Diente475 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_5).v_Value1,
							   Diente476 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D47_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D47_6).v_Value1,


							   Diente481 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_1).v_Value1,
							   Diente482 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_2).v_Value1,
							   Diente483 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_3).v_Value1,
							   Diente484 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_4).v_Value1,
							   Diente485 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5).v_Value1,
							   Diente486 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D48_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D48_6).v_Value1,


							   PiezasCuracion = NroDientesCurados(ListaDiente),

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   Recomendaciones = GetRecommendationByServiceIdAndComponent(pstrserviceId, pstrComponentId),
							   Otros = Test.Count() == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.Otros) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.Otros).v_Value1,
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		private int NroDientesCurados(List<int> ListaD)
		{

			var x = ListaD.Distinct();

			return x.Count();
		}

		public string GetValueOdontograma(string pstrServiceId, string pstrComponentId, string pstrFieldId, string pstrpath, string NroDiente)
		{
			try
			{
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList1 = new List<ServiceComponentFieldValuesList>();
				oServiceComponentFieldValuesList1 = ValoresComponenteOdontogramaValue1(pstrServiceId, pstrComponentId);
				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma(pstrServiceId, pstrComponentId, pstrpath);
				var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
				var valorDiente = oServiceComponentFieldValuesList1.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;


				switch (NroDiente)
				{
					case "18":
						if (valorDiente == "3")
						{
							//ContadorD18 = 1;
							ListaDiente.Add(18);
						}
						break;
					case "17":
						if (valorDiente == "3")
						{
							ListaDiente.Add(17);
						}
						break;
					case "16":
						if (valorDiente == "3")
						{
							ListaDiente.Add(16);
						}
						break;
					case "15":
						if (valorDiente == "3")
						{
							ListaDiente.Add(15);
						}
						break;
					case "14":
						if (valorDiente == "3")
						{
							ListaDiente.Add(14);
						}
						break;
					case "13":
						if (valorDiente == "3")
						{
							ListaDiente.Add(13);
						}
						break;
					case "12":
						if (valorDiente == "3")
						{
							ListaDiente.Add(12);
						}
						break;
					case "11":
						if (valorDiente == "3")
						{
							ListaDiente.Add(11);
						}
						break;

					//--------------------------------------

					case "21":
						if (valorDiente == "3")
						{
							//ContadorD18 = 1;
							ListaDiente.Add(21);
						}
						break;
					case "22":
						if (valorDiente == "3")
						{
							ListaDiente.Add(22);
						}
						break;
					case "23":
						if (valorDiente == "3")
						{
							ListaDiente.Add(23);
						}
						break;
					case "24":
						if (valorDiente == "3")
						{
							ListaDiente.Add(24);
						}
						break;
					case "25":
						if (valorDiente == "3")
						{
							ListaDiente.Add(25);
						}
						break;
					case "26":
						if (valorDiente == "3")
						{
							ListaDiente.Add(26);
						}
						break;
					case "27":
						if (valorDiente == "3")
						{
							ListaDiente.Add(27);
						}
						break;
					case "28":
						if (valorDiente == "3")
						{
							ListaDiente.Add(28);
						}
						break;

					//------------------------------

					case "31":
						if (valorDiente == "3")
						{
							//ContadorD18 = 1;
							ListaDiente.Add(31);
						}
						break;
					case "32":
						if (valorDiente == "3")
						{
							ListaDiente.Add(32);
						}
						break;
					case "33":
						if (valorDiente == "3")
						{
							ListaDiente.Add(33);
						}
						break;
					case "34":
						if (valorDiente == "3")
						{
							ListaDiente.Add(34);
						}
						break;
					case "35":
						if (valorDiente == "3")
						{
							ListaDiente.Add(35);
						}
						break;
					case "36":
						if (valorDiente == "3")
						{
							ListaDiente.Add(36);
						}
						break;
					case "37":
						if (valorDiente == "3")
						{
							ListaDiente.Add(37);
						}
						break;
					case "38":
						if (valorDiente == "3")
						{
							ListaDiente.Add(38);
						}
						break;

					//------------------------------

					case "41":
						if (valorDiente == "3")
						{
							//ContadorD18 = 1;
							ListaDiente.Add(41);
						}
						break;
					case "42":
						if (valorDiente == "3")
						{
							ListaDiente.Add(42);
						}
						break;
					case "43":
						if (valorDiente == "3")
						{
							ListaDiente.Add(43);
						}
						break;
					case "44":
						if (valorDiente == "3")
						{
							ListaDiente.Add(44);
						}
						break;
					case "45":
						if (valorDiente == "3")
						{
							ListaDiente.Add(45);
						}
						break;
					case "46":
						if (valorDiente == "3")
						{
							ListaDiente.Add(46);
						}
						break;
					case "47":
						if (valorDiente == "3")
						{
							ListaDiente.Add(47);
						}
						break;
					case "48":
						if (valorDiente == "3")
						{
							ListaDiente.Add(48);
						}
						break;
					default:
						break;
				}

				return xx;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ServiceComponentFieldValuesList> ValoresComponenteOdontogramaValue1(string pstrServiceId, string pstrComponentId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			try
			{
				List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
																					 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
																					 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
																					 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

																					 where (A.v_ServiceId == pstrServiceId)
																						   && (B.v_ComponentId == pstrComponentId)
																						   && (B.i_IsDeleted == 0)
																						   && (C.i_IsDeleted == 0)

																					 select new ServiceComponentFieldValuesList
																					 {
																						 //v_ComponentId = B.v_ComponentId,
																						 v_ComponentFieldId = C.v_ComponentFieldId,
																						 //v_ComponentFieldId = G.v_ComponentFieldId,
																						 //v_ComponentFielName = G.v_TextLabel,
																						 v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
																						 v_Value1 = D.v_Value1
																					 }).ToList();


				return serviceComponentFieldValues;
			}
			catch (Exception)
			{

				throw;
			}

		}


		public string GetValueOdontograma1(string pstrServiceId, string pstrComponentId, string pstrFieldId)
		{
			try
			{
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
				var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

				return xx;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public string GetCantidadCaries(string pstrServiceId, string pstrComponentId, string pstrFieldId)
		{
			try
			{
				string Retornar = "0";
				string[] componentId = null;
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var result = (from A in dbContext.servicecomponent where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.i_IsRequiredId == 1 select A).ToList();
                if (result.Count == 0) return "NO APLICA";
				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
				var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
             
				componentId = xx.Split(';');
				if (componentId[0] == "")
				{
					Retornar = "0";
				}
				else
				{
					Retornar = componentId.Count().ToString();
				}
				return Retornar;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public int[] GetCantidad(string pstrServiceId, string pstrComponentId)
		{
			try
			{
				int ContadorCorona = 0;
				int ContadorExodoncia = 0;
				int ContadorImplante = 0;
				int ContadorPPR = 0;
				int ContadorProtesisTotal = 0;

				int[] xxx = new int[5];

				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);

				for (int i = 0; i < oServiceComponentFieldValuesList.Count(); i++)
				{

					#region Region 1

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D11_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D12_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D13_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D14_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D15_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D16_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D17_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D18_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					#endregion

					#region Region 2

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D21_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D22_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D23_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D24_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D25_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D26_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D27_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D28_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					#endregion

					#region Region 3

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D31_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D32_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D33_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D34_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D35_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D36_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D37_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D38_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					#endregion

					#region Region 4

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D41_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D42_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D43_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D44_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D45_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D46_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D47_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D48_6)
					{
						if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
						{
							ContadorCorona = ContadorCorona + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
						{
							ContadorExodoncia = ContadorExodoncia + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
						{
							ContadorImplante = ContadorImplante + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
						{
							ContadorPPR = ContadorPPR + 1;
						}
						else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
						{
							ContadorProtesisTotal = ContadorProtesisTotal + 1;
						}
					}

					#endregion
				}

				xxx[0] = ContadorCorona;
				xxx[1] = ContadorExodoncia;
				xxx[2] = ContadorImplante;
				xxx[3] = ContadorPPR;
				xxx[4] = ContadorProtesisTotal;


				return xxx;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public string GetCantidadAusentes(string pstrServiceId, string pstrComponentId, string pstrFieldId)
		{
			try
			{
				string retornar = "0";
				string[] componentId = null;
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                //Verificar si el componente está en el servicio
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var result = (from A in dbContext.servicecomponent where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.i_IsRequiredId == 1 select A).ToList();
                if (result.Count == 0) return "NO APLICA";

				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
				var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
         
				componentId = xx.Split(';');

				if (componentId[0] == "")
				{
					retornar = "0";
				}
				else
				{
					retornar = componentId.Count().ToString();
				}
				return retornar;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ServiceComponentFieldValuesList> ValoresComponenteOdontograma1(string pstrServiceId, string pstrComponentId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			try
			{
				List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
																					 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
																					 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
																					 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

																					 where (A.v_ServiceId == pstrServiceId)
																						   && (B.v_ComponentId == pstrComponentId)
																						   && (B.i_IsDeleted == 0)
																						   && (C.i_IsDeleted == 0)

																					 select new ServiceComponentFieldValuesList
																					 {
																						 //v_ComponentId = B.v_ComponentId,
																						 v_ComponentFieldId = C.v_ComponentFieldId,
																						 //v_ComponentFieldId = G.v_ComponentFieldId,
																						 //v_ComponentFielName = G.v_TextLabel,
																						 v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
																						 v_Value1 = D.v_Value1
																					 }).ToList();


				return serviceComponentFieldValues;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ServiceComponentFieldValuesList> ValoresComponenteOdontograma(string pstrServiceId, string pstrComponentId, string pstrPath)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			try
			{
				List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
																					 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
																					 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
																					 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

																					 where (A.v_ServiceId == pstrServiceId)
																						   && (B.v_ComponentId == pstrComponentId)
																						   && (B.i_IsDeleted == 0)
																						   && (C.i_IsDeleted == 0)
																					 let range = (
																									 D.v_Value1 == "2" ? pstrPath + "\\Resources\\caries.png" :
																									  D.v_Value1 == "3" ? pstrPath + "\\Resources\\curacion.png" :
																									  string.Empty
																						  )
																					 select new ServiceComponentFieldValuesList
																					 {
																						 //v_ComponentId = B.v_ComponentId,
																						 v_ComponentFieldId = C.v_ComponentFieldId,
																						 //v_ComponentFieldId = G.v_ComponentFieldId,
																						 //v_ComponentFielName = G.v_TextLabel,
																						 v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
																						 v_Value1 = range,
																						 v_Value2 = D.v_Value1
																					 }).ToList();


				return serviceComponentFieldValues;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ReportHistoriaOcupacionalList> ReportHistoriaOcupacional(string pstrserviceId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var groupUbigeo = 113;
				var isDeleted = 0;
				var exFisicoId = Constants.EXAMEN_FISICO_ID;
				var exFisico7C = Constants.EXAMEN_FISICO_7C_ID;

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join D in dbContext.history on B.v_PersonId equals D.v_PersonId into D_join
								 from D in D_join.DefaultIfEmpty()

                                 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

                                 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
                                 from D1 in D1_join.DefaultIfEmpty()

								 join sc in dbContext.servicecomponent on new { a = pstrserviceId, b = exFisicoId }
																	  equals new { a = sc.v_ServiceId, b = sc.v_ComponentId } into sc_join
								 from sc in sc_join.DefaultIfEmpty()

								 join E in dbContext.systemuser on sc.i_ApprovedUpdateUserId equals E.i_SystemUserId into E_join
								 from E in E_join.DefaultIfEmpty()

								 join F in dbContext.professional on E.v_PersonId equals F.v_PersonId into F_join
								 from F in F_join.DefaultIfEmpty()

								 // Examen fisico 7C *******************************************************************
								 join sc1 in dbContext.servicecomponent on new { a = pstrserviceId, b = exFisico7C }
																	equals new { a = sc1.v_ServiceId, b = sc1.v_ComponentId } into sc1_join
								 from sc1 in sc1_join.DefaultIfEmpty()

								 join su7c in dbContext.systemuser on sc1.i_ApprovedUpdateUserId equals su7c.i_SystemUserId into su7c_join
								 from su7c in su7c_join.DefaultIfEmpty()

								 join p7c in dbContext.professional on su7c.v_PersonId equals p7c.v_PersonId into p7c_join
								 from p7c in p7c_join.DefaultIfEmpty()

								 //******************************************************************************

								 // Ubigeo de la persona *******************************************************
								 join dep in dbContext.datahierarchy on new { a = B.i_DepartmentId.Value, b = groupUbigeo }
													  equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
								 from dep in dep_join.DefaultIfEmpty()

								 join prov in dbContext.datahierarchy on new { a = B.i_ProvinceId.Value, b = groupUbigeo }
													   equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
								 from prov in prov_join.DefaultIfEmpty()

								 join distri in dbContext.datahierarchy on new { a = B.i_DistrictId.Value, b = groupUbigeo }
													   equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
								 from distri in distri_join.DefaultIfEmpty()
								 //*********************************************************************************************

                                 join su in dbContext.systemuser on A.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                                 from su in su_join.DefaultIfEmpty()

                                 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                                 from pr in pr_join.DefaultIfEmpty()

								 let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
								 let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
								 let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1
								 let del = D.i_IsDeleted == null ? 0 : D.i_IsDeleted

								 where (A.v_ServiceId == pstrserviceId) && (del == isDeleted)
								 select new ReportHistoriaOcupacionalList
								 {
									 IdHistory = D.v_HistoryId,
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 IdServicio = A.v_ServiceId,
									 FNacimiento = B.d_Birthdate,
									 Genero = B.i_SexTypeId.Value,
                                     LugarNacimiento = B.v_AdressLocation,
									 LugarProcedencia = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima
                                     Puesto = B.v_CurrentOccupation,
									 FechaInicio = D.d_StartDate,
									 FechaFin = D.d_EndDate,
									 Empresa = D.v_Organization,
                                     ActividadEmpresa = D.v_ActividadEmpresa,
									 Altitud = D.i_GeografixcaHeight.Value,
									 AreaTrabajo = D.v_TypeActivity,
									 PuestoTrabajo = D.v_workstation,
									 IdTipoOperacion = D.i_TypeOperationId.Value,
									 Dia = A.d_ServiceDate.Value.Day,
									 Mes = A.d_ServiceDate.Value.Month,
									 Anio = A.d_ServiceDate.Value.Year,
									 FirmaMedico = F.b_SignatureImage == null ? p7c.b_SignatureImage : F.b_SignatureImage,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
                                     FirmaAuditor = pr.b_SignatureImage,
                                     b_Logo_Cliente = D1.b_Image
                                 }).ToList();

                var TiempoTotalLaboral = CalcularTotalTiempoLaboral(objEntity);
				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let date1 = a.FechaInicio == null ? "" : a.FechaInicio.Value.ToString("MMMM / yyyy")
						   let date2 = a.FechaFin == null ? "" : a.FechaFin.Value.ToString("MMMM / yyyy")
						   let xxx = GetYearsAndMonth(a.FechaFin, a.FechaInicio)
                           
						   select new ReportHistoriaOcupacionalList
						   {
							   IdHistory = a.IdHistory,
							   Trabajador = a.Trabajador,
							   IdServicio = a.IdServicio,
							   FechaNacimiento = a.FNacimiento == null ? "" : a.FNacimiento.Value.ToString("dd/MM/yyyy"),
							   Genero = a.Genero,
							   LugarNacimiento = a.LugarNacimiento,
							   LugarProcedencia = a.LugarProcedencia,
							   Puesto = a.Puesto,
							   FechaInicio = a.FechaInicio,
							   FechaFin = a.FechaFin,
							   Fechas = "Fecha Ini. \n" + date1 + "\n" + "Fecha Fin. \n" + date2,
							   Empresa = a.Empresa,
							   Altitud = a.Altitud,
							   AreaTrabajo = a.AreaTrabajo,
							   PuestoTrabajo = a.PuestoTrabajo,
							   IdTipoOperacion = a.IdTipoOperacion,
                               ActividadEmpresa = a.ActividadEmpresa,
							   TiempoLabor = xxx,
							   Dia = a.Dia,
							   Mes = a.Mes,
							   Anio = a.Anio,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Peligros = ConcatenateExposiciones(a.IdHistory),
							   Epp = ConcatenateEpps(a.IdHistory),
							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                               FirmaAuditor = a.FirmaAuditor,
                               b_Logo_Cliente = a.b_Logo_Cliente,
                               TiempoTotalLaboral = TiempoTotalLaboral
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

        private string CalcularTotalTiempoLaboral(List<ReportHistoriaOcupacionalList> objEntity)
        {
            int monthDiff = 0;
            if (objEntity[0].FechaInicio == null) return "0 año, 0 meses";
          
            foreach (var item in objEntity)
            {
                DateTime startDate = item.FechaInicio.Value;
                DateTime endDate = item.FechaFin.Value;
                monthDiff += ((endDate.Year * 12) + endDate.Month) - ((startDate.Year * 12) + startDate.Month);
            }

            int years = (int)Math.Floor((decimal)(monthDiff / 12));
            int months = monthDiff % 12;

            if (years == 0)
            {
                return string.Format("{0} mes ", months);
            }
            else if (months == 0)
            {
                return string.Format("{0} año ", years);
            }
            else
            {
                return string.Format("{0} año, {1} mes ", years, months);
            }
        }

		public string GetYearsAndMonth(DateTime? EndDate, DateTime? StartDate)
		{
			if (EndDate == null || StartDate == null)
			{
				return "0 años y 0 meses";
			}

			var Clase = Sigesoft.Common.Utils.YearMonthDiff(StartDate.Value, EndDate.Value);

			var totalYears = Clase.Years;
			var totalMonths = Clase.Months;

			if (totalYears == 0)
			{
                return string.Format("{0} mes ", totalMonths);
			}
			else if (totalMonths == 0)
			{
				return string.Format("{0} año ", totalYears);
			}
			else
			{
                return string.Format("{0} año, {1} mes ", totalYears, totalMonths);
			}


            
		}

		private string ConcatenateExposiciones(string pstrHistoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.workstationdangers
					   join B1 in dbContext.systemparameter on new { a = a.i_DangerId.Value, b = 145 } equals new { a = B1.i_ParameterId, b = B1.i_GroupId }
					   where a.v_HistoryId == pstrHistoryId &&
					   a.i_IsDeleted == 0
					   select new
					   {
						   v_Exposicion = B1.v_Value1
					   }).ToList();

			return string.Join(", ", qry.Select(p => p.v_Exposicion));
		}

		private string ConcatenateEpps(string pstrHistoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var qry = (from a in dbContext.typeofeep
					   join C1 in dbContext.systemparameter on new { a = a.i_TypeofEEPId.Value, b = 146 } equals new { a = C1.i_ParameterId, b = C1.i_GroupId }
					   where a.v_HistoryId == pstrHistoryId &&
					   a.i_IsDeleted == 0
					   select new
					   {
						   v_Epps = C1.v_Value1,
                           Procentaje =  a.r_Percentage.Value
					   }).ToList();
            return string.Join(", ", qry.Select(p => p.v_Epps + " (" + p.Procentaje.ToString() + "%)"));
		}

		public string GetValueOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrFieldId, string pstrPath)
		{
			try
			{
				ServiceBL oServiceBL = new ServiceBL();
				List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

				oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontogramaAusente(pstrServiceId, pstrComponentId, pstrPath);
				var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? String.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

				return xx;

			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ServiceComponentFieldValuesList> ValoresComponenteOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrPath)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


			try
			{
				List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
																					 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
																					 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
																					 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

																					 where (A.v_ServiceId == pstrServiceId)
																						   && (B.v_ComponentId == pstrComponentId)
																						   && (B.i_IsDeleted == 0)
																						   && (C.i_IsDeleted == 0)
                                                                                     let range = (D.v_Value1 == "1" ? pstrPath + "\\Resources\\R_dienteausente.png" : D.v_Value1 == "7" ? pstrPath + "\\Resources\\R_ProtesisTotal.png" : D.v_Value1 == "10" ? pstrPath + "\\Resources\\R_RemanenteRedicular.png" : D.v_Value1 == "11" ? pstrPath + "\\Resources\\R_CoronaTemporal.png" : D.v_Value1 == "12" ? pstrPath + "\\Resources\\R_CoronaDefinitiva.png" : D.v_Value1 == "13" ? pstrPath + "\\Resources\\R_ProtesisFijaBueno.png" : D.v_Value1 == "14" ? pstrPath + "\\Resources\\R_ProtesisFijaMalo.png" : D.v_Value1 == "15" ? pstrPath + "\\Resources\\R_ProtesisRemovible.png" : string.Empty
																								 )
																					 select new ServiceComponentFieldValuesList
																					 {
																						 v_ComponentFieldId = C.v_ComponentFieldId,
																						 //v_ComponentFieldId = G.v_ComponentFieldId,
																						 //v_ComponentFielName = G.v_TextLabel,
																						 v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
																						 //v_Value1 =  D.v_Value1 == "1" ? pstrPath + "\\caries.png" ? D.v_Value1 == "2" ? pstrPath + "\\curacion.png" ?D.v_Value1 == "3" ? pstrPath + "\\ausent.png" : D.v_Value1, 
																						 //v_Value1 = D.v_Value1
																						 v_Value1 = range
																					 }).ToList();


				return serviceComponentFieldValues;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<ReportRadiologico> ReportRadiologico(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }
								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************                            

								 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

								 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId


								 where A.v_ServiceId == pstrserviceId

								 select new ReportRadiologico
								 {
									 v_ServiceId = A.v_ServiceId,
									 Paciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 ExamenSolicitado = "RADIOGRAFÍA DE TÓRAX (P-A)",
									 Empresa = J.v_Name,
									 Fecha = A.d_ServiceDate.Value,
									 FirmaTecnologo = ptec.b_SignatureImage,
									 FirmaMedicoEva = pme.b_SignatureImage,
									 d_BirthDate = B.d_Birthdate.Value,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   select new ReportRadiologico
						   {
							   v_ServiceId = a.v_ServiceId,
							   Paciente = a.Paciente,
							   ExamenSolicitado = a.ExamenSolicitado,
							   Empresa = a.Empresa,
							   Fecha = a.Fecha,
							   FirmaTecnologo = a.FirmaTecnologo,
							   FirmaMedicoEva = a.FirmaMedicoEva,
							   d_BirthDate = a.d_BirthDate,
							   Edad = GetAge(a.d_BirthDate.Value),

							   Vertices = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_VERTICES_ID, "NOCOMBO", 0, "SI"),
							   CamposPulmonares = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CAMPOS_PULMONARES_ID, "NOCOMBO", 0, "SI"),
							   SenosCosto = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_COSTO_ODIAFRAGMATICO_ID, "NOCOMBO", 0, "SI"),
							   SenosCardio = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SENOS_CARDIOFRENICOS_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   Mediastinos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_MEDIASTINOS_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   Silueta = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SILUETA_CARDIACA_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   Indice = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_INDICE_CARDIACO_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   PartesBlandas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PARTES_BLANDAS_OSEAS_ID, "NOCOMBO", 0, "SI"),
							   Conclusiones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   Hilos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_HILOS_ID, "NOCOMBO", 0, "SI"),
							   Hallazgos = GetDiagnosticByServiceIdAndComponent(a.v_ServiceId, pstrComponentId),
							   CodigoPlaca = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CODIGO_PLACA_ID, "NOCOMBO", 0, "SI"),

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ReportOsteoMuscular> ReportOsteoMuscular(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 //**********************************************************************************************

								 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
								 from I in I_join.DefaultIfEmpty()

								 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

								 join L in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
												 equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
								 from L in L_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId

								 select new ReportOsteoMuscular
								 {
									 IdServicio = A.v_ServiceId,
									 IdSericioComponente = E.v_ServiceComponentId,
									 Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 Puesto = B.v_CurrentOccupation,
									 Protocolo = I.v_Name,
									 Empresa = J.v_Name,
									 TipoExamen = L.v_Value1,
									 FirmaTrabajador = B.b_RubricImage,
									 FirmaMedico = pme.b_SignatureImage,
									 d_BirthDate = B.d_Birthdate.Value,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();


				var sql = (from a in objEntity.ToList()
						   let OsteoMuscular = new ServiceBL().ValoresComponente(pstrserviceId, pstrComponentId)
						   select new ReportOsteoMuscular
						   {
							   IdServicio = a.IdServicio,
							   IdSericioComponente = a.IdSericioComponente,
							   Paciente = a.Paciente,
							   Puesto = a.Puesto,
							   Protocolo = a.Protocolo,
							   Empresa = a.Empresa,
							   TipoExamen = a.TipoExamen,
							   FirmaTrabajador = a.FirmaTrabajador,
							   FirmaMedico = a.FirmaMedico,
							   d_BirthDate = a.d_BirthDate,
							   Edad = GetAge(a.d_BirthDate.Value),

							   MetodoCarga = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_METODO_CARGA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_METODO_CARGA).v_Value1Name,
							   AntecedentesSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PRESENTA_ANTECEDENTES) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PRESENTA_ANTECEDENTES).v_Value1,
							   AntecedentesDescripcion = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION).v_Value1,
							   PosturaSentado = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_SENTADO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_SENTADO).v_Value1,
							   PosturaPie = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_PIE) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_PIE).v_Value1,
							   PosturaForzadaSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_FORZADA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_FORZADA).v_Value1,
							   MovCargaManualSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTO_MANUAL_CARGA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTO_MANUAL_CARGA).v_Value1,
							   PesoCarga = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PESO_CARGA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PESO_CARGA).v_Value1,
							   MovRepetitivosSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTOS_REPETITIVOS) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTOS_REPETITIVOS).v_Value1,
							   UsuPantallaPVDSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_USUARIO_PANTALLA_PVD) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_USUARIO_PANTALLA_PVD).v_Value1,
							   HorasDia = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HORAS_DIA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HORAS_DIA).v_Value1,
							   LordisisCervical = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA__) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA__).v_Value1Name,
							   CifosisDorsal = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA_DESCRIPCION_) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.POSTURA_FORZADA_DESCRIPCION_).v_Value1Name,
							   LordosisLumbar = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.POSTURA_SEDENTARIA__) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.POSTURA_SEDENTARIA__).v_Value1Name,
							   EscoliosisLumbar = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR).v_Value1Name,
							   EscofiosisDorsal = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL).v_Value1Name,
							   DolorEspalda = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.MOVIMIENTOS_REPETITIVOS__) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.MOVIMIENTOS_REPETITIVOS__).v_Value1Name,
							   ContracturaMuscular = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.SINTOMAS) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.SINTOMAS).v_Value1Name,
							   Observaciones = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_OBSERVACIONES) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_OBSERVACIONES).v_Value1,
							   RodillaDerechaVaroSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VARO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VARO).v_Value1,
							   RodillaDerechaValgoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VALGO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VALGO).v_Value1,
							   RodillaIzquierdaVaroSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VARO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VARO).v_Value1,
							   RodillaIzquierdaValgoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VALGO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VALGO).v_Value1,
							   PieDerechoCavoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_CAVO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_CAVO).v_Value1,
							   PieDerechoPlanoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_PLANO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_PLANO).v_Value1,
							   PieIzquierdoCavoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_CAVO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_CAVO).v_Value1,

							   PieIzquierdoPlanoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_PLANO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_PLANO).v_Value1,
							   ReflejoTotulianoDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.CERVICAL_LATERALIZACION_IZQUIERDA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.CERVICAL_LATERALIZACION_IZQUIERDA).v_Value1Name,
							   //ReflejoTotulianoIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_IZQUIERDO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_IZQUIERDO).v_Value1Name,
							   ReflejoAquileoDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PIE_CAVO_IZQUIERDO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PIE_CAVO_IZQUIERDO).v_Value1Name,
							   ReflejoAquileoIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PIE_PLANO_DERECHO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PIE_PLANO_DERECHO).v_Value1Name,
							   TestPhalenDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PHALEN_DERECHO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PHALEN_DERECHO).v_Value1,
							   TestPhalenIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PIE_CAVO_DERECHO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.PIE_CAVO_DERECHO).v_Value1,
							   TestTinelDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.TINEL_DERECHO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.TINEL_DERECHO).v_Value1,
							   TestTinelIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.TINEL_IZQUIERDO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.TINEL_IZQUIERDO).v_Value1,
							   SignoLasagueIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.FINKELSTEIN_DERECHO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.FINKELSTEIN_DERECHO).v_Value1,
							   SignoLasagueDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.LASEGUE_DERECHO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.LASEGUE_DERECHO).v_Value1,
							   SignoBragardIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.ADAM_IZQUIERDO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.ADAM_IZQUIERDO).v_Value1,
							   SignoBragardDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.FINKELSTEIN_IZQUIERDO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.FINKELSTEIN_IZQUIERDO).v_Value1,

							   TemporoMadibularNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR).v_Value1,
							   TemporoMadibularObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR_DESCRIPCION).v_Value1,
							   HombroNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO).v_Value1,
							   HombroObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO_DESCRIPCION).v_Value1,
							   CodoNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO).v_Value1,
							   CodoObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO_DESCRIPCION).v_Value1,
							   MunecaNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA).v_Value1,
							   MunecaObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA_DESCRIPCION).v_Value1,
							   InterfalangicaNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS).v_Value1,
							   InterfalangicaObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS_DESCRIPCION).v_Value1,
							   CoxoFermoralNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL).v_Value1,
							   CoxoFermoralObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL_DESCRIPCION).v_Value1,
							   RodillaNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA).v_Value1,
							   RodillaObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DESCRIPCION).v_Value1,
							   TobilloPieNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE).v_Value1,
							   TobilloPieObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE_DESCRIPCION).v_Value1,

							   ColumnaCervicalSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL).v_Value1,
							   ColumnaCervicalObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL_DESCRIPCION).v_Value1,
							   ColumnaDorsalSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL).v_Value1,
							   ColumnaDorsalObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL_DESCRIPCION).v_Value1,
							   DorsoLumbarSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR).v_Value1,
							   DorsoLumbarObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR_DESCRIPCION).v_Value1,
							   LumbroSacraSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA).v_Value1,
							   LumbroSacraObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA_DESCRIPCION).v_Value1,
							   CondralesSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES).v_Value1,
							   CondralesObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES_DESCRIPCION).v_Value1,
							   CostoEsternalesSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES).v_Value1,
							   CostoEsternalesObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES_DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES_DESCRIPCION).v_Value1,

							   Descripcion = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.DESCRIPCION) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.DESCRIPCION).v_Value1,
							   Aptitud = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_2_APTITUD_ID) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_2_APTITUD_ID).v_Value1Name,
							   Hallazgos = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.OSTEO_MUSCULAR_ID_1),
							   Recomendacion = GetRecommendationByServiceIdAndComponent(a.IdServicio, Constants.OSTEO_MUSCULAR_ID_1),
							   HuellaTrabajador = a.HuellaTrabajador,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public string GetDiagnosticByServiceId(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_DiseasesName = ddd.v_Name

						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_DiseasesName));
		}

		public List<DiagnosticRepositoryList> GetDiagnosticByServiceIdforGrid(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == 0
						 select new DiagnosticRepositoryList
						 {
							 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
							 v_DiseasesName = ddd.v_Name,
							 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic

						 }).ToList();

			var query1 = (from a in query
						  select new DiagnosticRepositoryList
						  {
							  v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							  v_DiseasesName = a.v_DiseasesName,
							  d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
							  v_RecomendationsName = GetRecommendationByServiceIdAndDiagnostic(pstrServiceId, a.v_DiagnosticRepositoryId)
						  }).ToList();

			var QueryFinal = query1.FindAll(p => p.d_ExpirationDateDiagnostic != null);

			return QueryFinal;
		}

		public string GetRestrictionByServiceId(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.restriction
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRestrictionId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_RestriccitionName = ddd.v_Name

						 }).ToList();


			return string.Join("/ ", query.Select(p => p.v_RestriccitionName));
		}


		private string GetRecommendationByServiceId(string pstrServiceId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.recommendation
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_Recommendation = ddd.v_Name

						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_Recommendation));
		}

		private string GetRecommendationByServiceIdAndDiagnostic(string pstrServiceId, string pstrDiagnosticRepositoryId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			if (pstrDiagnosticRepositoryId == null)
			{
				return "";
			}
			var query = (from ccc in dbContext.recommendation
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == 0 && ccc.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
						 select new
						 {
							 v_Recommendation = ddd.v_Name

						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_Recommendation));
		}

		public string GetListRecommendationByServiceIdConcatenado(string pstrServiceId)
		{
			int isDeleted = (int)SiNo.NO;

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.recommendation
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == isDeleted
						 select new RecomendationList
						 {
							 v_RecommendationName = ddd.v_Name
						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_RecommendationName));
		}

		private List<RecomendationList> GetListRecommendationByServiceId(string pstrServiceId)
		{
			int isDeleted = (int)SiNo.NO;

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.recommendation
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
							   ccc.i_IsDeleted == isDeleted
						 select new RecomendationList
						 {
							 v_RecommendationName = ddd.v_Name
						 }).ToList();


			return query;
		}

		public string GetListRecommendationByServiceIdAndComponent(string pstrServiceId, string pstrComponentId)
		{
			int isDeleted = (int)SiNo.NO;

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.recommendation
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId &&
								ccc.v_ComponentId == pstrComponentId &&
							   ccc.i_IsDeleted == isDeleted
						 select new RecomendationList
						 {
							 v_RecommendationName = ddd.v_Name
						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_RecommendationName));
		}

		public string GetDiagnosticByServiceIdAndComponent(string pstrServiceId, string pstrComponent)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
						 from ddd in ddd_join.DefaultIfEmpty()

						 join eee in dbContext.recommendation on new { a = pstrServiceId, b = pstrComponent }
																	equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
						 from eee in eee_join.DefaultIfEmpty()

						 join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
																equals fff.v_MasterRecommendationRestricctionId into fff_join
						 from fff in fff_join.DefaultIfEmpty()

						 where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_DiseasesName = ddd.v_Name
						 }).Distinct().ToList();


			return string.Join(", ", query.Select(p => p.v_DiseasesName));
		}

		public string GetDiagnosticByServiceIdAndCategoryId(string pstrServiceId, int pintCategoriaId)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join aaa in dbContext.component on ccc.v_ComponentId equals aaa.v_ComponentId
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
						 from ddd in ddd_join.DefaultIfEmpty()

						 join eee in dbContext.recommendation on new { a = pstrServiceId, b = ccc.v_ComponentId }
																	equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
						 from eee in eee_join.DefaultIfEmpty()

						 join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
																equals fff.v_MasterRecommendationRestricctionId into fff_join
						 from fff in fff_join.DefaultIfEmpty()

						 where ccc.v_ServiceId == pstrServiceId && aaa.i_CategoryId == pintCategoriaId &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_DiseasesName = ddd.v_Name
						 }).Distinct().ToList();


			return string.Join(", ", query.Select(p => p.v_DiseasesName));
		}


		public List<ServiceComponentFieldValuesList> ValoresComponenteAMC_(string pstrServiceId, int pintCategory)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			int rpta = 0;

			try
			{
				var serviceComponentFieldValues = (from A in dbContext.diagnosticrepository

												   join B in dbContext.component on A.v_ComponentId equals B.v_ComponentId

												   join C in dbContext.componentfield on A.v_ComponentFieldId equals C.v_ComponentFieldId

												   join E in dbContext.servicecomponent on A.v_ServiceId equals E.v_ServiceId

												   join F in dbContext.servicecomponentfields on new { a = E.v_ServiceComponentId, b = A.v_ComponentFieldId } 
												   equals new { a = F.v_ServiceComponentId, b = F.v_ComponentFieldId }

												   join G in dbContext.servicecomponentfieldvalues on F.v_ServiceComponentFieldsId 
												   equals G.v_ServiceComponentFieldsId

												   join D1 in dbContext.datahierarchy on new { a = C.i_MeasurementUnitId.Value, b = 105 }
													equals new { a = D1.i_ItemId, b = D1.i_GroupId } into D1_join
												   from D1 in D1_join.DefaultIfEmpty()

												   where A.v_ServiceId == pstrServiceId && B.i_CategoryId == pintCategory && A.v_ComponentFieldId != null

												   select new ServiceComponentFieldValuesList
												   {
													   v_ComponentFieldId = A.v_ComponentFieldId,
													   v_ComponentFielName = C.v_TextLabel,
													   v_Value1 = G.v_Value1,
													   v_UnidadMedida = D1.v_Value1
												   }).ToList();

			  var   objData = serviceComponentFieldValues.GroupBy(x => new { x.v_ComponentFieldId, x.v_ComponentFielName })
												 .Select(group => group.First())
												 .ToList();

				//return serviceComponentFieldValues.Select(x => x.v_ComponentFielName).Distinct();

			  return objData;
			}
			catch (Exception)
			{

				throw;
			}

		}


		public string GetDiagnosticForAudiometria(string pstrServiceId, string pstrComponent)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
						 from ddd in ddd_join.DefaultIfEmpty()

						 where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_DiseasesName = ddd.v_Name
						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_DiseasesName));
		}


		public string GetRecommendationByServiceIdAndComponent(string pstrServiceId, string pstrComponent)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.recommendation
						 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
						 where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
							   ccc.i_IsDeleted == 0
						 select new
						 {
							 v_Recommendation = ddd.v_Name

						 }).ToList();


			return string.Join(", ", query.Select(p => p.v_Recommendation));
		}

		// Alberto
		public List<ReportEsfuerzoFisico> GetReportPruebaEsfuerzo(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
								 join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
																	equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
								 from J1 in J1_join.DefaultIfEmpty()
								 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId
								 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId

								 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
									 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
								 from M in M_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************       


								 join X in dbContext.person on me.v_PersonId equals X.v_PersonId
								 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
								 from Y in Y_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new ReportEsfuerzoFisico
								 {
									 Ficha = E.v_ComponentId,
									 HistoriaClinica = A.v_ServiceId,
									 DatoPaciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Genero = M.v_Value1,
									 FirmaTecnologo = ptec.b_SignatureImage,
									 FirmaMedico = pme.b_SignatureImage,

									 NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
									 NombreTecnico = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,
									 NombreUsuarioGraba = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   select new ReportEsfuerzoFisico
						   {
							   Ficha = a.Ficha,
							   HistoriaClinica = a.HistoriaClinica,
							   DatoPaciente = a.DatoPaciente,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   Genero = a.Genero,
							   FirmaTecnologo = a.FirmaTecnologo,
							   FirmaMedico = a.FirmaMedico,

							   NombreDoctor = a.NombreDoctor,
							   NombreTecnico = a.NombreTecnico,


							   FumadorSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_FUMADOR_ID, "NOCOMBO", 0, "SI"),
							   DiabeticoSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DIABETICO_ID, "NOCOMBO", 0, "SI"),
							   InfartoSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_PRIOR_ID, "NOCOMBO", 0, "SI"),
							   FamiliarSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ANGINA_ID, "NOCOMBO", 0, "SI"),

							   PriorSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_INFARTO_ID, "NOCOMBO", 0, "SI"),
							   AnginaSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ANTECEDENTE_FAMILIAR_ID, "NOCOMBO", 0, "SI"),

							   PReposoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_INICIO_ID, "NOCOMBO", 0, "SI"),
							   PReposoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_DURACION_ID, "NOCOMBO", 0, "SI"),
							   PReposoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),
							   PReposoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_INCLINACION_ID, "NOCOMBO", 0, "SI"),
							   PReposoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_MTS_ID, "NOCOMBO", 0, "SI"),
							   PReposoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_FC_ID, "NOCOMBO", 0, "SI"),
							   PReposoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_PAS_ID, "NOCOMBO", 0, "SI"),
							   PReposoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),
							   PReposoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   PEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   PEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   SEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   SEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   TEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   TEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   CEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   CEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   PRecuperacionInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_INICIO_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_DURACION_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_MTS_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_FC_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_PAS_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionProtocolo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   PRecuperacionComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   SRecuperacionInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_INICIO_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_DURACION_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_MTS_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_FC_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_PAS_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   SRecuperacionComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


							   SReposoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_INICIO_ID, "NOCOMBO", 0, "SI"),

							   SReposoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_DURACION_ID, "NOCOMBO", 0, "SI"),

							   SReposoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   SReposoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

							   SReposoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_MTS_ID, "NOCOMBO", 0, "SI"),

							   SReposoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_FC_ID, "NOCOMBO", 0, "SI"),

							   SReposoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_PAS_ID, "NOCOMBO", 0, "SI"),

							   SReposoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

							   SReposoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),





							   //-----------------------------------------------------------------



							   TiempoEjercicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_TIEMPO_EJERCICIO_ID, "NOCOMBO", 0, "SI"),

							   CPV = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CPVS_ID, "NOCOMBO", 0, "SI"),

							   Derv = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DERIV_100_UVST_ID, "NOCOMBO", 0, "SI"),

							   Velocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

							   Pendiente = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_PENDIENTE_ID, "NOCOMBO", 0, "SI"),

							   METS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_METS_ID, "NOCOMBO", 0, "SI"),

							   FCardiaca = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_F_CARDIACA_ID, "NOCOMBO", 0, "SI"),

							   PSistolica = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_SISTOLICA_ID, "NOCOMBO", 0, "SI"),

							   PDiastolica = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DIASTOLICA_ID, "NOCOMBO", 0, "SI"),

							   FCxTA = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_FCXTA_ID, "NOCOMBO", 0, "SI"),

							   IndiceSTFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_INDICE_STFC_ID, "NOCOMBO", 0, "SI"),

							   Objetivo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_OBJETIVO_ID, "NOCOMBO", 0, "SI"),

							   ElevacionST = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ELEVACION_ST_ID, "NOCOMBO", 0, "SI"),

							   ElevacionSTEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ELEVACION_ST_EN_ID, "NOCOMBO", 0, "SI"),

							   ElevacionSTAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ELEVACION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

							   DepresionST = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DEPRESION_ST_ID, "NOCOMBO", 0, "SI"),

							   DepresionSTEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DEPRESION_ST_EN_ID, "NOCOMBO", 0, "SI"),

							   DepresionSTAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DEPRESION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

							   CambioElevacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_ELEVACION_ST_ID, "NOCOMBO", 0, "SI"),

							   CambioElevacionEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_ELEVACION_ST_EN_ID, "NOCOMBO", 0, "SI"),

							   CambioElevacionAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_ELEVACION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

							   CambioDepresion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_DEPRESION_ST_ID, "NOCOMBO", 0, "SI"),

							   CambioDepresionEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_DEPRESION_ST_EN_ID, "NOCOMBO", 0, "SI"),

							   CambioDepresionAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_DEPRESION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

							   Razones = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_RAZONES_FINALIZAR_ID, "NOCOMBO", 0, "SI"),

							   Conclusiones = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CONCLUSIONES_ID, "NOCOMBO", 0, "SI"),

							   Sintomas = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_SINTOMAS_ID, "NOCOMBO", 0, "SI"),



							   Dx = GetDiagnosticByServiceIdAndComponent(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID),

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportEstudioElectrocardiografico> GetReportEstudioElectrocardiografico(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
								 join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId
								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
																	equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
								 from J1 in J1_join.DefaultIfEmpty()
								 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId
								 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId

								 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
									 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
								 from M in M_join.DefaultIfEmpty()



								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************       

								 join X in dbContext.person on me.v_PersonId equals X.v_PersonId
								 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
								 from Y in Y_join.DefaultIfEmpty()

								 join F1 in dbContext.servicecomponentmultimedia on E.v_ServiceComponentId equals F1.v_ServiceComponentId into F1_join
								 from F1 in F1_join.DefaultIfEmpty()

								 join G1 in dbContext.multimediafile on F1.v_MultimediaFileId equals G1.v_MultimediaFileId into G1_join
								 from G1 in G1_join.DefaultIfEmpty()


								 where A.v_ServiceId == pstrserviceId
								 select new ReportEstudioElectrocardiografico
								 { //ron
									 NroFicha = E.v_ServiceComponentId,
                                     TipoESO = C.i_EsoTypeId.Value,
									 NroHistoria = A.v_ServiceId,
									 DatosPaciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Genero = M.v_Value1,
									 FirmaMedico = pme.b_SignatureImage,
									 FirmaTecnico = ptec.b_SignatureImage,
									 Fecha = A.d_ServiceDate.Value,
									 Empresa = D.v_Name,//vamos
									 Puesto = B.v_CurrentOccupation,
									 NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
									 NombreTecnologo = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,
									 NombreUsuarioGraba = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
									 b_Imagen = G1.b_File,
                                    HuellaPaciente = B.b_FingerPrintImage,
                                    FirmaPaciente = B.b_RubricImage
								 });

				var MedicalCenter = GetInfoMedicalCenter();
			    var Valores = ValoresComponente(pstrserviceId, pstrComponentId);
				var sql = (from a in objEntity.ToList()
                           
						   select new ReportEstudioElectrocardiografico
						   {
							   b_Imagen = a.b_Imagen,
							   NroFicha = a.NroFicha,
							   NroHistoria = a.NroHistoria,
							   DatosPaciente = a.DatosPaciente,
							   FechaNacimiento = a.FechaNacimiento,
							   Genero = a.Genero,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTecnico = a.FirmaTecnico,
							   Fecha = a.Fecha,
							   Empresa = a.Empresa,
                               TipoESO = a.TipoESO,
							   Puesto = a.Puesto,
							   Edad = GetAge(a.FechaNacimiento),
							   NombreDoctor = a.NombreDoctor,
							   NombreTecnologo = a.NombreTecnologo,
                               HuellaPaciente =a.HuellaPaciente,
                               FirmaPaciente =a.FirmaPaciente,
							   SoploSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SOPLO_CARDIACO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SOPLO_CARDIACO_ID).v_Value1,
							   CansancioSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CANSANCIO_RAPIDO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CANSANCIO_RAPIDO_ID).v_Value1,
							   MareosSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS_ID).v_Value1,
							   PresionAltaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PRESION_ALTA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PRESION_ALTA_ID).v_Value1,
							   DolorPrecordialSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL_ID).v_Value1,
							   PalpitacionesSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES_ID).v_Value1,
							   AtaquesCorazonSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ATAQUE_CORAZON_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ATAQUE_CORAZON_ID).v_Value1,
							   PerdidaConcienciaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PERDIDA_CONCIENCIA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PERDIDA_CONCIENCIA_ID).v_Value1,
							   ObesidadSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OBESIDAD_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OBESIDAD_ID).v_Value1,
							   TabaquismoSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TABAQUISMO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TABAQUISMO_ID).v_Value1,
							   DisplidemiaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISLIPIDEMIA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISLIPIDEMIA_ID).v_Value1,
							   DiabetesSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DIABETES_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DIABETES_ID).v_Value1,
							   SedentarismoSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEDENTARISMO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEDENTARISMO_ID).v_Value1,
							   Otros1 = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS1_ESPECIFICAR_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS1_ESPECIFICAR_ID).v_Value1,
							   DolorPrecordial2SiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL1_ID).v_Value1,
							   DesmayosSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESMAYOS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESMAYOS_ID).v_Value1,
							   Palpitaciones2SiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES2_ID).v_Value1,
							   DisneaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISNEA_PAROXISTICA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISNEA_PAROXISTICA_ID).v_Value1,
							   Otros2 = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS2_ID).v_Value1,
							   Mareos2SiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS1_ID).v_Value1,
							   VaricesSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_VARICES_PIERNAS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_VARICES_PIERNAS_ID).v_Value1,
							   ClaudicacSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CLAUDICAC_INTERMITENTE_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CLAUDICAC_INTERMITENTE_ID).v_Value1,
							   Ritmo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_RITMO_SINUAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_RITMO_SINUAL_ID).v_Value1,
							   IntervaloPR = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_PR_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_PR_ID).v_Value1,
							   IntervaloQRS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QRS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QRS_ID).v_Value1,
							   IntervaloQT = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QT_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QT_ID).v_Value1,
							   OndaPAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ANORMAL_ID).v_Value1,
							   OndaTAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ANORMAL_ID).v_Value1,
							   ComplejoQRSAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ANORMAL_ID).v_Value1,
							   SegementoSTAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ANORMAL_ID).v_Value1,
							   TrasntornoRitmo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_RITMO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_RITMO_ID).v_Value1,
							   TranstornoConduccion = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_CONDUCCION_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_CONDUCCION_ID).v_Value1,
							   Conclusiones = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).v_Value1,

                               //Segmento_ST = Valors.Count == 0 || Valors.Find(p => p.v_ComponentFieldId == Constants.APENDICE_ST) == null ? string.Empty : Valors.Find(p => p.v_ComponentFieldId == Constants.APENDICE_ST).v_Value1,
                               //OtrasAlteraciones = Valors.Count == 0 || Valors.Find(p => p.v_ComponentFieldId == Constants.APENDICE_OTRAS_ALTERACIONES) == null ? string.Empty : Valors.Find(p => p.v_ComponentFieldId == Constants.APENDICE_OTRAS_ALTERACIONES).v_Value1,

							   Hallazgos = GetDiagnosticByServiceIdAndComponent(a.NroHistoria, Constants.ELECTROCARDIOGRAMA_ID),
                               ConclusionesGold = GetDiagnosticByServiceIdAndComponent(a.NroHistoria, pstrComponentId),
							   Recomendaciones = GetRecommendationByServiceIdAndComponent(a.NroHistoria, Constants.ELECTROCARDIOGRAMA_ID),
							   OndaP = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ID).v_Value1Name,
							   SegmentoST = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ID).v_Value1Name,
							   ComplejoQRS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ID).v_Value1Name,
							   OndaT = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ID).v_Value1Name,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   //Hallazgos = GetDiagnosticByServiceId(a.IdServicio),
							   //Descripcion = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   //Recomendacion = GetRecommendationByServiceId(a.IdServicio),

                               FrecuenciaCardiaca = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003128") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003128").v_Value1,
                               RitmoCardiaco = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003129") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003129").v_Value1,

                               PrGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003121") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003121").v_Value1,
                               QrsGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003122") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003122").v_Value1,
                               QtcGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003123") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003123").v_Value1,
                               EjeCardicacoGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003124") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003124").v_Value1,
                               HallazgoGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003125") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003125").v_Value1,
                               ObservacionesGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003126") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003126").v_Value1,
                              
                               
                               CalculoIntervaloPr = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003130") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003130").v_Value1,
                                CalculoIntervaloQt = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003131") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003131").v_Value1,
                                EjeElectrico = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003132") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003132").v_Value1,
                                AlteracionesSegmentoSt = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003133") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003133").v_Value1,
							    OtrasAlteracionesElectro = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003134") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003134").v_Value1,
                                ConclusionesApendice05 = GetDiagnosticByServiceIdAndComponent(a.NroHistoria, Constants.APENDICE_ID)
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

        public List<ReportEstudioElectrocardiografico> GetReportElectroGold(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
                                 join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId
                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                                    equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()
                                 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId
                                 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId

                                 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()



                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************       

                                 join X in dbContext.person on me.v_PersonId equals X.v_PersonId
                                 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
                                 from Y in Y_join.DefaultIfEmpty()

                                 join F1 in dbContext.servicecomponentmultimedia on E.v_ServiceComponentId equals F1.v_ServiceComponentId into F1_join
                                 from F1 in F1_join.DefaultIfEmpty()

                                 join G1 in dbContext.multimediafile on F1.v_MultimediaFileId equals G1.v_MultimediaFileId into G1_join
                                 from G1 in G1_join.DefaultIfEmpty()


                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEstudioElectrocardiografico
                                 { //ron
                                     NroFicha = E.v_ServiceComponentId,
                                     TipoESO = C.i_EsoTypeId.Value,
                                     NroHistoria = A.v_ServiceId,
                                     DatosPaciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Genero = M.v_Value1,
                                     FirmaMedico = pme.b_SignatureImage,
                                     FirmaTecnico = ptec.b_SignatureImage,
                                     Fecha = A.d_ServiceDate.Value,
                                     Empresa = D.v_Name,//vamos
                                     Puesto = B.v_CurrentOccupation,
                                     NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
                                     NombreTecnologo = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,
                                     NombreUsuarioGraba = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
                                     b_Imagen = G1.b_File,
                                     HuellaPaciente = B.b_FingerPrintImage,
                                     FirmaPaciente = B.b_RubricImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var Valores = ValoresComponente(pstrserviceId, pstrComponentId);
                var sql = (from a in objEntity.ToList()

                           select new ReportEstudioElectrocardiografico
                           {
                               b_Imagen = a.b_Imagen,
                               NroFicha = a.NroFicha,
                               NroHistoria = a.NroHistoria,
                               DatosPaciente = a.DatosPaciente,
                               FechaNacimiento = a.FechaNacimiento,
                               Genero = a.Genero,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnico = a.FirmaTecnico,
                               Fecha = a.Fecha,
                               Empresa = a.Empresa,
                               TipoESO = a.TipoESO,
                               Puesto = a.Puesto,
                               Edad = GetAge(a.FechaNacimiento),
                               NombreDoctor = a.NombreDoctor,
                               NombreTecnologo = a.NombreTecnologo,
                               HuellaPaciente = a.HuellaPaciente,
                               FirmaPaciente = a.FirmaPaciente,

                               FrecuenciaCardiaca = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003119") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003119").v_Value1,
                               RitmoCardiaco = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003120") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003120").v_Value1,

                               PrGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003121") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003121").v_Value1,
                               QrsGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003122") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003122").v_Value1,
                               QtcGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003123") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003123").v_Value1,
                               EjeCardicacoGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003124") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003124").v_Value1,
                               HallazgoGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003125") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003125").v_Value1,
                               ObservacionesGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003126") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003126").v_Value1,
                               EkGNormalGold = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003127") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003127").v_Value1,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }
        
		public List<ReportInformeRadiografico> ReportInformeRadiografico(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
								 //from F in F_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()


								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************      

								 join me1 in dbContext.person on me.v_PersonId equals me1.v_PersonId


								 join G in dbContext.professional on new { a = me.v_PersonId }
																	  equals new { a = G.v_PersonId } into G_join
								 from G in G_join.DefaultIfEmpty()

								 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
								 from H in H_join.DefaultIfEmpty()

								 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
								 from I in I_join.DefaultIfEmpty()

								 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
								 from J in J_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportInformeRadiografico
								 {
									 Nombre = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate,
									 d_ServiceDate = A.d_ServiceDate,
									 v_ServiceId = A.v_ServiceId,
									 FirmaMedico = pme.b_SignatureImage,
									 v_ServiceComponentId = E.v_ServiceComponentId,
									 Lector = me1.v_FirstName + " " + me1.v_FirstLastName + " " + me1.v_SecondLastName,
									 Hcl = A.v_ServiceId,
									 FirmaTecnologo = ptec.b_SignatureImage,
									 DNI = B.v_DocNumber,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let Valores = new ServiceBL().ValoresComponente(pstrserviceId, Constants.OIT_ID)
						   select new ReportInformeRadiografico
						   {

							   LOCALIZACION_PERFIL = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.LOCALIZACION_PERFIL) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.LOCALIZACION_PERFIL).v_Value1,
							   LOCALIZACION_FRENTE = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.LOCALIZACION_FRENTE) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.LOCALIZACION_FRENTE).v_Value1,
							   CLACIFICACION_PERFIL = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.CLACIFICACION_PERFIL) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.CLACIFICACION_PERFIL).v_Value1,
							   CLACIFICACION_FRENTE = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.CLACIFICACION_FRENTE) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.CLACIFICACION_FRENTE).v_Value1,
							   EXTENSION_DER_ENGROSAMIENTO = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_DER_ENGROSAMIENTO) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_DER_ENGROSAMIENTO).v_Value1,
							   EXTENSION_IZQ_ENGROSAMIENTO = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_IZQ_ENGROSAMIENTO) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_IZQ_ENGROSAMIENTO).v_Value1,
							   ANCHURA_DER_ENGROSAMIENTO = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_DER_ENGROSAMIENTO) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_DER_ENGROSAMIENTO).v_Value1,
							   ANCHURA_IZQ_ENGROSAMIENTO = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_IZQ_ENGROSAMIENTO) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_IZQ_ENGROSAMIENTO).v_Value1,
							   DE_PERFIL = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.DE_PERFIL) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.DE_PERFIL).v_Value1,
							   DE_FRENTE = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.DE_FRENTE) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.DE_FRENTE).v_Value1,
							   DIAFRAGMA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.DIAFRAGMA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.DIAFRAGMA).v_Value1,
							   OTROS_SITIOS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.OTROS_SITIOS) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.OTROS_SITIOS).v_Value1,
							   DE_PERFIL_CLASF = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.DE_PERFIL_CLASF) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.DE_PERFIL_CLASF).v_Value1,
							   DE_FRENTE_CLASF = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.DE_FRENTE_CLASF) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.DE_FRENTE_CLASF).v_Value1,
							   DIAFRAGMA_CLASF = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.DIAFRAGMA_CLASF) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.DIAFRAGMA_CLASF).v_Value1,
							   OTROS_SITIOS_CLASF = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.OTROS_SITIOS_CLASF) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.OTROS_SITIOS_CLASF).v_Value1,
							   EXTENSION_DER_PLACA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_DER_PLACA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_DER_PLACA).v_Value1,
							   EXTENSION_IZQ_PLACA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_IZQ_PLACA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.EXTENSION_IZQ_PLACA).v_Value1,
							   ANCHURA_DER_PLACA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_DER_PLACA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_DER_PLACA).v_Value1,
							   ANCHURA_IZQ_PLACA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_IZQ_PLACA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ANCHURA_IZQ_PLACA).v_Value1,
							   OBLITANG_DER_PLACA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.OBLITANG_DER_PLACA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.OBLITANG_DER_PLACA).v_Value1,
							   OBLITANG_IZQ_PLACA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.OBLITANG_IZQ_PLACA) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.OBLITANG_IZQ_PLACA).v_Value1,

							   CAMPOS_PULMONARES = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.CAMPOS_PULMONARES) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.CAMPOS_PULMONARES).v_Value1,
							   HILOS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.HILOS) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.HILOS).v_Value1,
							   MEDIASTINOS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.MEDIASTINOS) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.MEDIASTINOS).v_Value1,
							   SENOS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.SENOS) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.SENOS).v_Value1,
							   SILUETA_CARDIOVASCULAR = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.SILUETA_CARDIOVASCULAR) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.SILUETA_CARDIOVASCULAR).v_Value1,
							   VERTICES = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.VERTICES) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.VERTICES).v_Value1,
                               ARTEFACTOS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003202") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003202").v_Value1,
                               BAJA_INSPRACION = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003199") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003199").v_Value1,
                               ESCAPULAS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003200") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003200").v_Value1,
                               NINGUNA = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003196") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003196").v_Value1,
                               OTROS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003203") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003203").v_Value1,
                               POSICION_CENTRADO = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003201") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003201").v_Value1,
                               SOBRE_EXPOSICION = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003197") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003197").v_Value1,
                               SUB_EXPOSICION = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003198") == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003198").v_Value1,

							   Nombre = a.Nombre,
							   DNI = a.DNI,
							   FechaNacimiento = a.FechaNacimiento,
							   d_ServiceDate = a.d_ServiceDate,
							   v_ServiceId = a.v_ServiceId,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTecnologo = a.FirmaTecnologo,
							   v_ServiceComponentId = a.v_ServiceComponentId,
							   Lector = a.Lector,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   Placa = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_NRO_PLACA_ID, "NOCOMBO", 0, "SI"),
							   CalidaRadio = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CALIDAD_ID, "NOCOMBO", 0, "SI"),
							   Causas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CAUSAS_ID, "NOCOMBO", 0, "SI"),
							   Comentario = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_COMENTARIOS_ID, "NOCOMBO", 0, "SI"),
							   Hcl = a.Hcl,
							   FechaLectura = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_FECHA_LECTURA_ID, "NOCOMBO", 0, "SI"),
							   FechaRadiografia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_FECHA_TOMA_ID, "NOCOMBO", 0, "SI"),

							   SuperiorDerecho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SUPERIOR_DERECHO_ID, "NOCOMBO", 0, "SI"),
							   SuperiorIzquierda = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SUPERIOR_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),
							   MedioDerecho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_MEDIO_DERECHO_ID, "NOCOMBO", 0, "SI"),
							   MedioIzquierda = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_MEDIO_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),
							   InferiorDerecho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_INFERIOR_DERECHO_ID, "NOCOMBO", 0, "SI"),
							   InferiorIzquierdo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_INFERIOR_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),

							   SimboloSi = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SIMBOLO_SI_ID, "NOCOMBO", 0, "SI"),
							   SimboloNo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SIMBOLO_NO_ID, "NOCOMBO", 0, "SI"),

							   CeroNada = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_0_NADA_ID, "NOCOMBO", 0, "SI"),
							   CeroCero = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_0_0_ID, "NOCOMBO", 0, "SI"),
							   CeroUno = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_0_1_ID, "NOCOMBO", 0, "SI"),

							   UnoCero = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_1_0_ID, "NOCOMBO", 0, "SI"),
							   UnoUno = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_1_1_ID, "NOCOMBO", 0, "SI"),
							   UnoDos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_1_2_ID, "NOCOMBO", 0, "SI"),

							   DosUno = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_2_1_ID, "NOCOMBO", 0, "SI"),
							   DosDos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_2_2_ID, "NOCOMBO", 0, "SI"),
							   DosTres = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_2_3_ID, "NOCOMBO", 0, "SI"),

							   TresDos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_3_2_ID, "NOCOMBO", 0, "SI"),
							   TresTres = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_3_3_ID, "NOCOMBO", 0, "SI"),
							   TresMas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_3_MAS_ID, "NOCOMBO", 0, "SI"),

							   p = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_P_ID, "NOCOMBO", 0, "SI"),
							   q = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_Q_ID, "NOCOMBO", 0, "SI"),
							   r = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_R_ID, "NOCOMBO", 0, "SI"),
							   s = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_S_ID, "NOCOMBO", 0, "SI"),
							   t = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_T_ID, "NOCOMBO", 0, "SI"),
							   u = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_U_ID, "NOCOMBO", 0, "SI"),
							   p1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_P1_ID, "NOCOMBO", 0, "SI"),
							   q1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_Q1_ID, "NOCOMBO", 0, "SI"),
							   r1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_R1_ID, "NOCOMBO", 0, "SI"),
							   s1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_S1_ID, "NOCOMBO", 0, "SI"),
							   t1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_T1_ID, "NOCOMBO", 0, "SI"),
							   u1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_U1_ID, "NOCOMBO", 0, "SI"),


							   O = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_D_ID, "NOCOMBO", 0, "SI"),
							   A = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_A_ID, "NOCOMBO", 0, "SI"),
							   B = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_B_ID, "NOCOMBO", 0, "SI"),
							   C = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_C_ID, "NOCOMBO", 0, "SI"),
							   //SimboloSiNo= GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SIM, "NOCOMBO", 0, "SI"), 
							   aa = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_AA_ID, "NOCOMBO", 0, "SI"),
							   at = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_AT_ID, "NOCOMBO", 0, "SI"),
							   ax = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_AX_ID, "NOCOMBO", 0, "SI"),
							   bu = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_BU_ID, "NOCOMBO", 0, "SI"),
							   ca = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CA_ID, "NOCOMBO", 0, "SI"),
							   cg = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CG_ID, "NOCOMBO", 0, "SI"),
							   cn = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CN_ID, "NOCOMBO", 0, "SI"),
							   co = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CO_ID, "NOCOMBO", 0, "SI"),
							   cp = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CP_ID, "NOCOMBO", 0, "SI"),
							   cv = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CV_ID, "NOCOMBO", 0, "SI"),



							   di = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_DI_ID, "NOCOMBO", 0, "SI"),
							   ef = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_EF_ID, "NOCOMBO", 0, "SI"),
							   em = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_EM_ID, "NOCOMBO", 0, "SI"),
							   es = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_ES_ID, "NOCOMBO", 0, "SI"),
							   fr = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_FR_ID, "NOCOMBO", 0, "SI"),
							   hi = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_HI_ID, "NOCOMBO", 0, "SI"),
							   ho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_HO_ID, "NOCOMBO", 0, "SI"),
							   id = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_ID_ID, "NOCOMBO", 0, "SI"),
							   ih = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_IH_ID, "NOCOMBO", 0, "SI"),
							   kl = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_KL_ID, "NOCOMBO", 0, "SI"),
							   me = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_ME_ID, "NOCOMBO", 0, "SI"),
							   od = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_OD_ID, "NOCOMBO", 0, "SI"),
							   pa = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PA_ID, "NOCOMBO", 0, "SI"),
							   pb = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PB_ID, "NOCOMBO", 0, "SI"),
							   pi = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PI_ID, "NOCOMBO", 0, "SI"),
							   px = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PX_ID, "NOCOMBO", 0, "SI"),
							   ra = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_RA_ID, "NOCOMBO", 0, "SI"),
							   rp = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_RP_ID, "NOCOMBO", 0, "SI"),
							   tb = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_TB_ID, "NOCOMBO", 0, "SI"),
							   Comentario_Od = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_COMENTARIO_OD_ID, "NOCOMBO", 0, "SI"),


							   Conclusiones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CONCLUSIONES_OIT_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
							   Dx = GetDiagnosticByServiceIdAndComponent(a.v_ServiceId, pstrComponentId),

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ReportTamizajeDermatologico> ReportTamizajeDermatologico(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
								 //from F in F_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join G in dbContext.professional on new { a = me.v_PersonId }
																	  equals new { a = G.v_PersonId } into G_join
								 from G in G_join.DefaultIfEmpty()

								 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
								 from H in H_join.DefaultIfEmpty()

								 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
								 from I in I_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on I.v_CustomerOrganizationId equals D1.v_OrganizationId

								 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
								 from J in J_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportTamizajeDermatologico
								 {
									 EmpresaCliente = D1.v_Name,
									 Ficha = A.v_ServiceId,
									 Hc = E.v_ServiceComponentId,
									 NombreTrabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 Fecha = A.d_ServiceDate.Value,
									 FirmaMedico = pme.b_SignatureImage,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
								 });


				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   select new ReportTamizajeDermatologico
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   Ficha = a.Ficha,
							   Hc = a.Hc,
							   NombreTrabajador = a.NombreTrabajador,
							   Fecha = a.Fecha,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   SufreEnfermedadPielSiNo = GetServiceComponentFielValue(pstrserviceId, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SUFRE_UD_ENFERMEDAD_PIEL_ID, "NOCOMBO", 0, "SI"),
							   SiQueDxTiene = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_QUE_DX_TIENE_ID, "NOCOMBO", 0, "SI"),
							   ActualmenteLesionSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ACTUALMENTE_LESION_ID, "NOCOMBO", 0, "SI"),
							   DondeLocalizaLesion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
							   CuantoTieneLesion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_CUANTO_TIENE_LESION_ID, "NOCOMBO", 0, "SI"),
							   PresentaColoracionPielSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_PRESENTA_COLORACION_PIEL_ID, "NOCOMBO", 0, "SI"),
							   LesionRepiteVariasAniosSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_LESIONES_REPITE_VARIAS_ANIOS_ID, "NOCOMBO", 0, "SI"),
							   EnrrojecimientoParteCuerpoSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ENRROJECIMIENTO_PARTE_CUERPO_ID, "NOCOMBO", 0, "SI"),
							   EnrrojecimientoLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ENRROJECIMIENTO_SI_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
							   TieneComezonSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_TIENE_COMEZON_ID, "NOCOMBO", 0, "SI"),
							   ComezonLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_COMEZON_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
							   HinchazonParteCuerpoSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_HINCHAZON_PARTE_CUERPO_ID, "NOCOMBO", 0, "SI"),
							   HinchazonParteCuerpoLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_HINCHAZON_PARTE_CUERPO_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
							   AlergiaAsmaSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ALERGIA_ASMA_ID, "NOCOMBO", 0, "SI"),
							   EppSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_USA_EPP_ID, "NOCOMBO", 0, "SI"),
							   TipoProteccionUsa = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_TIPO_PROTECCION_USA_ID, "NOCOMBO", 0, "SI"),
							   CambioUnasSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_PRESENTA_CAMBIO_UNAS_ID, "NOCOMBO", 0, "SI"),
							   TomandoMedicacionSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_TOMANDO_ALGUNA_MEDICACION_ID, "NOCOMBO", 0, "SI"),
							   ComoLlamaMedicacion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_COMO_SE_LLAMA_ID, "NOCOMBO", 0, "SI"),
							   DosisFrecuencia = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DOSIS_FRECUENCIA_ID, "NOCOMBO", 0, "SI"),
							   Descripcion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DESCRIPCION1_ID, "NOCOMBO", 0, "SI"),
							   DermatopiaSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DERMATOPIA_ID, "NOCOMBO", 0, "SI"),
							   NikolskySiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DERMATOPIA_ID, "NOCOMBO", 0, "SI"),
							   v_OwnerOrganizationName = (from n in dbContext.organization
														  where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
														  select n.v_Name).SingleOrDefault<string>(),


							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public string DevolverAptitud(string pstrServiceId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var objEntity = (from A in dbContext.service

								 join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
								 equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
								 from J4 in J4_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrServiceId
								 select new
							   {
								   Aptitud = J4.v_Value1
							   }).FirstOrDefault();

				return objEntity.Aptitud;
			}
			catch (Exception)
			{

				throw;
			}
		}


		public List<ReportAseguradora> ReporteAseguradora(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{


					#region Antecedentes

					var varDxReco = DevolverJerarquiaDxRecomendaciones(FechaInicio, FechaFin);
					//var varAntecedentes = DevolverTodosAntecedentes( FechaInicio, FechaFin);
					var varValores = DevolverValorCampoPorServicio(FechaInicio, FechaFin);
					var varDx = DevolverJerarquiaDx(FechaInicio, FechaFin);


					#endregion


					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
									from D in D_join.DefaultIfEmpty()

									join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
											  equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
									from J1 in J1_join.DefaultIfEmpty()

									join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
										   equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
									from J2 in J2_join.DefaultIfEmpty()

									join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
									   equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
									from J3 in J3_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
									   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()

									where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin && C.v_ProtocolId != "N009-PR000000044"
									//&& A.v_PersonId == "N009-PP000000208"
									select new ReportAseguradora
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
										NroDNI = B.v_DocNumber,
										PuestoTrabajo = B.v_CurrentOccupation,
										Parentesco = J1.v_Value1,
										NombreTitular = B.v_OwnerName,
										EmpresaTrabajo = D.v_Name,
										Producto = "EPS", //J2.v_Value1
										DireccionTrabajador = B.v_AdressLocation,
										Proveedor = "",
										Modalidad = "A demanda", //J3.v_Value1,
										FechaServicioDate = A.d_ServiceDate.Value,
										TelefonoTrabajador = B.v_TelephoneNumber,
										CelularTrabajador = "",
										EmailTrabajador = B.v_Mail,
										FechaNacimiento = B.d_Birthdate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
										Anannesis = A.v_Story,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										Aptitud = J4.v_Value1
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					//List<string> ServicioIds = new List<string>();
					//foreach (var item in objEntity)
					//{
					//    ServicioIds.Add(item.IdServicio);
					//}

					//var varValores = DevolverValorCampoPorServicioMejorado(ServicioIds);
					var sql = (from a in objEntity.ToList()

							   #region Falta
							   let varPesoMaximo = PesoMaximo(varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor)//Revisar Beto

							   #region Subquerys

							   //// Subquerys ************************************************************************
							   let nameMedicalCenter = GetNameMedicalCenter()
							   let nameDoctoPhisicalExam = GetNameDoctoPhisicalExam(a.IdServicio)
							   let age = GetAge(a.FechaNacimiento.Value)
							   let ageGroup = GetGrupoEtario(age)

							   #endregion

							   #region DX

							   let varDxAudiometria = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.AUDIOMETRIA_ID)
							   let varDxEspirometria = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.ESPIROMETRIA_ID)

							   #endregion
							   #endregion

							   select new ReportAseguradora
							   {
								   Aptitud = a.Aptitud,
								   IdServicio = a.IdServicio,
								   IdProtocolId = a.IdProtocolId,
								   IdTrabajador = a.IdTrabajador,
								   Trabajador = a.Trabajador,
								   NroDNI = a.NroDNI,
								   PuestoTrabajo = a.PuestoTrabajo,
								   Parentesco = a.Parentesco,
								   NombreTitular = a.NombreTitular,
								   EmpresaTrabajo = a.EmpresaTrabajo,
								   Producto = a.Producto,
								   DireccionTrabajador = a.DireccionTrabajador,
								   Proveedor = a.Proveedor,
								   Modalidad = a.Modalidad,
								   FechaServicio = a.FechaServicioDate.ToShortDateString(),
								   TelefonoTrabajador = a.TelefonoTrabajador,
								   CelularTrabajador = a.CelularTrabajador,
								   EmailTrabajador = a.EmailTrabajador,
								   FechaNacimiento = a.FechaNacimiento,
								   GeneroTrabajador = a.GeneroTrabajador,

								   //AntecedentePersonal1 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[0].v_DiseasesName,
								   //AntecedentePersonal2 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[1].v_DiseasesName,
								   //AntecedentePersonal3 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[2].v_DiseasesName,
								   //AntecedentePersonal4 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[3].v_DiseasesName,
								   //AntecedentePersonal5 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[4].v_DiseasesName,
								   //AntecedentePersonal6 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[5].v_DiseasesName,
								   //AntecedenteFamiliar1 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[6].v_DiseasesName,
								   //AntecedenteFamiliar2 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[7].v_DiseasesName,
								   //AntecedenteFamiliar3 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[8].v_DiseasesName,
								   //AntecedenteFamiliar4 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[9].v_DiseasesName,
								   //AntecedenteFamiliar5 = varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[10].v_DiseasesName,

								   PresionSistolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor,
								   PresionDiastolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor,
								   Hemograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).Valor,
								   Hemoglobina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor,
								   HemoglobinaB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor,
								   Glucosa = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Valor,
								   GlucosaB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor,
								   Colesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor,
								   ColesterolB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor,
								   HDLColesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor,
								   HDLColesterolB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor,
								   Triglicerido = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
								   TrigliceridoB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor,
								   PSA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
								   PSAB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor,
								   IMC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
								   PerimetroAbdominal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor,
								   Talla = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
								   Peso = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,

								   ExamenFisicoDescripcion = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor,
								   ExamenClinico2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor,
								   ExamenOrina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && o.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && o.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID && o.IdCampo == Constants.EXAMEN_COMPLETO_DE_ORINA_CONCLUSIONES_ID).Valor,
								   THENEVON = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor,
								   RxDescripcion = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor,
								   Electrocardiograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor,
								   Papanicolao = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor,
								   Mamografia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor,
								   EcoPelvica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor,
								   EcoTransvaginal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor,
								   Colonoscopia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor,
								   DesintometriaOsea = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor,
								   EvOdontologica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
								   EvOftalmologica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor,
								   EvPsicológica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_AREA_CONCLUSIONES_ID).Valor,

								   Dx1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[0].Descripcion,
								   Dx2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[1].Descripcion,
								   Dx3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[2].Descripcion,
								   Dx4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[3].Descripcion,
								   Dx5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[4].Descripcion,
								   Dx6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[5].Descripcion,
								   Dx7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[6].Descripcion,
								   Dx8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[7].Descripcion,

								   Recomendacion1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[8].Descripcion,
								   Recomendacion2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[9].Descripcion,
								   Recomendacion3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[10].Descripcion,
								   Recomendacion4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[11].Descripcion,
								   Recomendacion5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[12].Descripcion,
								   Recomendacion6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[13].Descripcion,
								   Recomendacion7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[14].Descripcion,
								   Recomendacion8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[15].Descripcion,
								   Recomendacion9 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[16].Descripcion,
								   Recomendacion10 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[17].Descripcion,
								   Recomendacion11 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[18].Descripcion,
								   Recomendacion12 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[19].Descripcion,
								   Recomendacion13 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[20].Descripcion,
								   Recomendacion14 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[21].Descripcion,

								   HemogramaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) != null ? "HEMOGRAMA" : "",
								   HemoglobinaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID) != null ? "HEMOGLOBINA" : "",
								   GlucosaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID) != null ? "GLUCOSA" : "",
								   ColesterolA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID) != null ? "COLESTEROL TOTAL" : "",
								   HDLColesterolA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID) != null ? "HDL COLESTEROL TOTAL" : "",
								   TrigliceridoA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID) != null ? "TRIGLICERIDOS" : "",
								   PSAA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) != null ? "ANTIGENOS PROSTATICO" : "",
								   ExamenOrinaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID) != null ? "EXAMEN COMPLETO DE ORINA" : "",
								   Rx = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID) != null ? "RX" : "",
								   ElectrocardiogramaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID) != null ? "ELECTROCARDIOGRAMA" : "",

								   DxAudiometria = varDxAudiometria,
								   DxEspirometria = varDxEspirometria,

								   LugarChekeo = nameMedicalCenter,
								   MedicoEvaluador = nameDoctoPhisicalExam,
								   EdadTrabajador = age,
								   GrupoEtario = ageGroup,
								   Anannesis = a.Anannesis,
								   ActividadFisica = GetHabitoNoscivo(a.IdTrabajador, 4),
								   Fumar = GetHabitoNoscivo(a.IdTrabajador, 1),

								   PresionArterialDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Descripcion : "Normal",
								   HDLDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Descripcion : "Normal",

								   IMCDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Descripcion : "Normal",

								   HemoglobinaDX = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.HEMOGLOBINA_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.HEMOGLOBINA_ID).Descripcion : "Normal",
								   GlucosaDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.OFTALMOLOGIA_DESCRIPCION).Descripcion : "Normal",
								   ColesterolDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Descripcion : "Normal",
								   TrigliceridoDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Descripcion : "Normal",
								   PSADx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR).Descripcion : "Normal",


								   PesoMaximo = varPesoMaximo,

							   }).ToList();

					return sql;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<Antecedentes> DevolverHabitos_Personales(List<string> PersonIds)
		{
			try
			{

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					var ListaMedicosPersonales = (from A in dbContext.personmedicalhistory
												  join B in dbContext.systemparameter on new { a = A.v_DiseasesId, b = 147 }
													 equals new { a = B.v_Value1, b = B.i_GroupId } into B_join
												  from B in B_join.DefaultIfEmpty()

												  join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 147 }
																					equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
												  from C in C_join.DefaultIfEmpty()

												  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

												  where A.i_IsDeleted == 0
												  && PersonIds.Contains(A.v_PersonId)
												  orderby A.v_PersonId
												  select new PersonMedicalHistoryList
												  {
													  v_PersonId = A.v_PersonId,
													  v_DiseasesId = D.v_DiseasesId,
													  v_DiseasesName = D.v_Name,
													  i_Answer = A.i_AnswerId.Value,
													  v_GroupName = C.v_Value1 == null ? "ENFERMEDADES OTROS" : C.v_Value1,
												  }).ToList();

					var ListaAntecedentesFamiliares = (from A in dbContext.familymedicalantecedents

													   join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
														   equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
													   from B in B_join.DefaultIfEmpty()

													   join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }
														   equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
													   from C in C_join.DefaultIfEmpty()

													   join D in dbContext.diseases on new { a = A.v_DiseasesId }
												equals new { a = D.v_DiseasesId } into D_join
													   from D in D_join.DefaultIfEmpty()
													   where A.i_IsDeleted == 0
													   && PersonIds.Contains(A.v_PersonId)
													   orderby A.v_PersonId
													   select new FamilyMedicalAntecedentsList
													   {
														   v_PersonId = A.v_PersonId,
														   v_DiseaseName = D.v_Name,
														   v_TypeFamilyName = C.v_Value1,
														   v_Comment = A.v_Comment
													   }).ToList();

					var ListaHabitosNoxivos = (from A in dbContext.noxioushabits
											   where A.i_IsDeleted == 0
											   && PersonIds.Contains(A.v_PersonId)
											   orderby A.v_PersonId
											   select new NoxiousHabitsList
												 {
													 v_PersonId = A.v_PersonId,
													 i_TypeHabitsId = A.i_TypeHabitsId.Value,
													 v_Frequency = A.v_Frequency,
													 v_Comment = A.v_Comment
												 }).ToList();


					var ListaJerarquizada = (from A in dbContext.person
											 where PersonIds.Contains(A.v_PersonId)

											 select new Antecedentes
											 {
												 PersonId = A.v_PersonId
											 }).ToList();

					ListaJerarquizada.ForEach(a =>
					{
						a.ListaPersonalMedical = ListaMedicosPersonales.FindAll(p => p.v_PersonId == a.PersonId);
					});

					ListaJerarquizada.ForEach(a =>
					{
						a.ListaHabitos = ListaHabitosNoxivos.FindAll(p => p.v_PersonId == a.PersonId);
					});

					ListaJerarquizada.ForEach(a =>
					{
						a.ListaAntecedentesFamiliares = ListaAntecedentesFamiliares.FindAll(p => p.v_PersonId == a.PersonId);
					});


					return ListaJerarquizada;


				}

			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public string AntecedentesPatologicosConcatenados(List<PersonMedicalHistoryList> Lista)
		{
			try
			{
				return string.Join(", ", Lista.Select(p => p.v_GroupName + " / " + p.v_DiseasesName));
			}
			catch (Exception)
			{

				throw;
			}
		}

		public string AntecedentesFamiliaresConcatenados(List<FamilyMedicalAntecedentsList> Lista)
		{
			try
			{
				return string.Join(", ", Lista.Select(p => p.v_TypeFamilyName + " / " + p.v_DiseaseName));
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alejandro
		public string GetNameMedicalCenter()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var nameMedicalCenter = (from n in dbContext.organization
										 where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
										 select n.v_Name + " " + n.v_Address).SingleOrDefault<string>();

				return nameMedicalCenter;
			}
		}

		public string GetNameMedicalCenterName()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var nameMedicalCenter = (from n in dbContext.organization
										 where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
										 select n.v_Name).SingleOrDefault<string>();

				return nameMedicalCenter;
			}
		}

		public string GetNameMedicalCenteraddress()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var nameMedicalCenter = (from n in dbContext.organization
										 where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
										 select n.v_Address).SingleOrDefault<string>();

				return nameMedicalCenter;
			}
		}

		public string GetPhoneNumberMedicalCenter()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var phoneNumber = (from n in dbContext.organization
								   where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
								   select n.v_PhoneNumber).SingleOrDefault<string>();

				return phoneNumber;
			}
		}

		public string GetEmailMedicalCenter()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var email = (from n in dbContext.organization
							 where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
							 select n.v_Mail).SingleOrDefault<string>();

				return email;
			}
		}

        //public string GetActividadEconomicaEmpPropietaria()
        //{
        //    using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
        //    {

        //        var result = (from n in dbContext.organization
        //                      join b in dbContext.ciiui on n.v_SectorCodigo equals b.
        //                     where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
        //                     select SP2.v_Value1).SingleOrDefault<string>();

        //        return result;
        //    }
        //}

		// Alejandro
		public organizationDto GetInfoMedicalCenter()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{
				organizationDto objDtoEntity = null;
				var objEntity = (from o in dbContext.organization
								 where o.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
								 select o).SingleOrDefault();



				if (objEntity != null)
					objDtoEntity = organizationAssembler.ToDTO(objEntity);

				return objDtoEntity;
			}
		}


		public OrganizationList GetInfoMedicalCenterSede()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var sql = (from o in dbContext.organization
						   join s in dbContext.location on o.v_OrganizationId equals s.v_OrganizationId
						   where o.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
						   select new OrganizationList
						   {
							   v_Name = o.v_Name,
							   v_Address = o.v_Address,
							   b_Image = o.b_Image,
							   v_PhoneNumber = o.v_PhoneNumber,
							   v_Mail = o.v_Mail,
							   v_Sede = s.v_Name,
							   v_EmailContacto = o.v_EmailContacto
						   }).SingleOrDefault();


				return sql;
			}
		}

		//AMC
		public byte[] GetLogoMedicalCenter()
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{

				var nameMedicalCenter = (from n in dbContext.organization
										 where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
										 select n.b_Image).SingleOrDefault();

				return nameMedicalCenter;
			}
		}

		// alejandro
		public string GetNameDoctoPhisicalExam(string serviceId)
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{
				var nameDoctor = (from x in dbContext.servicecomponent
								  join me in dbContext.systemuser on x.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								  from me in me_join.DefaultIfEmpty()
								  join Pe in dbContext.person on me.v_PersonId equals Pe.v_PersonId

								  where x.v_ComponentId == Constants.EXAMEN_FISICO_ID && x.v_ServiceId == serviceId
								  select Pe.v_FirstName + " " +
										 Pe.v_FirstLastName + " " + Pe.v_SecondLastName
													   ).SingleOrDefault<string>();

				return nameDoctor;
			}
		}

		// alejandro
		public ServiceList GetDoctoPhisicalExam(string serviceId)
		{
			using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
			{
				var sql = (from x in dbContext.servicecomponent
						   join me in dbContext.systemuser on x.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
						   from me in me_join.DefaultIfEmpty()

						   join Pe in dbContext.person on me.v_PersonId equals Pe.v_PersonId

						   join pr in dbContext.professional on Pe.v_PersonId equals pr.v_PersonId into pr_join
						   from pr in pr_join.DefaultIfEmpty()

						   where x.v_ComponentId == Constants.EXAMEN_FISICO_ID &&
								 x.v_ServiceId == serviceId

						   select new ServiceList
							 {
								 v_Pacient = Pe.v_FirstName + " " + Pe.v_FirstLastName + " " + Pe.v_SecondLastName,
								 FirmaDoctor = pr.b_SignatureImage

							 }).FirstOrDefault();

				return sql;
			}
		}

		private string GetGrupoEtario(int Edad)
		{
			string GrupoEterario = "";
			try
			{
				if (Edad < 18)
				{
					GrupoEterario = "Menor de 18";
				}
				else if (18 <= Edad && Edad <= 29)
				{
					GrupoEterario = "de 18 a 29";
				}
				else if (30 <= Edad && Edad <= 39)
				{
					GrupoEterario = "de 30 a 39";
				}
				else if (40 <= Edad && Edad <= 49)
				{
					GrupoEterario = "de 40 a 49";
				}
				else if (Edad >= 50)
				{
					GrupoEterario = "mayor de 50";
				}

				return GrupoEterario;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public string PesoMaximo(string Talla)
		{
			if (Talla != "")
			{
				double ValueTalla = double.Parse(Talla);
				double Result = ValueTalla * ValueTalla * 25;
				return Result.ToString();
			}
			else
			{
				return "";
			}
		}

		public string GetDxByField(string pstrServiceId, string pstrCampoId, string Value1, string Value2)
		{
			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					string CadenaRetornar = "";
					var query = (from A in dbContext.diagnosticrepository
								 join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
								 where A.v_ServiceId == pstrServiceId && A.v_ComponentFieldId == pstrCampoId
								 select new
								 {
									 Dx = B.v_Name
								 }
								  ).FirstOrDefault();

					if (query != null)
					{
						CadenaRetornar = query.Dx;
					}
					else
					{
						if (Value1 == "" || Value2 == "")
						{
							CadenaRetornar = "";
						}
						else
						{
							CadenaRetornar = "Normal";
						}

					}

					return CadenaRetornar;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Antecedentes Personales
		public string GetPersonMedicalHistory(string pstrPacientId, int Nro)
		{
			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					string CadenaRetornar = "";

					var query = (from A in dbContext.personmedicalhistory
								 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
								 where A.i_IsDeleted == 0 && A.v_PersonId == pstrPacientId
								 select new
								 {
									 v_DiseasesName = D.v_Name,
									 d_StartDate = A.d_StartDate.Value,
									 Detalle_Dx = A.v_DiagnosticDetail
								 }).ToList();

					var sql = (from a in query
							   select new
							   {
								   Concatec = a.v_DiseasesName + " (" + a.d_StartDate.ToString("MM/yyyy") + ")" + ", " + a.Detalle_Dx
							   }).ToList();

					if (Nro == 5)
					{
						int Contador = query.Count - 5;
						var x = sql.GetRange(5, Contador);

						CadenaRetornar = string.Join(", ", x.Select(p => p.Concatec));

					}
					else
					{
						CadenaRetornar = query.Count == 0 ? "" : sql[Nro].Concatec;
					}

					return CadenaRetornar;
				}

			}
			catch (Exception ex)
			{
				return null;
			}
		}

		//Antecedentes Familiares
		public string GetFamilyMedical(string pstrPacientId, int Nro)
		{
			int isDeleted = (int)SiNo.NO;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					string CadenaRetornar = "";

					var query = (from A in dbContext.familymedicalantecedents
								 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

								 join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
									 equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
								 from J1 in J1_join.DefaultIfEmpty()

								 join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
									 equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
								 from J2 in J2_join.DefaultIfEmpty()

								 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId
								 select new
								 {
									 v_DiseasesName = D.v_Name,
									 Parentesco = J2.v_Value1
								 }).ToList();

					var sql = (from a in query
							   select new
							   {
								   Concatec = a.v_DiseasesName + " (" + a.Parentesco + ")"
							   }).ToList();

					if (Nro == 4)
					{
						int Contador = query.Count - 4;
						var x = sql.GetRange(4, Contador);

						CadenaRetornar = string.Join(", ", x.Select(p => p.Concatec));

					}
					else
					{
						CadenaRetornar = query.Count == 0 ? "" : sql[Nro].Concatec;
					}

					return CadenaRetornar;
				}

			}
			catch (Exception ex)
			{
				return null;
			}
		}

		//Habitos Noscivos
		public string GetHabitoNoscivo(string pstrPacientId, int pintTypeHabit)
		{
			int isDeleted = (int)SiNo.NO;

			try
			{

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					string CadenaRetornar = "";
					var query = (from A in dbContext.noxioushabits
								 //join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 205 }
								 //              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
								 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId && A.i_TypeHabitsId == pintTypeHabit
								 select new
								 {
									 Frecuencia = A.v_Frequency
								 }).FirstOrDefault();

					return CadenaRetornar = query == null ? "" : query.Frecuencia;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Diagnosticos por Servicio
		public string GetDxByServiceId(string pstrServiceId, int Nro)
		{
			string CadenaRetornar = "";
			try
			{

				List<DiagnosticRepositoryList> ListaDx = GetDxByServiceId(pstrServiceId);
				if (ListaDx.Count != 0)
				{
					if (ListaDx.Count <= 8)
					{
						if (Nro <= 7)
						{
							if (Nro <= ListaDx.Count - 1)
							{
								CadenaRetornar = ListaDx[Nro].v_DiseasesName;
							}
							else
							{
								CadenaRetornar = "";
							}
						}
					}
					else if (ListaDx.Count > 8)
					{
						if (Nro <= 6)
						{
							if (Nro <= ListaDx.Count - 1)
							{
								CadenaRetornar = ListaDx[Nro].v_DiseasesName;
							}
							else
							{
								CadenaRetornar = "";
							}
						}
						else
						{
							int Contador = ListaDx.Count - 7;
							var x = ListaDx.GetRange(7, Contador);

							CadenaRetornar = string.Join(", ", x.Select(p => p.v_DiseasesName));
						}
					}


				}
				return CadenaRetornar;

			}
			catch (Exception)
			{

				throw;
			}
		}

		//Recomendaciones por Servicio
		public string GetRecomendationByServiceId(string pstrServiceId, int Nro)
		{
			string CadenaRetornar = "";
			try
			{

				List<RecomendationList> ListaRecomendaciones = GetListRecommendationByServiceId(pstrServiceId);

				if (ListaRecomendaciones.Count != 0)
				{
					if (ListaRecomendaciones.Count <= 14)
					{
						if (Nro <= 13)
						{
							if (Nro <= ListaRecomendaciones.Count - 1)
							{
								CadenaRetornar = ListaRecomendaciones[Nro].v_RecommendationName;
							}
							else
							{
								CadenaRetornar = "";
							}
						}
					}
					else if (ListaRecomendaciones.Count > 14)
					{
						if (Nro <= 6)
						{
							if (Nro <= ListaRecomendaciones.Count - 1)
							{
								CadenaRetornar = ListaRecomendaciones[Nro].v_RecommendationName;
							}
							else
							{
								CadenaRetornar = "";
							}
						}
						else
						{
							int Contador = ListaRecomendaciones.Count - 13;
							var x = ListaRecomendaciones.GetRange(13, Contador);

							CadenaRetornar = string.Join(", ", x.Select(p => p.v_RecommendationName));
						}
					}


				}



















				//if (ListaRecomendaciones.Count != 0)
				//{
				//    if (Nro == 13)
				//    {
				//        if (Nro == ListaRecomendaciones.Count)
				//        {
				//            CadenaRetornar = ListaRecomendaciones.Count == 0 ? "" : ListaRecomendaciones[Nro - 1].v_RecommendationName;
				//        }
				//        else if (ListaRecomendaciones.Count > 12)
				//        {
				//            int Contador = ListaRecomendaciones.Count - 14;
				//            var x = ListaRecomendaciones.GetRange(14, Contador);

				//            CadenaRetornar = string.Join(", ", ListaRecomendaciones.Select(p => p.v_RecommendationName));
				//        }
				//        else
				//        {
				//            return "";
				//        }

				//    }
				//    else
				//    {
				//        if (ListaRecomendaciones.Count > Nro)
				//        {
				//            CadenaRetornar = ListaRecomendaciones.Count == 0 ? "" : ListaRecomendaciones[Nro].v_RecommendationName;
				//        }
				//        else
				//        {
				//            return "";
				//        }
				//    }
				//}
				return CadenaRetornar;
			}
			catch (Exception)
			{

				throw;
			}
		}


		//Alberto 

		public List<ReportCuestionarioOjoSeco> GetReportCuestionarioOjoSeco(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 //join F in dbContext.organization on C.v_ equals D.v_OrganizationId into F_join
								 //from F in F_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportCuestionarioOjoSeco
								 {
									 FechaSinFormatear = A.d_ServiceDate.Value,
									 Trabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = D.v_Name,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()

						   let Test = ValoresComponentesUserControl(pstrserviceId, Constants.OFTALMOLOGIA_ID)
						   let LogoEmpresa = GetLogoMedicalCenter()
						   //let Fecha = FormatearFecha(a.FechaSinFormatear)
						   select new ReportCuestionarioOjoSeco
						   {
							   //Fecha = Fecha,
							   Trabajador = a.Trabajador,
							   FirmaMedico = a.FirmaMedico,
							   Empresa = a.Empresa,
							   LogoClinica = LogoEmpresa,
							   EnrojOcular = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_ENROJECIMIENTO_OCULAR).v_Value1,
							   ParpaInflama = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_BORDE_PARPADOS_IMFLAMADOS).v_Value1,
							   CostraParpa = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_COSTRAS_PARPADOS).v_Value1,
							   OjosPegados = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_OJO_PEGADOS_LEVANTARSE).v_Value1,
							   Secreciones = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SECRECION).v_Value1,
							   SequedadOjo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SEQUEDAD_OJO).v_Value1,
							   SensaArenilla = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SEMSACION_ARENILLA).v_Value1,
							   SensaCuerpExtra = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SENSACION_CUERPO_EXTRANO).v_Value1,
							   Ardor = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_ARDOR).v_Value1,
							   Picor = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_PICOR).v_Value1,
							   MalestarOjo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_MALESTAR_OJO).v_Value1,
							   DolorAgudo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_DOLO_AGUDO).v_Value1,
							   Lagrimeo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_LAGRIMEO).v_Value1,
							   OjosLlorosos = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_OJOS_LLOROSOS).v_Value1,
							   SensibilidadLuz = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SENSIBILIDAD_LUZ).v_Value1,
							   VisionBorrosa = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_VISION_BORROSA).v_Value1,
							   CansancioOjo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_CANSANCIO_OJOS).v_Value1,
							   SensaPesadez = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SENSACION_PESADEZ).v_Value1,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		private string FormatearFecha(DateTime? nullable)
		{
			return nullable.Value.ToString("dd/MM/yyyy");
		}


		public List<ReportAntigenosFebriles> GetReportAntigenosFebriles(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new ReportAntigenosFebriles
								 {
									 FechaSinformatear = A.d_ServiceDate.Value,
									 Trabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 EmpresaTrabajador = D.v_Name,
									 Puesto = E.v_CurrentOccupation
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let LogoEmpresa = GetLogoMedicalCenter()
						   let ValorFecha = FormatearFecha(a.FechaSinformatear)
						   let Test = ValoresComponente(pstrserviceId, Constants.AGLUTINACIONES_LAMINA_ID)
						   select new ReportAntigenosFebriles
						   {
							   LogoEmpresa = LogoEmpresa,
							   Trabajador = a.Trabajador,
							   EmpresaTrabajador = a.EmpresaTrabajador,
							   Puesto = a.Puesto,
							   Fecha = ValorFecha,
							   FirmaMedico = a.FirmaMedico,

							   ParatificoA = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A).v_Value1Name,
							   ParatificoADeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A_DESEABLE).v_Value1,

							   ParatificoB = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B).v_Value1Name,
							   ParatificoBDeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B_DESEABLE).v_Value1,

							   TificoH = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H).v_Value1Name,
							   TificoHDeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H_DESEABLE).v_Value1,

							   TificoO = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O).v_Value1Name,
							   TificoODeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O_DESEABLE).v_Value1,

							   Brucella = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA).v_Value1Name,
							   BrucellaDeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA_DESEABLE).v_Value1,


						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ReportParasitologicoSimple> GetReportParasitologicoSimple(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new ReportParasitologicoSimple
								 {
									 FechaSinFormato = A.d_ServiceDate.Value,
									 Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = D.v_Name,
									 Puesto = E.v_CurrentOccupation
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let LogoEmpresa = GetLogoMedicalCenter()
						   let ValorFecha = FormatearFecha(a.FechaSinFormato)
						   let Test = ValoresComponente(pstrserviceId, Constants.PARASITOLOGICO_SIMPLE_ID)
						   select new ReportParasitologicoSimple
						   {
							   LogoEmpresa = LogoEmpresa,
							   Paciente = a.Paciente,
							   Empresa = a.Empresa,
							   Puesto = a.Puesto,
							   Fecha = ValorFecha,
							   FirmaMedico = a.FirmaMedico,

							   Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_COLOR).v_Value1,
							   Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_CONSISTENCIA).v_Value1Name,

							   RestosAlimenticios = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESTOS_ALIMENTICIOS).v_Value1Name,
							   Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_SANGRE).v_Value1Name,
							   Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_MOCO).v_Value1Name,
							   Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_QUISTES).v_Value1Name,
							   Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HUEVOS).v_Value1Name,
							   Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_TROFOZOITOS).v_Value1Name,
							   Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HEMATIES).v_Value1Name,
							   Leucocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_LEUCOCITOS).v_Value1Name,
							   Resultados = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS).v_Value1,
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{
				throw;
			}
		}

		public List<ReportParasitologicoSeriado> GetReportParasitologicoSeriado(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new ReportParasitologicoSeriado
								 {
									 FechaSinFormato = A.d_ServiceDate.Value,
									 Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = D.v_Name,
									 Puesto = E.v_CurrentOccupation
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let LogoEmpresa = GetLogoMedicalCenter()
						   let ValorFecha = FormatearFecha(a.FechaSinFormato)
						   let Test = ValoresComponente(pstrserviceId, Constants.PARASITOLOGICO_SERIADO_ID)
						   select new ReportParasitologicoSeriado
						   {
							   LogoEmpresa = LogoEmpresa,
							   Paciente = a.Paciente,
							   Empresa = a.Empresa,
							   Puesto = a.Puesto,
							   Fecha = ValorFecha,
							   FirmaMedico = a.FirmaMedico,

							   Muestra1Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_COLOR).v_Value1,
							   Muestra1Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_CONSISTENCIA).v_Value1Name,
							   Muestra1RestosAlim = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_RESTOS_ALIMENTICIOS).v_Value1Name,
							   Muestra1Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_SANGRE).v_Value1Name,
							   Muestra1Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_MOCO).v_Value1Name,
							   Muestra1Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_QUISTES).v_Value1Name,
							   Muestra1Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HUEVOS).v_Value1Name,
							   Muestra1Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_TROFOZOITOS).v_Value1Name,
							   Muestra1Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HEMATIES).v_Value1Name,
							   Muestra1Luecocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_LEUCOCITOS).v_Value1Name,

							   Muestra2Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_COLOR).v_Value1,
							   Muestra2Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_CONSISTENCIA).v_Value1Name,
							   Muestra2RestosAlim = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_RESTOS_ALIMENTICIOS).v_Value1Name,
							   Muestra2Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_SANGRE).v_Value1Name,
							   Muestra2Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_MOCO).v_Value1Name,
							   Muestra2Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_QUISTES).v_Value1Name,
							   Muestra2Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HUEVOS).v_Value1Name,
							   Muestra2Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_TROFOZOITOS).v_Value1Name,
							   Muestra2Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HEMATIES).v_Value1Name,
							   Muestra2Leucocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_LEUCOCITOS).v_Value1Name,

							   Muestra3Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_COLOR).v_Value1,
							   Muestra3Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_CONSISTENCIA).v_Value1Name,
							   Muestra3RestosAlim = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESTOS_ALIMENTICIOS).v_Value1Name,
							   Muestra3Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_SANGRE).v_Value1Name,
							   Muestra3Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_MOCO).v_Value1Name,
							   Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_QUISTES).v_Value1Name,
							   Muestra3Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HUEVOS).v_Value1Name,
							   Muestra3Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_TROFOZOITOS).v_Value1Name,
							   Muestra3Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HEMATIES).v_Value1Name,
							   Muestra3Leucocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_LEUCOCITOS).v_Value1Name,

							   Resultado = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESULTADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESULTADOS).v_Value1,
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{
				throw;
			}
		}

		public List<ReportHemogramaCompleto> GetReportHemogramaCompleto(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new ReportHemogramaCompleto
								 {
									 FechaSinFormato = A.d_ServiceDate.Value,
									 Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = D.v_Name,
									 Puesto = E.v_CurrentOccupation
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let LogoEmpresa = GetLogoMedicalCenter()
						   let ValorFecha = FormatearFecha(a.FechaSinFormato)
						   let Test = ValoresComponente(pstrserviceId, Constants.HEMOGRAMA_COMPLETO_ID)
						   let Sangre = ValoresComponente(pstrserviceId, Constants.GRUPO_Y_FACTOR_SANGUINEO_ID)
						   select new ReportHemogramaCompleto
						   {
							   LogoEmpresa = LogoEmpresa,
							   Paciente = a.Paciente,
							   Empresa = a.Empresa,
							   Puesto = a.Puesto,
							   Fecha = ValorFecha,
							   FirmaMedico = a.FirmaMedico,

							   HematocritoReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO).v_Value1,
							   HematocritoRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO_DESEABLE).v_Value1,

							   HemoglobinaReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA).v_Value1,
							   HemoglobinaRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA_DESEABLE).v_Value1,

							   GlobulosRojosReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES).v_Value1,
							   GlobulosRojosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES_DESEABLE).v_Value1,

							   LeucocitosReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS).v_Value1,
							   LeucocitosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS_DESEABLE).v_Value1,

							   RecuPlaquetasResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS).v_Value1,
							   RecuPlaquetasRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS_DESEABLE).v_Value1,

							   AbastonadosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS).v_Value1,
							   AbastonadosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS_DESEABLE).v_Value1,

							   SegmentadosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS).v_Value1,
							   SegmentadoRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS_DESEABLE).v_Value1,

							   EosinofilosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS).v_Value1,
							   EosinofilosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS_DESEABLE).v_Value1,

							   BasofilosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS).v_Value1,
							   BasofilosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS_DESEABLE).v_Value1,

							   MonocitosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS).v_Value1,
							   MonocitosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS_DESEABLE).v_Value1,

							   LinfocitosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS).v_Value1,
							   LinfocitosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS_DESEABLE).v_Value1,

							   Sanguineo = Sangre.Count == 0 || Sangre.Find(p => p.v_ComponentFieldId == Constants.GRUPO_SANGUINEO_ID) == null ? string.Empty : Sangre.Find(p => p.v_ComponentFieldId == Constants.GRUPO_SANGUINEO_ID).v_Value1Name,
							   Factor = Sangre.Count == 0 || Sangre.Find(p => p.v_ComponentFieldId == Constants.FACTOR_SANGUINEO_ID) == null ? string.Empty : Sangre.Find(p => p.v_ComponentFieldId == Constants.FACTOR_SANGUINEO_ID).v_Value1Name,

							   Observaciones = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).v_Value1,


						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ReportExamenOrinaCompleto> GetReportExamenCompletoOrina(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new ReportExamenOrinaCompleto
								 {
									 FechaSinformatear = A.d_ServiceDate.Value,
									 Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 Empresa = D.v_Name,
									 Puesto = E.v_CurrentOccupation
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let LogoEmpresa = GetLogoMedicalCenter()
						   let ValorFecha = FormatearFecha(a.FechaSinformatear)
						   let Test = ValoresComponente(pstrserviceId, Constants.EXAMEN_COMPLETO_DE_ORINA_ID)
						   select new ReportExamenOrinaCompleto
						   {
							   LogoEmpresa = LogoEmpresa,
							   Paciente = a.Paciente,
							   Empresa = a.Empresa,
							   Puesto = a.Puesto,
							   Fecha = ValorFecha,
							   FirmaMedico = a.FirmaMedico,

							   Color = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_COLOR).v_Value1Name,
							   Aspecto = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_ASPECTO).v_Value1Name,
							   Densidad = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_DENSIDAD).v_Value1,
							   Ph = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_PH).v_Value1,

							   CelulasEpiteliales = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_CELULAS_EPITELIALES).v_Value1Name,
							   Leucocitos = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_LEUCOCITOS).v_Value1,
							   Hematies = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_HEMATIES).v_Value1,
							   Germenes = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_GERMENES).v_Value1Name,
							   Cilindros = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_CILINDROS).v_Value1Name,
							   Cristales = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_CRISTALES).v_Value1,

							   Nitritos = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_NITRITOS).v_Value1Name,
							   Proteinas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_PROTEINAS).v_Value1Name,
							   Glucosa = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_GLUCOSA).v_Value1Name,
							   Cetonas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_CETONAS).v_Value1Name,
							   Urobilinogeno = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_UROBILINOGENO).v_Value1Name,
							   Bilirrubinas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_BILIRRUBINA).v_Value1Name,
							   Sangre = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_SANGRE).v_Value1Name,
							   Hemoglobina = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_HEMOGLOBINA).v_Value1Name,

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ReportAutorizacionDosajeDrogas> GetReportAutorizacionDosajeDrogas(string pstrserviceId, string pstrComponentId, List<ServiceComponentList> pListaDosaje)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 where A.v_ServiceId == pstrserviceId
								 select new ReportAutorizacionDosajeDrogas
								 {
									 FechaSinformatear = A.d_ServiceDate.Value,
									 Trabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FirmaMedico = pme.b_SignatureImage,
									 EmpresaTrabajador = D.v_Name,
									 FechaNacimiento = E.d_Birthdate.Value,
									 FirmaTrabajador = E.b_RubricImage,
									 HuellaTrabajador = E.b_FingerPrintImage,
									 Puesto = E.v_CurrentOccupation,
									 Empresa = D.v_Name,
									 Dni = E.v_DocNumber,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()

						   let Test = ValoresComponente(pstrserviceId, Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID)
						   let LogoEmpresa = GetLogoMedicalCenter()
						   let Edad = GetAge(a.FechaNacimiento)
						   let ValorFecha = FormatearFecha(a.FechaSinformatear)
						   let ValoresDosaje = DevolverExamensConResultados(pstrserviceId, pListaDosaje)

						   select new ReportAutorizacionDosajeDrogas
						   {
							   LogoEmpresa = LogoEmpresa,
							   Fecha = ValorFecha,
							   Trabajador = a.Trabajador,
							   Dni = a.Dni,
							   Clinica = MedicalCenter.v_Name,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   EmpresaTrabajador = a.EmpresaTrabajador,
							   Edad = Edad,
							   Puesto = a.Puesto,
							   Empresa = a.Empresa,
							   SufreEnfermedadSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_SUFRE_ENFER).v_Value1,
							   EnfermedadCual = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_SUFRE_ENFER_CUAL).v_Value1,
							   ConsumeMedicamentoSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CONSUME_ALGUN_MEDICAMENTO).v_Value1,
							   ConsumeMedicamentoCual = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CONSUME_ALGUN_MEDICAMENTO_CUAL).v_Value1,
							   TomaCocaSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TOMA_MATECOCA).v_Value1,
							   TomaCocaCuantas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TOMA_MATECOCA_CUANTAS_VECES_SEMANA1).v_Value1,
							   ConsumioUltimo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TOMA_MATECOCA_ULTIMA_VEZ).v_Value1,
							   ConsumeProductoCocaSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CONSUME_HABITUALMENTE_PROD_COCA).v_Value1,
							   ConsumeProductoCocaCuantas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CUANTAS_VECES_SEMANA2).v_Value1,
							   ConsumeProductoCocaUltima = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CONSUME_HABITUALMENTE_PROD_COCA_CONSUMIO_ULTIMA_VEZ).v_Value1,
							   TratamientoAnestesiaSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TRATAMIENTO_ANESTESIA).v_Value1,
							   Metodo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_METODO).v_Value1,
							   Muestra = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MUESTRA).v_Value1,
							   Cocaina = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA).v_Value1Name,
							   Marihuana = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA).v_Value1Name,
							   Resultado = ValoresDosaje,
							   NombreUsuarioGraba = a.NombreUsuarioGraba
						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		private string DevolverExamensConResultados(string seviceId, List<ServiceComponentList> pListaDosaje)
		{
			try
			{


				string Resultado = "";
				string[] Examenes = new string[] 
			{
			Constants.TOXICOLOGICO_COLINESTERASA,
			Constants.TOXICOLOGICO_CARBOXIHEMOGLOBINA,
			Constants.TOXICOLOGICO_BENZODIAZEPINAS,
			Constants.TOXICOLOGICO_ALCOHOLEMIA,
			Constants.TOXICOLOGICO_ANFETAMINAS,
			Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID,
			};


				var Lista = pListaDosaje.FindAll(P => Examenes.Contains(P.v_ComponentId));


				foreach (var item in Lista)
				{
					var Valor = ValoresComponente(seviceId, item.v_ComponentId);

					if (item.v_ComponentId == Constants.TOXICOLOGICO_COLINESTERASA)
					{
						Resultado = Resultado + "COLINESTERASA                                            " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_COLINESTERASA_RESULTADO).v_Value1Name + "\n";
					}
					else if (item.v_ComponentId == Constants.TOXICOLOGICO_CARBOXIHEMOGLOBINA)
					{
						Resultado = Resultado + "CARBOXIHEMOGLOBINA                                      " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_CARBOXIHEMOGLOBINA_RESULTADO).v_Value1Name + "\n";
					}
					else if (item.v_ComponentId == Constants.TOXICOLOGICO_BENZODIAZEPINAS)
					{
						Resultado = Resultado + "BENZODIAZEPINAS                                          " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_BENZODIAZEPINAS_RESULTADO).v_Value1Name + "\n";
					}
					else if (item.v_ComponentId == Constants.TOXICOLOGICO_ALCOHOLEMIA)
					{
						Resultado = Resultado + "ALCOHOLEMIA                                              " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_ALCOHOLEMIA_RESULTADO).v_Value1Name + "\n";
					}
					else if (item.v_ComponentId == Constants.TOXICOLOGICO_ANFETAMINAS)
					{
						Resultado = Resultado + "ANFETAMINAS                                              " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_ANFETAMINAS_RESULTADO).v_Value1Name + "\n";
					}
					else if (item.v_ComponentId == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID)
					{
						Resultado = Resultado + "MARIHUANA                                                " + Valor.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA).v_Value1Name + "\n";
						Resultado = Resultado + "COCAINA                                                  " + Valor.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA).v_Value1Name + "\n";

					}
				}

				return Resultado;
			}
			catch (Exception)
			{

				throw;
			}






		}

		// Alberto
		public List<ReportEvaGinecologico> GetReportEvaluacionGinecologico(string pstrserviceId, string pstrComponentId)
		{

			string[] excludeComponents = {   Sigesoft.Common.Constants.GINECOLOGIA_ID,
												 Sigesoft.Common.Constants.EXAMEN_MAMA_ID,
												 Sigesoft.Common.Constants.ECOGRAFIA_MAMA_ID ,
												 Sigesoft.Common.Constants.PAPANICOLAU_ID,
												 Sigesoft.Common.Constants.RESULTADOS_MAMOGRAFIA_ID
											 };
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
								 from C1 in C1_join.DefaultIfEmpty()

								 join M in dbContext.systemparameter on new { a = B.i_TypeOfInsuranceId.Value, b = 188 }
									 equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
								 from M in M_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
								 from E in E_join.DefaultIfEmpty()


								 //join F in dbContext.component on new { a = E.v_ComponentId, b = 12 }
								 //                                       equals new { a = F.v_ComponentId, b = F.i_CategoryId.Value } into F_join
								 //from F in F_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join y in dbContext.person on me.v_PersonId equals y.v_PersonId


								 join I in dbContext.systemparameter on new { a = A.i_MacId.Value, b = 134 }
								   equals new { a = I.i_ParameterId, b = I.i_GroupId } into I_join
								 from I in I_join.DefaultIfEmpty()

								 join ccc in dbContext.diagnosticrepository on A.v_ServiceId equals ccc.v_ServiceId into ccc_join
								 from ccc in ccc_join.DefaultIfEmpty()  // ESO

								 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
								 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos


								 where A.v_ServiceId == pstrserviceId
								 select new ReportEvaGinecologico
								 {
									 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
									 Ficha = E.v_ServiceComponentId,
									 Historia = A.v_ServiceId,
									 NombreTrabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Seguro = M.v_Value1,
									 EmpresaCliente = D.v_Name,
									 EmpresaEmpleadora = C1.v_Name,
									 Medico = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,
									 FechaAtencion = A.d_ServiceDate.Value,
									 Fum = A.d_Fur.Value,
									 Gestapara = A.v_Gestapara,
									 MAC = I.v_Value1,
									 Menarquia = A.v_Menarquia,
									 RegimenCatamenial = A.v_CatemenialRegime,
									 CirugiaGinecologica = A.v_CiruGine,
									 FirmaDoctor = pme.b_SignatureImage,
									 FotoPaciente = B.b_PersonImage,
									 Diagnosticos = ddd.v_Name,
									 v_ComponentId = ccc.v_ComponentId

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let Gine = ValoresComponente(pstrserviceId, Constants.GINECOLOGIA_ID)


						   let ExamMama = ValoresComponente(pstrserviceId, Constants.EXAMEN_MAMA_ID)
						   let LogoEmpresa = GetLogoMedicalCenter()
						   //let ResultadoEcografiaMama = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_MAMA_ID)
						   let AntePersonales = ValoresComponente(pstrserviceId, Constants.ISTAS_21_ABREVIADA)

						   //let ResultadoPapanicolao = ValoresComponente(pstrserviceId, Constants.PAPANICOLAU_ID)
						   let GineAuxiliares = ValoresComponente(pstrserviceId, Constants.PAPANICOLAU_ID)
						   let ResultadoEcografia = ValoresComponente(pstrserviceId, Constants.RESULTADOS_MAMOGRAFIA_ID)
						   let ResultadoEcografiaMama = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_MAMA_ID)

						   select new ReportEvaGinecologico
						   {
							   v_ComponentId = a.v_ComponentId,
							   v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
							   Ficha = a.Ficha,
							   Historia = a.Historia,
							   Logo = LogoEmpresa,
							   NombreTrabajador = a.NombreTrabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   Seguro = a.Seguro,
							   EmpresaCliente = a.EmpresaCliente,
							   EmpresaEmpleadora = a.EmpresaEmpleadora,
							   CentroMedico = (from n in dbContext.organization
											   where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
											   select n.v_Name + ", " + n.v_Address).SingleOrDefault<string>(),
							   Medico = a.Medico,
							   FechaAtencion = a.FechaAtencion,
							   Fum = a.Fum,
							   Gestapara = a.Gestapara,
							   FechaPAP = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_GINECOLOGICA_ANTECEDENTES_FECHA_ULTIMO_PAP).v_Value1,
							   MAC = a.MAC,
							   Menarquia = a.Menarquia,
							   FechaMamografia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_GINECOLOGICA_ANTECEDENTES_FECHA_ULTIMA_MAMOGRAFIA).v_Value1,
							   RegimenCatamenial = a.RegimenCatamenial,
							   CirugiaGinecologica = a.CirugiaGinecologica,

							   Leucorrea = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_LEUCORREA).v_Value1,
							   LeucorreaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_LEUCORREA_COMENTARIO).v_Value1,

							   Dipareunia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_DISPAREUNIA).v_Value1,
							   DipareuniaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_DISPAREUNIA_COMENTARIO).v_Value1,

							   Incontinencia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_INCONTINENCIA_URINARIA).v_Value1,
							   IncontinenciaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_INCONTINENCIA_URINARIA_COMENTARIO).v_Value1,

							   Otros = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_OTROS).v_Value1,
							   OtrosDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_OTROS_COMENTARIO).v_Value1,

							   EvaluacionGinecologica = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_HALLAZGOS_HALLAZGOS).v_Value1,

							   ExamenMama = ExamMama.Count == 0 ? string.Empty : ExamMama.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_EX_MAMA_HALLAZGOS_HALLAZGOS).v_Value1.Replace("\n", " "),




							   ResultadoPAP = GineAuxiliares.Count == 0 ? "N/A" : GineAuxiliares.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_HALLAZGOS).v_Value1 == "" ? "" : GineAuxiliares.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_HALLAZGOS).v_Value1,
							   ResultadoMamografia = ResultadoEcografia.Count == 0 ? "N/A" : ResultadoEcografia.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_RADIOGRAFIA_HALLAZGOS).v_Value1 == "" ? "" : ResultadoEcografia.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_RADIOGRAFIA_HALLAZGOS).v_Value1,
							   ResultadoMama = ResultadoEcografiaMama.Count == 0 ? "N/A" : ResultadoEcografiaMama.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_DE_ECOGRAFIA_HALLAZGOS).v_Value1 == "" ? "" : ResultadoEcografiaMama.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_DE_ECOGRAFIA_HALLAZGOS).v_Value1,






							   Diagnosticos = a.Diagnosticos,
							   Recomendaciones = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),

							   FotoPaciente = a.FotoPaciente,
							   FirmaDoctor = a.FirmaDoctor,
							   AntecedentesPersonales = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_ANTECEDENTES_PERSONALES_ANTECEDENTES).v_Value1,

							   AntecendentesFamiliares = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_ANTECEDENTES_FAMILIARES).v_Value1,


							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				var otherExams = sql.FindAll(p => excludeComponents.Contains(p.v_ComponentId));


				return otherExams;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportInformeEspirometria> GetReportInformeEspirometria(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

								 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 join SP1 in dbContext.datahierarchy on new { a = D.i_SectorTypeId.Value, b = 104 }
										equals new { a = SP1.i_ItemId, b = SP1.i_GroupId } into SP1_join
								 from SP1 in SP1_join.DefaultIfEmpty()

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on B.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************  

								 where A.v_ServiceId == pstrserviceId
								 select new ReportInformeEspirometria
								 {
									 EspirometriaNro = B.v_ServiceComponentId,
									 Fecha = A.d_ServiceDate.Value,
									 HCL = A.v_ServiceId,
									 i_TipoEvaluacion = C.i_MasterServiceTypeId.Value,
									 RazonSocial = D.v_Name,
									 ActividadEconomica = SP1.v_Value1,
									 PuestoTrabajo = E.v_CurrentOccupation,
									 NombreTrabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
									 FechaNacimiento = E.d_Birthdate.Value,
									 i_Sexo = E.i_SexTypeId.Value,
									 FirmaRealizaEspirometria = ptec.b_SignatureImage,
									 FirmaMedicoInterpreta = pme.b_SignatureImage
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let nameMedicalCenter = GetNameMedicalCenter()
						   let Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID)
						   let age = GetAge(a.FechaNacimiento.Value)
						   let Antropometria = ValoresComponente(pstrserviceId, Constants.ANTROPOMETRIA_ID)

						   let DxEspirometria = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.ESPIROMETRIA_ID)
						   select new ReportInformeEspirometria
						   {
							   Logo = MedicalCenter.b_Image,
							   EspirometriaNro = a.EspirometriaNro,
							   Fecha = a.Fecha,
							   HCL = a.HCL,
							   TipoEvaluacion = a.i_TipoEvaluacion.ToString(),
							   LugarExamen = nameMedicalCenter,
							   RazonSocial = a.RazonSocial,
							   ActividadEconomica = a.ActividadEconomica,
							   PuestoTrabajo = a.PuestoTrabajo,
							   TiempoTrabajo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_TIEMPO_TRABAJO_ID).v_Value1,
							   NombreTrabajador = a.NombreTrabajador,
							   Edad = age,
							   Sexo = a.i_Sexo.ToString(),
							   Talla = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID).v_Value1,
							   Peso = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID).v_Value1,
							   OrigenEtnico = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ORIGEN_ETNICO).v_Value1,
							   FumadorSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_TABAQUISMO).v_Value1,
							   CVF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_CVF).v_Value1,
							   VEF1 = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_VEF_1).v_Value1,
							   FET = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_FET).v_Value1,
							   PEF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_PEF).v_Value1,
							   CVFDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_CVF).v_Value1,
							   VEF1CVFDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_VEF_1_CVF).v_Value1,
							   FETDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_FET).v_Value1,
							   FEV2575Des = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_F_25_75).v_Value1,
							   EdadPulmonar = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_EDAD_PULMONAR_ESTIMADA).v_Value1,
							   Resultado = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_RESULTADO_ID).v_Value1,
							   Observacion = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_OBSERVACION_ID).v_Value1,
							   FirmaRealizaEspirometria = a.FirmaRealizaEspirometria,
							   FirmaMedicoInterpreta = a.FirmaMedicoInterpreta,
							   Dx = DxEspirometria,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		// Alberto
		public List<ReportCuestionarioEspirometria> GetReportCuestionarioEspirometria(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
								 from B in B_join.DefaultIfEmpty()


								 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join I in dbContext.systemparameter on new { a = C.i_EsoTypeId.Value, b = 118 }
													equals new { a = I.i_ParameterId, b = I.i_GroupId } into I_join
								 from I in I_join.DefaultIfEmpty()


								 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
								 from D in D_join.DefaultIfEmpty()

								 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
								 from E in E_join.DefaultIfEmpty()

								 join SP1 in dbContext.systemparameter on new { a = D.i_SectorTypeId.Value, b = 104 }
										equals new { a = SP1.i_ParameterId, b = SP1.i_GroupId } into SP1_join
								 from SP1 in SP1_join.DefaultIfEmpty()

                                 join SP2 in dbContext.datahierarchy on new { a = D.i_SectorTypeId.Value, b = 104 }
                                        equals new { a = SP2.i_ItemId, b = SP2.i_GroupId } into SP2_join
                                 from SP2 in SP2_join.DefaultIfEmpty()

								 join F in dbContext.servicecomponentmultimedia on B.v_ServiceComponentId equals F.v_ServiceComponentId into F_join
								 from F in F_join.DefaultIfEmpty()

								 join G in dbContext.multimediafile on F.v_MultimediaFileId equals G.v_MultimediaFileId into G_join
								 from G in G_join.DefaultIfEmpty()

								 join F1 in dbContext.systemuser on B.i_ApprovedUpdateUserId equals F1.i_SystemUserId into F1_join
								 from F1 in F1_join.DefaultIfEmpty()

								 join Z in dbContext.person on F1.v_PersonId equals Z.v_PersonId into Z_join
								 from Z in Z_join.DefaultIfEmpty()

								 join D1 in dbContext.organization on C.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
								 from D1 in D1_join.DefaultIfEmpty()

                                 join D2 in dbContext.organization on C.v_EmployerOrganizationId equals D2.v_OrganizationId into D2_join
								 from D2 in D2_join.DefaultIfEmpty()
                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join pme in dbContext.professional on F1.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                
								 where A.v_ServiceId == pstrserviceId
								 && (G.i_IsDeleted == 0 || G.i_IsDeleted == null)
								 select new ReportCuestionarioEspirometria
								 {
									 EmpresaCliente = D1.v_Name,
									 IdServicio = A.v_ServiceId,
                                     ServiceComponentId = B.v_ServiceComponentId,
									 Fecha = A.d_ServiceDate.Value,
									 NombreTrabajador = E.v_FirstLastName + " " + E.v_SecondLastName + " " + E.v_FirstName,
									 FechaNacimineto = E.d_Birthdate,
									 Genero = E.i_SexTypeId.Value,
									 FirmaTrabajador = E.b_RubricImage,
									 HuellaTrabajador = E.b_FingerPrintImage,
									 b_File = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 Dni = E.v_DocNumber,
									 TipoExamen = I.v_Value1,
                                     TipoEso = C.i_EsoTypeId.Value,
                                     EmpresaContratista = D2.v_Name,
                                     RazonSocial = D.v_Name,
                                     //ActividadEconomica = SP2.v_Value1,
                                     PuestoTrabajo = E.v_CurrentOccupation,
                                     LogoCliente = D1.b_Image
								 });

				var MedicalCenter = GetInfoMedicalCenter();
			    var Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID);
			    var FuncionesVitales = ValoresComponente(pstrserviceId, Constants.FUNCIONES_VITALES_ID);
			    var Antropometria = ValoresComponente(pstrserviceId, Constants.ANTROPOMETRIA_ID);
			    var LogoEmpresa = GetLogoMedicalCenter();
				var sql = (from a in objEntity.ToList()

						
						   select new ReportCuestionarioEspirometria
						   {
							   EmpresaCliente = a.EmpresaCliente,
                               EmpresaContratista = a.EmpresaContratista,
							   IdServicio = a.IdServicio,
                               ServiceComponentId = a.ServiceComponentId,
                               TipoEso = a.TipoEso,
                               Fecha =  a.Fecha,
							   Fecha_S = a.Fecha.Value.ToString("dd/MM/yyyy"),
							   NombreTrabajador = a.NombreTrabajador,
							   FechaNacimineto_S = a.FechaNacimineto.Value.ToString("dd/MM/yyyy"),
                               RazonSocial = a.RazonSocial,
                               ActividadEconomica = MedicalCenter.v_SectorName,
                               PuestoTrabajo = a.PuestoTrabajo,
                               LogoCliente = a.LogoCliente,
                               TiempoTrabajo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_TIEMPO_TRABAJO_ID).v_Value1,
							   Edad = GetAge(a.FechaNacimineto.Value),
							   Logo = LogoEmpresa,
							   b_File = a.b_File,
							   Dni = a.Dni,
							   Pregunta1ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_1).v_Value1,
							   Pregunta2ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_2).v_Value1,
							   Pregunta3ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_3).v_Value1,
							   Pregunta4ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_4).v_Value1,
							   Pregunta5ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_5).v_Value1,

							   HemoptisisSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.PIROMETRIA_ANTECEDENTES_HEMOSTISIS).v_Value1,
							   PseumotoraxSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_PNEUMOTORAX).v_Value1,
							   TraqueostomiaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_TRAQUEOSTOMIA).v_Value1,
							   SondaPleuralSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_SONDA_PLEURAL).v_Value1,
							   AneurismaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_ANEURISMA_CEREBRAL).v_Value1,
							   EmboliaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBOLIA_PULMONAR).v_Value1,
							   InfartoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_INFARTO_RECIENTE).v_Value1,
							   InestabilidadSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_INESTABILIDAD_CV).v_Value1,
							   FiebreSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_FIEBRE_NAUSEAS).v_Value1,
							   EmbarazoAvanzadoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBARAZO_AVANZADO).v_Value1,
							   EmbarazoComplicadoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBARAZO_COMPLICADO).v_Value1,

                               Pregunta1BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESESPIROMETRIA_CUESTIONARIO_PARA_1) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESESPIROMETRIA_CUESTIONARIO_PARA_1).v_Value1,
                               Pregunta2BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_2) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_2).v_Value1,
                               Pregunta3BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_3) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_3).v_Value1,
                               Pregunta4BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_4) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_4).v_Value1,
                               Pregunta5BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_5) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_5).v_Value1,
                               Pregunta6BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_6) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_6).v_Value1,
                               Pregunta7BSiNo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_7) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_7).v_Value1,


                               FVC = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_CVF) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_CVF).v_Value1,
                               FVCDes = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_FVC) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_FVC).v_Value1,
                              
                               VEF1 = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_VEF_1) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_VEF_1).v_Value1,
                               VEF1Des = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_DES_VEF_1) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_DES_VEF_1).v_Value1,

                               PEF = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_PEF) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_PEF).v_Value1,
                               PEFDes = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_DES_PEF) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_DES_PEF).v_Value1,
                             
                               FER = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_FET) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_FET).v_Value1,
                               FERDes = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_FER) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_FER).v_Value1,
                               
                               F25 = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_FEF_25_75) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_FEF_25_75).v_Value1,
                               F25Des = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_F_25) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_F_25).v_Value1,
                              
                               F50 = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_F_50) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_F_50).v_Value1,
                               F50Des = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_F_50) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_F_50).v_Value1,
                               
                               MEF = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_MEF) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_MEF).v_Value1,
                               MEFDes = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_MEF) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_MEF).v_Value1,
                              
                               R50 = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_F_50) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_F_50).v_Value1,
                               R50Des = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_R_50) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_R_50).v_Value1,
                              
                               MVV = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_MVV) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_MVV).v_Value1,
                               MVVDes = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_MVV) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_MVV).v_Value1,

                               Normal = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_Normal) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_Normal).v_Value1,
                               SindromeRestrictivo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_SindromeRestrictivo) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_SindromeRestrictivo).v_Value1,
                               SindromeObtructivo = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_SindromeObtructivo) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_SindromeObtructivo).v_Value1,
                               Observacion = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_Observacion) == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_Observacion).v_Value1,


                               FrecuenciaCardiaca = FuncionesVitales.Count() == 0 || FuncionesVitales.Find(p => p.v_ComponentFieldId == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID) == null ? string.Empty : FuncionesVitales.Find(p => p.v_ComponentFieldId == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID).v_Value1,
                               Talla = Antropometria.Count() == 0 || Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID) == null ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID).v_Value1,
                               Peso = Antropometria.Count() == 0 || Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID) == null ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID).v_Value1,
                               ComentarioPrueba =  Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == "N009-MF000003135") == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N009-MF000003135").v_Value1,
                               Caucasico = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == "N009-MF000000622") == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N009-MF000000622").v_Value1,
                               Fumador = Espirometria.Count() == 0 || Espirometria.Find(p => p.v_ComponentFieldId == "N009-MF000000623") == null ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == "N009-MF000000623").v_Value1,
                               Genero = a.Genero,
							   //FirmaTrabajador = a.FirmaTrabajador == null ? GetFirma("") : a.FirmaTrabajador,
                               
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   TipoExamen = a.TipoExamen,


						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}


		//Obtener Imagen Firma de Carpeta

		private byte[] GetFirma(string Dni)
		{
			//Bitmap bitmap = new Bitmap(@"E:\FirmaHuella\23227210_Firma.jpg");
		  
			byte[] imageArray = System.IO.File.ReadAllBytes(@"E:\FirmaHuella\23227210_Firma.jpg");
			return imageArray;

		}



		//Alejandro
		public List<DiagnosticsByAgeGroup> ReportDiagnosticsByAgeGroup(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string ageGroupText, int top)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query
					var MedicalCenter = GetInfoMedicalCenter();
					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()


									join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
									from G in G_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
									where (dr.i_FinalQualificationId == definitivo ||
										  dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId into go_join
									from go in go_join.DefaultIfEmpty()

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByAgeGroup
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
										FechaNacimiento = B.d_Birthdate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										EmpresaCliente = G.v_Name,
										LogoCliente = G.b_Image,
										EmpresaPropietaria = MedicalCenter.v_Name,
										LogoPropietaria = MedicalCenter.b_Image

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };


					var sql = (from a in objEntity.AsEnumerable()

							   let age = GetAge(a.FechaNacimiento.Value)
							   let ageGroup = GetGrupoEtario(age)

							   where !excludeDx.Contains(a.v_DiseasesId)
							   select new DiagnosticsByAgeGroup
							   {
								   //IdServicio = a.IdServicio,
								   //IdProtocolId = a.IdProtocolId,
								   //IdTrabajador = a.IdTrabajador,
								   //Trabajador = a.Trabajador,
								   GrupoEtario = ageGroup,

								   //FechaNacimiento = g.Key.FechaNacimiento,
								   //EdadTrabajador = age,

								   //GeneroTrabajador = a.GeneroTrabajador,
								   //v_DiseasesId = a.v_DiseasesId,
								   v_DiseasesName = a.v_DiseasesName,

								   //EmpresaCliente = a.EmpresaCliente,
								   //LogoCliente = a.LogoCliente,
								   //EmpresaPropietaria = a.EmpresaPropietaria,
								   //LogoPropietaria = a.LogoPropietaria

							   });

					List<DiagnosticsByAgeGroup> gg = new List<DiagnosticsByAgeGroup>();

					if (!string.IsNullOrEmpty(ageGroupText))
					{
						gg = (from a in sql
							  group a by new { a.v_DiseasesName, a.GrupoEtario } into g
							  where g.Key.GrupoEtario == ageGroupText.Trim()
							  select new DiagnosticsByAgeGroup
							  {
								  GrupoEtario = g.Key.GrupoEtario,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  CantTrabajador = g.Count()
							  }).ToList();
					}
					else
					{
						gg = (from a in sql
							  group a by new { a.v_DiseasesName, a.GrupoEtario } into g
							  select new DiagnosticsByAgeGroup
							  {
								  GrupoEtario = g.Key.GrupoEtario,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  CantTrabajador = g.Count()
							  }).ToList();
					}

					return gg.Take(top).OrderByDescending(p => p.CantTrabajador).ToList();

				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//alberto
		public List<DiagnosticsByAgeGroup> ReportDiagnosticsByAgeGroupDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string ageGroupText, int top)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query
					var MedicalCenter = GetInfoMedicalCenter();
					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()


									join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
									from G in G_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
									where (dr.i_FinalQualificationId == definitivo ||
										  dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId into go_join
									from go in go_join.DefaultIfEmpty()

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByAgeGroup
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
										FechaNacimiento = B.d_Birthdate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										EmpresaCliente = G.v_Name,
										LogoCliente = G.b_Image,
										EmpresaPropietaria = MedicalCenter.v_Name,
										LogoPropietaria = MedicalCenter.b_Image

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };


					var sql = (from a in objEntity.AsEnumerable()

							   let age = GetAge(a.FechaNacimiento.Value)
							   let ageGroup = GetGrupoEtario(age)

							   where !excludeDx.Contains(a.v_DiseasesId)
							   select new DiagnosticsByAgeGroup
							   {
								   //IdServicio = a.IdServicio,
								   //IdProtocolId = a.IdProtocolId,
								   //IdTrabajador = a.IdTrabajador,
								   Trabajador = a.Trabajador,
								   GrupoEtario = ageGroup,

								   //FechaNacimiento = g.Key.FechaNacimiento,
								   //EdadTrabajador = age,

								   //GeneroTrabajador = a.GeneroTrabajador,
								   //v_DiseasesId = a.v_DiseasesId,
								   v_DiseasesName = a.v_DiseasesName,

								   //EmpresaCliente = a.EmpresaCliente,
								   //LogoCliente = a.LogoCliente,
								   //EmpresaPropietaria = a.EmpresaPropietaria,
								   //LogoPropietaria = a.LogoPropietaria

							   });

					List<DiagnosticsByAgeGroup> gg = new List<DiagnosticsByAgeGroup>();

					if (!string.IsNullOrEmpty(ageGroupText))
					{
						gg = (from a in sql
							  group a by new { a.v_DiseasesName, a.GrupoEtario, a.Trabajador, a.v_DiseasesId } into g
							  where g.Key.GrupoEtario == ageGroupText.Trim()
							  select new DiagnosticsByAgeGroup
							  {
								  GrupoEtario = g.Key.GrupoEtario,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  CantTrabajador = g.Count(),
								  Trabajador = g.Key.Trabajador,
								  v_DiseasesId = g.Key.v_DiseasesId
							  }).ToList();
					}
					else
					{
						gg = (from a in sql
							  group a by new { a.v_DiseasesName, a.GrupoEtario, a.Trabajador, a.v_DiseasesId } into g
							  select new DiagnosticsByAgeGroup
							  {
								  GrupoEtario = g.Key.GrupoEtario,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  CantTrabajador = g.Count(),
								  Trabajador = g.Key.Trabajador,
								  v_DiseasesId = g.Key.v_DiseasesId
							  }).ToList();
					}

					return gg.OrderByDescending(p => p.CantTrabajador).ToList();

				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Alberto

		public List<CebeceraReporte> CabeceraReporte(string IdEmpresaCiente)
		{
			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var MedicalCenter = GetInfoMedicalCenter();
					var objEntity = (from A in dbContext.organization
									 where A.v_OrganizationId == IdEmpresaCiente
									 select new CebeceraReporte
									 {
										 Empresacliente = A.v_Name,
										 LogoCliente = A.b_Image,
										 EmpresaPropietaria = MedicalCenter.v_Name,
										 LogoPropietaria = MedicalCenter.b_Image
									 }).ToList();

					return objEntity;
				}

			}
			catch (Exception)
			{

				throw;
			}
		}




		//Alejandro
		public List<DiagnosticsByGender> ReportDiagnosticsByGender(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query
					var MedicalCenter = GetInfoMedicalCenter();
					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
									from G in G_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByGender
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
										FechaNacimiento = B.d_Birthdate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "Masculino" : "Femenino",
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										i_SexTypeId = B.i_SexTypeId,

										EmpresaCliente = G.v_Name,
										LogoCliente = G.b_Image,
										EmpresaPropietaria = MedicalCenter.v_Name,
										LogoPropietaria = MedicalCenter.b_Image

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					var gg = (from a in objEntity.AsEnumerable()
							  //, a.EmpresaCliente, a.LogoCliente, a.EmpresaPropietaria, a.LogoPropietaria
							  group a by new { a.v_DiseasesName, a.GeneroTrabajador } into g
							  //where g.Key.GrupoEtario == ageGroupText
							  select new DiagnosticsByGender
							  {
								  GeneroTrabajador = g.Key.GeneroTrabajador,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  NroHallazgos = g.Count(),
								  //LogoCliente = g.Key.LogoCliente,
								  //EmpresaPropietaria = g.Key.EmpresaPropietaria,
								  //LogoPropietaria = g.Key.LogoPropietaria

							  }).ToList();


					return gg.Take(top).OrderByDescending(p => p.NroHallazgos).ToList();
				}
			}
			catch (Exception)
			{

				throw;
			}
		}


		public List<DiagnosticsByGender> ReportDiagnosticsByGenderDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query
					var MedicalCenter = GetInfoMedicalCenter();
					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
									from G in G_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByGender
									{
										IdServicio = A.v_ServiceId,
										IdProtocolId = A.v_ProtocolId,
										IdTrabajador = B.v_PersonId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
										FechaNacimiento = B.d_Birthdate.Value,
										GeneroTrabajador = B.i_SexTypeId == 1 ? "Masculino" : "Femenino",
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										i_SexTypeId = B.i_SexTypeId,

										EmpresaCliente = G.v_Name,
										LogoCliente = G.b_Image,
										EmpresaPropietaria = MedicalCenter.v_Name,
										LogoPropietaria = MedicalCenter.b_Image

									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					var gg = (from a in objEntity.AsEnumerable()
							  group a by new { a.v_DiseasesName, a.GeneroTrabajador, a.Trabajador, a.v_DiseasesId } into g
							  //where g.Key.GrupoEtario == ageGroupText
							  select new DiagnosticsByGender
							  {
								  GeneroTrabajador = g.Key.GeneroTrabajador,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  NroHallazgos = g.Count(),
								  Trabajador = g.Key.Trabajador,
								  v_DiseasesId = g.Key.v_DiseasesId
							  }).ToList();

					//var max = gg.Max(p => p.NroHallazgos);


					return gg.OrderByDescending(p => p.NroHallazgos).ToList();
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Alejandro
		public List<DiagnosticsByGroupOccupation> ReportDiagnosticsByGroupOccupation(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
		{

			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByGroupOccupation
									{
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										v_GroupOccupationName = go.v_Name,
										v_GroupOccupationId = go.v_GroupOccupationId,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = A.v_ProtocolId
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					var gg = (from a in objEntity.AsEnumerable()
							  group a by new { a.v_DiseasesName, a.v_GroupOccupationName } into g
							  select new DiagnosticsByGroupOccupation
							  {
								  v_GroupOccupationName = g.Key.v_GroupOccupationName,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  NroHallazgos = g.Count()
							  }).ToList();


					return gg.Take(top).OrderByDescending(p => p.NroHallazgos).ToList();
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Alberto
		public List<DiagnosticsByGroupOccupation> ReportDiagnosticsByGroupOccupationDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
		{

			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByGroupOccupation
									{
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										v_GroupOccupationName = go.v_Name,
										v_GroupOccupationId = go.v_GroupOccupationId,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = A.v_ProtocolId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));


					//var gg = (from a in objEntity.AsEnumerable()
					//          group a by new { a.v_DiseasesName, a.GeneroTrabajador, a.Trabajador, a.v_DiseasesId } into g
					//          //where g.Key.GrupoEtario == ageGroupText
					//          select new DiagnosticsByGender
					//          {
					//              GeneroTrabajador = g.Key.GeneroTrabajador,
					//              v_DiseasesName = g.Key.v_DiseasesName,
					//              NroHallazgos = g.Count(),
					//              Trabajador = g.Key.Trabajador,
					//              v_DiseasesId = g.Key.v_DiseasesId
					//          }).ToList();


					//var gg = (from a in objEntity.AsEnumerable()
					//          group a by new { a.v_DiseasesName, a.v_GroupOccupationName, a.Trabajador, a.v_DiseasesId } into g
					//          select new DiagnosticsByGroupOccupation
					//          {
					//              v_GroupOccupationName = g.Key.v_GroupOccupationName,
					//              v_DiseasesName = g.Key.v_DiseasesName,
					//              NroHallazgos = g.Count(),
					//              Trabajador = g.Key.Trabajador,
					//              v_DiseasesId = g.Key.v_DiseasesId
					//          }).ToList();


					//return gg.OrderByDescending(p => p.NroHallazgos).ToList();
					return objEntity.ToList();
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Alejandro
		public List<DiagnosticsByOffice> ReportDiagnosticsByOffice(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top, string[] componentId)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

									join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

									join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
																	equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
									from cat in cat_join.DefaultIfEmpty()

									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByOffice
									{
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										v_ComponentId = office.v_ComponentId,
										v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = A.v_ProtocolId
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					if (componentId != null)
					{
						objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					var gg = (from a in objEntity.AsEnumerable()
							  group a by new { a.v_DiseasesName, a.v_ComponentName } into g

							  select new DiagnosticsByOffice
							  {
								  v_ComponentName = g.Key.v_ComponentName,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  NroHallazgos = g.Count()
							  }).ToList();

					var dd = gg.OrderByDescending(o => o.NroHallazgos).ToList();
					var od = dd.Take(top).ToList();

					return od;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}


		//Alberto
		public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetalle(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top, string[] componentId)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

									join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

									join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
																	equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
									from cat in cat_join.DefaultIfEmpty()

									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByOffice
									{
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										v_ComponentId = office.v_ComponentId,
										v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = A.v_ProtocolId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					if (componentId != null)
					{
						objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					var gg = (from a in objEntity.AsEnumerable()
							  group a by new { a.v_DiseasesName, a.v_ComponentName, a.Trabajador, a.v_DiseasesId } into g

							  select new DiagnosticsByOffice
							  {
								  v_ComponentName = g.Key.v_ComponentName,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  NroHallazgos = g.Count(),
								  Trabajador = g.Key.Trabajador,
								  v_DiseasesId = g.Key.v_DiseasesId
							  }).ToList();

					var dd = gg.OrderByDescending(o => o.NroHallazgos).ToList();
					//var od = dd.Take(top).ToList();

					return gg;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//Alejandro
		public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetail(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string[] componentId)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

									join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

									join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
																	equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
									from cat in cat_join.DefaultIfEmpty()

									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByOffice
									{
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										v_ComponentId = office.v_ComponentId,
										v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = A.v_ProtocolId
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					if (componentId != null)
					{
						objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					var gg = (from a in objEntity.AsEnumerable()
							  group a by new { a.v_DiseasesName, a.v_ComponentName } into g
							  select new DiagnosticsByOffice
							  {
								  v_ComponentName = g.Key.v_ComponentName,
								  v_DiseasesName = g.Key.v_DiseasesName,
								  NroHallazgos = g.Count()
							  }).ToList();


					return gg;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}


		//Alberto
		public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetailDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string[] componentId)
		{


			int isDeleted = (int)SiNo.NO;
			int definitivo = (int)FinalQualification.Definitivo;
			int presuntivo = (int)FinalQualification.Presuntivo;

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

									join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

									join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
																	equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
									from cat in cat_join.DefaultIfEmpty()

									where (dr.i_FinalQualificationId == definitivo ||
										   dr.i_FinalQualificationId == presuntivo) &&
										  (dr.i_IsDeleted == isDeleted)

									join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
									from disea in disea_join.DefaultIfEmpty()

									where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

									select new DiagnosticsByOffice
									{
										v_DiseasesId = disea.v_DiseasesId,
										v_DiseasesName = disea.v_Name,
										v_ComponentId = office.v_ComponentId,
										v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = A.v_ProtocolId,
										Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					if (componentId != null)
					{
						objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
					}

					#endregion

					// discriminar los dx que expresan normalidad
					// NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

					string[] excludeDx = new[] { "N002-DD000000145", "N009-DD000000181", "N009-DD000000190" };
					objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

					//var gg = (from a in objEntity.AsEnumerable()
					//          group a by new { a.v_DiseasesName, a.v_ComponentName } into g
					//          select new DiagnosticsByOffice
					//          {
					//              v_ComponentName = g.Key.v_ComponentName,
					//              v_DiseasesName = g.Key.v_DiseasesName,
					//              NroHallazgos = g.Count()
					//          }).ToList();


					return objEntity.ToList();
				}
			}
			catch (Exception)
			{

				throw;
			}
		}


		//Alberto
		public List<ReportProduccionProfesional> ReporteProduccionProfesional(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression, string pstrUsuario, string pstrNombreUsuario, string pstrConsultorio, int pintCategoriaId, string EmpresaClienteCabecera)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
									from D in D_join.DefaultIfEmpty()

									join E in dbContext.servicecomponent on A.v_ServiceId equals E.v_ServiceId into E_join
									from E in E_join.DefaultIfEmpty()

									join F in dbContext.component on E.v_ComponentId equals F.v_ComponentId into F_join
									from F in F_join.DefaultIfEmpty()

									join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
									from G in G_join.DefaultIfEmpty()

									join lc in dbContext.location on new { a = C.v_CustomerOrganizationId, b = C.v_CustomerLocationId }
									equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
									from lc in lc_join.DefaultIfEmpty()


									join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
											  equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
									from J1 in J1_join.DefaultIfEmpty()

									join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
										   equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
									from J2 in J2_join.DefaultIfEmpty()

									join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
									   equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
									from J3 in J3_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 225 }
										   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()


									where E.d_ApprovedUpdateDate >= FechaInicio && E.d_ApprovedUpdateDate <= FechaFin

									select new ReportProduccionProfesional
									{
										v_CustomerOrganizationId = G.v_OrganizationId,
										NroAtencion = A.v_ServiceId,
										Fecha = A.d_ServiceDate.Value,
										FechaNacimiento = B.d_Birthdate.Value,
										Dni = B.v_DocNumber,
										Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
										Titular = B.v_OwnerName,
										EmpresaCliente = G.v_Name,
										EmpresaTrabajo = D.v_Name,
										i_ApprovedUpdateUserId = E.i_ApprovedUpdateUserId.Value,
										i_CategoryId = F.i_CategoryId.Value,
										v_PersonId = B.v_PersonId,
										v_ProtocoloId = A.v_ProtocolId,
										FechaInicio = FechaInicio.Value,
										FechaFin = FechaFin.Value,
										Parentesco = J4.v_Value1,
										v_CustomerLocationId = lc.v_LocationId
									};

					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					var sql = (from a in objEntity.ToList()
							   let age = GetAge(a.FechaNacimiento.Value)
							   let CostoProtocolo = GetServiceCost(a.NroAtencion)
							   let x = pstrUsuario
							   let xx = pstrNombreUsuario
							   let xxx = pstrConsultorio
							   let xxxx = EmpresaClienteCabecera
							   select new ReportProduccionProfesional
							   {
								   NroAtencion = a.NroAtencion,
								   Fecha = a.Fecha,
								   FechaNacimiento = a.FechaNacimiento,
								   Edad = age,
								   Dni = a.Dni,
								   Paciente = a.Paciente,
								   Titular = a.Titular,
								   EmpresaCliente = a.EmpresaCliente,
								   EmpresaTrabajo = a.EmpresaTrabajo,
								   CostoProtocolo = CostoProtocolo,
								   FechaInicio = a.FechaInicio,
								   FechaFin = a.FechaFin,
								   Usuario = x,
								   NombreUsuario = xx,
								   Consultorio = xxx,
								   Parentesco = a.Parentesco,
								   i_CategoryId = a.i_CategoryId,
								   v_PersonId = a.v_PersonId,
								   EmpresaClienteCabecera = xxxx
							   }).ToList();

					var objData = new List<ReportProduccionProfesional>();

					objData = sql.FindAll(s => s.i_CategoryId == pintCategoriaId)
												 .GroupBy(x => new { x.i_CategoryId, x.v_PersonId })
												 .Select(group => group.First())
												 .ToList();

					return objData;

				}


			}
			catch (Exception)
			{

				throw;
			}
		}

		//Alberto
		public List<ProduccionProfesional> ReporteProduccionProfesionalAMC(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					#region Prepare Query

					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
									from D in D_join.DefaultIfEmpty()

									join E in dbContext.servicecomponent on A.v_ServiceId equals E.v_ServiceId into E_join
									from E in E_join.DefaultIfEmpty()

									join F in dbContext.component on E.v_ComponentId equals F.v_ComponentId into F_join
									from F in F_join.DefaultIfEmpty()

									join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
									from G in G_join.DefaultIfEmpty()

									// Usuario Medico Evaluador / Medico Aprobador ****************************
									join H in dbContext.systemuser on E.i_ApprovedUpdateUserId equals H.i_SystemUserId into H_join
									from H in H_join.DefaultIfEmpty()



									join lc in dbContext.location on new { a = C.v_CustomerOrganizationId, b = C.v_CustomerLocationId }
									equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
									from lc in lc_join.DefaultIfEmpty()


									join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
											  equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
									from J1 in J1_join.DefaultIfEmpty()

									join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
										   equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
									from J2 in J2_join.DefaultIfEmpty()

									join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
									   equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
									from J3 in J3_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 225 }
										   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()

									join J5 in dbContext.systemparameter on new { a = F.i_CategoryId.Value, b = 116 }
										  equals new { a = J5.i_ParameterId, b = J5.i_GroupId } into J5_join
									from J5 in J5_join.DefaultIfEmpty()

									where E.d_ApprovedUpdateDate >= FechaInicio && E.d_ApprovedUpdateDate <= FechaFin

									select new ReportProduccionProfesional
									{
										v_CustomerOrganizationId = G.v_OrganizationId,
										NroAtencion = A.v_ServiceId,
										Fecha = A.d_ServiceDate.Value,
										FechaNacimiento = B.d_Birthdate.Value,
										Dni = B.v_DocNumber,
										Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
										Titular = B.v_OwnerName,
										EmpresaCliente = G.v_Name,
										EmpresaTrabajo = D.v_Name,
										i_ApprovedUpdateUserId = E.i_ApprovedUpdateUserId.Value,
										i_CategoryId = F.i_CategoryId.Value,
										v_PersonId = B.v_PersonId,
										v_ProtocoloId = A.v_ProtocolId,
										FechaInicio = FechaInicio.Value,
										FechaFin = FechaFin.Value,
										Parentesco = J4.v_Value1,
										v_CustomerLocationId = lc.v_LocationId,
										NombreComponente = F.v_Name,
										Consultorio = J5.v_Value1,
										Usuario = H.v_UserName
									};

					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					#endregion

					var sql = (from a in objEntity.ToList()
							   let age = GetAge(a.FechaNacimiento.Value)
							   let CostoProtocolo = GetServiceCost(a.NroAtencion)
							   select new ReportProduccionProfesional
							   {
								   Usuario = a.Usuario,
								   Consultorio = a.Consultorio,

								   NroAtencion = a.NroAtencion,
								   Fecha = a.Fecha,
								   FechaNacimiento = a.FechaNacimiento,
								   Edad = age,
								   Dni = a.Dni,
								   Paciente = a.Paciente,
								   Parentesco = a.Parentesco,
								   Titular = a.Titular,
								   EmpresaCliente = a.EmpresaCliente,
								   EmpresaTrabajo = a.EmpresaTrabajo,
								   CostoProtocolo = CostoProtocolo,


								   FechaInicio = a.FechaInicio,
								   FechaFin = a.FechaFin,
								   i_CategoryId = a.i_CategoryId,
								   v_PersonId = a.v_PersonId,
								   NombreComponente = a.NombreComponente


							   }).ToList();

					List<ReportProduccionProfesional> objData = sql.ToList();
					List<ReportProduccionProfesional> ListaDetalleAgrupada = sql.ToList();


					objData = sql.GroupBy(x => new { x.i_CategoryId, x.Usuario })
												 .Select(group => group.First())
												 .ToList();

					ListaDetalleAgrupada = sql.GroupBy(x => new { x.i_CategoryId, x.Paciente })
												.Select(group => group.First())
												.ToList();


					//Cargar la Cabecera
					List<ProduccionProfesional> Lista1 = new List<ProduccionProfesional>();
					ProduccionProfesional obj1;
					foreach (var item in objData)
					{
						obj1 = new ProduccionProfesional();
						obj1.Usuario = item.Usuario;
						obj1.Consultorio = item.Consultorio;


						//cARGAR dETALLE
						List<ProduccionProfesionalDetalle> Lista2 = new List<ProduccionProfesionalDetalle>();
						ProduccionProfesionalDetalle obj2;
						var ListaDetalle = ListaDetalleAgrupada.FindAll(p => p.Usuario == item.Usuario && p.Consultorio == item.Consultorio);
						if (ListaDetalle.Count != 0)
						{
							foreach (var item2 in ListaDetalle)
							{
								obj2 = new ProduccionProfesionalDetalle();
								obj2.Dni = item2.Dni;
								obj2.Fecha = item2.Fecha;
								obj2.NroAtencion = item2.NroAtencion;
								obj2.Paciente = item2.Paciente;
								obj2.CostoProtocolo = item2.CostoProtocolo;
								obj2.Edad = GetAge(item2.FechaNacimiento.Value);

								obj2.Parentesco = item2.Parentesco;
								obj2.Titular = item2.Titular;
								obj2.EmpresaCliente = item2.EmpresaCliente;
								obj2.EmpresaTrabajo = item2.EmpresaTrabajo;

								Lista2.Add(obj2);

							}
						}
						obj1.Total = ListaDetalle.Count();
						obj1.ProduccionProfesionalDetalle = Lista2;

						Lista1.Add(obj1);
					}


					////Cargar el detalle

					//List<ProduccionProfesionalDetalle> Lista2 = new List<ProduccionProfesionalDetalle>();
					//ProduccionProfesionalDetalle obj2;
					//foreach (var item in Lista1)
					//{

					//    var ListaDetalle = sql.FindAll(p => p.Usuario == item.Usuario && p.Consultorio == item.Consultorio);

					//    if (ListaDetalle.Count !=0)
					//    {
					//        foreach (var item2 in ListaDetalle)
					//        {
					//            obj2 = new ProduccionProfesionalDetalle();
					//            obj2.Dni = item2.Dni;
					//            obj2.Fecha = item2.Fecha;
					//            obj2.NroAtencion = item2.NroAtencion;
					//            obj2.Paciente = item2.Paciente;

					//            Lista2.Add(obj2);

					//        }
					//    }



					//}



					//objData.ForEach(a =>
					//    {
					//        a.ProduccionProfesionalDetalle = sql.ToList().FindAll(p => p.Usuario == a.Usuario && p.ConsultorioId == a.ConsultorioId);
					//    });


					return Lista1;

				}


			}
			catch (Exception)
			{

				throw;
			}
		}

		//float CalcularCostoProtocolo( string ServiceId, string PersonId, string ProtocoloId)
		//{
		//    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

		//    float CostoTotalProtocolo = 0;
		//    try
		//    {
		//        var ListaPrecioProtocolo = (from A in dbContext.service
		//                     join B in dbContext.protocolcomponent on A.v_ProtocolId equals B.v_ProtocolId

		//                     where A.v_ServiceId == ServiceId
		//                            && A.v_PersonId == PersonId
		//                            && A.v_ProtocolId == ProtocoloId
		//                     select new {

		//                         PrecioComponente = B.r_Price
		//                     });

		//        foreach (var item in ListaPrecioProtocolo)
		//        {
		//            CostoTotalProtocolo += item.PrecioComponente.Value;
		//        }
		//        return CostoTotalProtocolo;


		//    }
		//    catch (Exception)
		//    {

		//        throw;
		//    }
		//}
		#endregion

		#region Pre-Liquidation

		public void UpdateStatusPreLiquidation(ref OperationResult pobjOperationResult, int? status, string serviceId, List<string> ClientSession)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// UPDATE

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == serviceId
									   select a).FirstOrDefault();

				// Crear la entidad con los datos actualizados   
				// Total Diagnósticos
				objEntitySource.i_StatusLiquidation = status;

				//objEntitySource.d_UpdateDate = DateTime.Now;
				//objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

				// Guardar los cambios
				dbContext.SaveChanges();
				pobjOperationResult.Success = 1;
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICE / PRE-LIQUIDACIÓN", null, Success.Ok, null);
				return;
			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				// Llenar entidad Log
				LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICE / PRE-LIQUIDACIÓN", null, Success.Failed, pobjOperationResult.ExceptionMessage);
				return;
			}
		}

		#endregion

		#region Query Matriz



		public List<Antecedentes> DevolverTodosAntecedentes(DateTime? FeIni, DateTime? FeFin)
		{
			try
			{
				int isDeleted = (int)SiNo.NO;
				//Antecedentes Retornar;
				List<Antecedentes> ListaTotalJerarquizada = new List<Antecedentes>();
				Antecedentes ListaJerarquizadaAntecedentes = new Antecedentes();
				List<AntecedentesList> ListaAntecedentesPorPersona;

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{

					var ListaAntecedentesTodos = (from A in dbContext.personmedicalhistory
												  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
												  join E in dbContext.service on A.v_PersonId equals E.v_PersonId
												  where A.i_IsDeleted == 0
													  //&& A.v_PersonId == "N009-PP000000208"
														 && E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
												  orderby A.v_PersonId
												  select new AntecedentesList
												  {
													  PersonId = A.v_PersonId,
													  v_DiseasesName = D.v_Name,
													  d_StartDate = A.d_StartDate.Value,
													  Detalle_Dx = A.v_DiagnosticDetail,
													  Parentesco = "",
													  TipoAntecedente = "P"
												  }).Union(from A in dbContext.familymedicalantecedents
														   join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
														   join E in dbContext.service on A.v_PersonId equals E.v_PersonId

														   join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
															   equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
														   from J1 in J1_join.DefaultIfEmpty()

														   join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
															   equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
														   from J2 in J2_join.DefaultIfEmpty()

														   where A.i_IsDeleted == isDeleted
															   //&& A.v_PersonId == "N009-PP000000208"
																 && E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
														   orderby A.v_PersonId
														   select new AntecedentesList
														   {
															   PersonId = A.v_PersonId,
															   v_DiseasesName = D.v_Name,
															   d_StartDate = DateTime.Now,
															   Detalle_Dx = "",
															   Parentesco = J2.v_Value1,
															   TipoAntecedente = "F"
														   }).ToList();


					var ListaJerarquizada = (from A in dbContext.service
											 where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
											 //&& A.v_PersonId == "N009-PP000000208"
											 select new Antecedentes
											 {
												 PersonId = A.v_PersonId,
												 ServicioId = A.v_ServiceId
											 }).ToList();

					ListaJerarquizada.ForEach(a =>
					{
						a.ListaAntecendentes = ListaAntecedentesTodos.FindAll(p => p.PersonId == a.PersonId);
					});


					var ListaJerarquizadaGropBy = ListaJerarquizada.AsEnumerable()
						  .GroupBy(x => x.PersonId)
						  .Select(group => group.First());

					foreach (var item in ListaJerarquizadaGropBy)
					{
						ListaJerarquizadaAntecedentes = new Antecedentes();
						ListaAntecedentesPorPersona = new List<AntecedentesList>();
						ListaJerarquizadaAntecedentes.PersonId = item.PersonId;
						ListaJerarquizadaAntecedentes.ServicioId = item.ServicioId;


						var DetalleTodos = ListaJerarquizada.SelectMany(p => p.ListaAntecendentes).Distinct().ToList();

						//Antecedentes Personales
						var DetalleAntecPerson = DetalleTodos.FindAll(p => p.PersonId == item.PersonId && p.TipoAntecedente == "P");

						for (int i = 0; i < 6; i++)
						{
							if (i < DetalleAntecPerson.Count())
							{
								if (i == 5)
								{
									int Contador = DetalleAntecPerson.Count - 5;
									var x = DetalleAntecPerson.GetRange(5, Contador);

									DetalleAntecPerson[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.Value.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
									ListaAntecedentesPorPersona.Add(DetalleAntecPerson[i]);
								}
								else
								{
									DetalleAntecPerson[i].v_DiseasesName = DetalleAntecPerson[i].v_DiseasesName + " (" + DetalleAntecPerson[i].d_StartDate.Value.ToString("MM/yyyy") + ")";// + ", " + DetalleAntecPerson[i].Detalle_Dx;
									ListaAntecedentesPorPersona.Add(DetalleAntecPerson[i]);
								}
							}
							else
							{
								ListaAntecedentesPorPersona.Add(new AntecedentesList());
							}
						}


						//Antecedentes Familiares
						var DetalleAntecFami = DetalleTodos.FindAll(p => p.PersonId == item.PersonId && p.TipoAntecedente == "F");

						for (int i = 0; i < 5; i++)
						{
							if (i < DetalleAntecFami.Count())
							{
								if (i == 4)
								{
									int Contador = DetalleAntecFami.Count - 4;
									var y = DetalleAntecFami.GetRange(4, Contador);

									DetalleAntecFami[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
									ListaAntecedentesPorPersona.Add(DetalleAntecFami[i]);

								}
								else
								{
									DetalleAntecFami[i].v_DiseasesName = DetalleAntecFami[i].v_DiseasesName + " (" + DetalleAntecFami[i].Parentesco + ")";
									ListaAntecedentesPorPersona.Add(DetalleAntecFami[i]);
								}

							}
							else
							{
								ListaAntecedentesPorPersona.Add(new AntecedentesList());
							}
						}
						ListaJerarquizadaAntecedentes.ListaAntecendentes = ListaAntecedentesPorPersona;

						ListaTotalJerarquizada.Add(ListaJerarquizadaAntecedentes);
					}

					////5 Antecedentes Personales
					//var ListaAntcPersonales = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "P");

					//for (int i = 0; i < 6; i++)
					//{
					//    if (i < ListaAntcPersonales.Count())
					//    {
					//        if (i == 5)
					//        {
					//            int Contador = ListaAntcPersonales.Count - 5;
					//            var x = ListaAntcPersonales.GetRange(5, Contador);

					//            ListaAntcPersonales[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
					//            ListaAntecedentesPorPersona.Add(ListaAntcPersonales[i]);
					//        }
					//        else
					//        {
					//            ListaAntcPersonales[i].v_DiseasesName = ListaAntcPersonales[i].v_DiseasesName + " (" + ListaAntcPersonales[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + ListaAntcPersonales[i].Detalle_Dx;
					//            ListaAntecedentesPorPersona.Add(ListaAntcPersonales[i]);
					//        }
					//    }
					//    else
					//    {
					//        ListaAntecedentesPorPersona.Add(new AntecedentesList());
					//    }
					//}

					////4 Antecedentes Familiares
					//var ListaAntcFamiliares = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "F");

					//for (int i = 0; i < 5; i++)
					//{
					//    if (i < ListaAntcFamiliares.Count())
					//    {
					//        if (i == 4)
					//        {
					//            int Contador = ListaAntcFamiliares.Count - 4;
					//            var y = ListaAntcFamiliares.GetRange(4, Contador);

					//            ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
					//            ListaAntecedentesPorPersona.Add(ListaAntcFamiliares[i]);

					//        }
					//        else
					//        {
					//            ListaAntcFamiliares[i].v_DiseasesName = ListaAntcFamiliares[i].v_DiseasesName + " (" + ListaAntcFamiliares[i].Parentesco + ")";
					//            ListaAntecedentesPorPersona.Add(ListaAntcFamiliares[i]);
					//        }

					//    }
					//    else
					//    {
					//        ListaAntecedentesPorPersona.Add(new AntecedentesList());
					//    }
					//}

					return ListaTotalJerarquizada;
				}

			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<DiagnosticosRecomendaciones> DevolverJerarquiaDxRecomendaciones(DateTime? FeIni, DateTime? FeFin)
		{
			try
			{
				int isDeleted = (int)SiNo.NO;
				int definitivo = (int)FinalQualification.Definitivo;
				int presuntivo = (int)FinalQualification.Presuntivo;

				List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
				DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();
				List<DiagnosticosRecomendacionesList> ListaDxRecomendacionesPorServicio;

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
											join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
											from bbb in J7_join.DefaultIfEmpty()
											join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
											join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
											where (ccc.i_IsDeleted == isDeleted) &&
												(ccc.i_FinalQualificationId == definitivo ||
												ccc.i_FinalQualificationId == presuntivo)
											   && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
											orderby eee.v_ServiceId
											select new DiagnosticosRecomendacionesList
											{
												ServicioId = eee.v_ServiceId,
												Descripcion = ddd.v_Name,
												Tipo = "D"
											}).Union(from ccc in dbContext.recommendation
													 join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
													 join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
													 where ccc.i_IsDeleted == isDeleted
													  && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
													 orderby eee.v_ServiceId
													 select new DiagnosticosRecomendacionesList
															 {
																 ServicioId = eee.v_ServiceId,
																 Descripcion = ddd.v_Name,
																 Tipo = "R"
															 }).ToList();



					var ListaJerarquizada = (from A in dbContext.service
											 where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
											 select new DiagnosticosRecomendaciones
											 {
												 ServicioId = A.v_ServiceId
											 }).ToList();

					ListaJerarquizada.ForEach(a =>
					{
						a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
					});

					foreach (var item in ListaJerarquizada)
					{
						ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();
						ListaDxRecomendacionesPorServicio = new List<DiagnosticosRecomendacionesList>();

						ListaJerarquizadaDxRecomendaciones.ServicioId = item.ServicioId;


						var DetalleTodos = ListaJerarquizada.SelectMany(p => p.DetalleDxRecomendaciones).ToList();

						//Lista Dx
						var DetalleDx = DetalleTodos.FindAll(p => p.ServicioId == item.ServicioId && p.Tipo == "D");

						for (int i = 0; i < 8; i++)
						{
							if (i < DetalleDx.Count())
							{
								if (i == 7)
								{
									int Contador = DetalleDx.Count - 7;
									var x = DetalleDx.GetRange(7, Contador);

									DetalleDx[i].Descripcion = string.Join(", ", x.Select(p => p.Descripcion));
									ListaDxRecomendacionesPorServicio.Add(DetalleDx[i]);
								}
								else
								{
									DetalleDx[i].Descripcion = DetalleDx[i].Descripcion;
									ListaDxRecomendacionesPorServicio.Add(DetalleDx[i]);
								}
							}
							else
							{
								ListaDxRecomendacionesPorServicio.Add(new DiagnosticosRecomendacionesList());
							}
						}

						//Lista Recomendaciones
						var DetalleReco = DetalleTodos.FindAll(p => p.ServicioId == item.ServicioId && p.Tipo == "R");

						for (int i = 0; i < 14; i++)
						{
							if (i < DetalleReco.Count())
							{
								if (i == 13)
								{
									int Contador = DetalleReco.Count - 13;
									var x = DetalleReco.GetRange(13, Contador);

									DetalleReco[i].Descripcion = string.Join(", ", x.Select(p => p.Descripcion));
									ListaDxRecomendacionesPorServicio.Add(DetalleReco[i]);
								}
								else
								{
									DetalleReco[i].Descripcion = DetalleReco[i].Descripcion;
									ListaDxRecomendacionesPorServicio.Add(DetalleReco[i]);
								}
							}
							else
							{
								ListaDxRecomendacionesPorServicio.Add(new DiagnosticosRecomendacionesList());
							}
						}
						ListaJerarquizadaDxRecomendaciones.DetalleDxRecomendaciones = ListaDxRecomendacionesPorServicio;

						ListaTotalJerarquizada.Add(ListaJerarquizadaDxRecomendaciones);
					}
				}
				return ListaTotalJerarquizada;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<DiagnosticosRecomendaciones> DevolverJerarquiaDx(DateTime? FeIni, DateTime? FeFin)
		{
			try
			{
				int isDeleted = (int)SiNo.NO;
				int definitivo = (int)FinalQualification.Definitivo;
				int presuntivo = (int)FinalQualification.Presuntivo;

				List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
				DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
											join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
											from bbb in J7_join.DefaultIfEmpty()
											join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
											join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
											where (ccc.i_IsDeleted == isDeleted) &&
												(ccc.i_FinalQualificationId == definitivo ||
												ccc.i_FinalQualificationId == presuntivo)
											   && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
											orderby eee.v_ServiceId
											select new DiagnosticosRecomendacionesList
											{
												ServicioId = eee.v_ServiceId,
												Descripcion = ddd.v_Name,
												IdCampo = ccc.v_ComponentFieldId,
												Tipo = "D",
												IdComponente = bbb.v_ComponentId,
												IdDeseases = ddd.v_DiseasesId
											}).ToList();



					var ListaJerarquizada = (from A in dbContext.service
											 where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
											 select new DiagnosticosRecomendaciones
											 {
												 ServicioId = A.v_ServiceId
											 }).ToList();

					ListaJerarquizada.ForEach(a =>
					{
						a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
					});


					return ListaJerarquizada;
				}

			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<DiagnosticosRecomendaciones> DevolverJerarquiaDxMejorado(List<string> ServicioIds)
		{
			try
			{
				int isDeleted = (int)SiNo.NO;
				int definitivo = (int)FinalQualification.Definitivo;
				int presuntivo = (int)FinalQualification.Presuntivo;

				List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
				DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
											join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
											from bbb in J7_join.DefaultIfEmpty()
											join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
											join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
											where (ccc.i_IsDeleted == isDeleted) &&
												(ccc.i_FinalQualificationId == definitivo ||
												ccc.i_FinalQualificationId == presuntivo)
												&& ServicioIds.Contains(eee.v_ServiceId)
											//&& eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
											orderby eee.v_ServiceId
											select new DiagnosticosRecomendacionesList
											{
												ServicioId = eee.v_ServiceId,
												Descripcion = ddd.v_Name,
												IdCampo = ccc.v_ComponentFieldId,
												Tipo = "D",
												IdComponente = bbb.v_ComponentId,
												IdDeseases = ddd.v_DiseasesId
											}).ToList();



					var ListaJerarquizada = (from A in dbContext.service
											 where ServicioIds.Contains(A.v_ServiceId)
											 //A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
											 select new DiagnosticosRecomendaciones
											 {
												 ServicioId = A.v_ServiceId
											 }).ToList();

					ListaJerarquizada.ForEach(a =>
					{
						a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
					});


					return ListaJerarquizada;
				}

			}
			catch (Exception)
			{

				throw;
			}
		}
		//public List<AntecedentesList> DevolverTodosAntecedentes(string pstrPacientId)
		//{
		//    try
		//    {
		//        int isDeleted = (int)SiNo.NO;
		//        List<AntecedentesList> Retornar = new List<AntecedentesList>();

		//        using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
		//        {

		//            var query = (from A in dbContext.personmedicalhistory
		//                         join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
		//                         where A.i_IsDeleted == 0 && A.v_PersonId == pstrPacientId
		//                         select new AntecedentesList
		//                         {
		//                             v_DiseasesName = D.v_Name,
		//                             d_StartDate = A.d_StartDate.Value,
		//                             Detalle_Dx = A.v_DiagnosticDetail,
		//                             Parentesco = "",
		//                             TipoAntecedente ="P"
		//                         }).Union(from A in dbContext.familymedicalantecedents
		//                                  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

		//                                  join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
		//                                      equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
		//                                  from J1 in J1_join.DefaultIfEmpty()

		//                                  join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
		//                                      equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
		//                                  from J2 in J2_join.DefaultIfEmpty()

		//                                  where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId
		//                                  select new AntecedentesList
		//                                  {
		//                                      v_DiseasesName = D.v_Name,
		//                                      d_StartDate = DateTime.Now,
		//                                      Detalle_Dx = "",
		//                                      Parentesco = J2.v_Value1,
		//                                      TipoAntecedente = "F"
		//                                  }).ToList();


		//            //5 Antecedentes Personales
		//            var ListaAntcPersonales = query.FindAll(p => p.TipoAntecedente == "P");

		//                for (int i = 0; i < 6; i++)
		//                {
		//                    if (i < ListaAntcPersonales.Count())
		//                    {
		//                        if (i == 5)
		//                        {
		//                            int Contador = ListaAntcPersonales.Count - 5;
		//                            var x = ListaAntcPersonales.GetRange(5, Contador);

		//                            ListaAntcPersonales[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
		//                            Retornar.Add(ListaAntcPersonales[i]); 
		//                        }
		//                        else
		//                        {
		//                            ListaAntcPersonales[i].v_DiseasesName = ListaAntcPersonales[i].v_DiseasesName + " (" + ListaAntcPersonales[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + ListaAntcPersonales[i].Detalle_Dx;
		//                            Retornar.Add(ListaAntcPersonales[i]); 
		//                        }
		//                    }
		//                    else
		//                    {
		//                        Retornar.Add(new AntecedentesList());                                
		//                    }                            
		//                }

		//            //4 Antecedentes Familiares
		//                var ListaAntcFamiliares = query.FindAll(p => p.TipoAntecedente == "F");

		//                for (int i = 0; i < 5; i++)
		//                {
		//                    if (i < ListaAntcFamiliares.Count())
		//                    {
		//                        if (i == 4)
		//                        {
		//                            int Contador = ListaAntcFamiliares.Count - 4;
		//                            var y = ListaAntcFamiliares.GetRange(4, Contador);

		//                            ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
		//                            Retornar.Add(ListaAntcFamiliares[i]); 

		//                        }
		//                        else 
		//                        {
		//                            ListaAntcFamiliares[i].v_DiseasesName = ListaAntcFamiliares[i].v_DiseasesName + " (" + ListaAntcFamiliares[i].Parentesco + ")";
		//                            Retornar.Add(ListaAntcFamiliares[i]);
		//                        }

		//                    }
		//                    else
		//                    {
		//                        Retornar.Add(new AntecedentesList());
		//                    }
		//                }

		//                return Retornar;
		//        }

		//    }
		//    catch (Exception ex)
		//    {
		//        return null;
		//    }
		//}


		public List<JerarquiaServicioCamposValores> DevolverValorCampoPorServicio(DateTime? FechaIni, DateTime? FechaFin)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			int isDeleted = (int)SiNo.NO;

			try
			{
				int rpta = 0;
				var PreQuery = (from A in dbContext.service
								join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
								join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
								join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
								join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
								join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
								join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
								where
									//B.i_IsDeleted == isDeleted
									  C.i_IsDeleted == isDeleted
								  && A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni

								orderby A.v_ServiceId
								select new ValorComponenteList
								{
									ServicioId = A.v_ServiceId,
									Valor = D.v_Value1,
									NombreComponente = H.v_Name,
									IdComponente = H.v_ComponentId,
									NombreCampo = G.v_TextLabel,
									IdCampo = G.v_ComponentFieldId,
									i_GroupId = G.i_GroupId.Value
								}

							);

				var finalQuery = (from a in PreQuery.ToList()

								  let value1 = int.TryParse(a.Valor, out rpta)
								  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
												  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
								  from sp in sp_join.DefaultIfEmpty()

								  select new ValorComponenteList
								  {
									  ServicioId = a.ServicioId,
									  Valor = a.Valor,
									  NombreComponente = a.NombreComponente,
									  IdComponente = a.IdComponente,
									  NombreCampo = a.NombreCampo,
									  IdCampo = a.IdCampo,
									  ValorName = sp == null ? "" : sp.v_Value1
								  }).ToList();



				var ListaJerarquizada = (from A in dbContext.service
										 where A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
										 select new JerarquiaServicioCamposValores
										 {
											 ServicioId = A.v_ServiceId
										 }).ToList();

				ListaJerarquizada.ForEach(a =>
				{
					a.CampoValores = finalQuery.FindAll(p => p.ServicioId == a.ServicioId);
				});


				return ListaJerarquizada;
			}
			catch (Exception)
			{

				throw;
			}

		}

		public List<JerarquiaServicioCamposValores> DevolverValorCampoPorServicioMejorado(List<string> ListaServicioIds)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			int isDeleted = (int)SiNo.NO;

			try
			{
				int rpta = 0;
				var PreQuery = (from A in dbContext.service
								join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
								join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
								join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
								join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
								join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
								join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
								where B.i_IsDeleted == isDeleted
									 && C.i_IsDeleted == isDeleted
									 && ListaServicioIds.Contains(A.v_ServiceId)
								//&& A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni

								orderby A.v_ServiceId
								select new ValorComponenteList
								{
									ServicioId = A.v_ServiceId,
									Valor = D.v_Value1,
									NombreComponente = H.v_Name,
									IdComponente = H.v_ComponentId,
									NombreCampo = G.v_TextLabel,
									IdCampo = C.v_ComponentFieldId,
									i_GroupId = G.i_GroupId.Value
								}

							);

				var finalQuery = (from a in PreQuery.ToList()

								  let value1 = int.TryParse(a.Valor, out rpta)
								  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
												  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
								  from sp in sp_join.DefaultIfEmpty()

								  select new ValorComponenteList
								  {
									  ServicioId = a.ServicioId,
									  Valor = a.Valor,
									  NombreComponente = a.NombreComponente,
									  IdComponente = a.IdComponente,
									  NombreCampo = a.NombreCampo,
									  IdCampo = a.IdCampo,
									  ValorName = sp == null ? "" : sp.v_Value1
								  }).ToList();



				var ListaJerarquizada = (from A in dbContext.service
										 where ListaServicioIds.Contains(A.v_ServiceId)

										 //A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
										 select new JerarquiaServicioCamposValores
										 {
											 ServicioId = A.v_ServiceId
										 }).ToList();

				ListaJerarquizada.ForEach(a =>
				{
					a.CampoValores = finalQuery.FindAll(p => p.ServicioId == a.ServicioId);
				});


				return ListaJerarquizada;
			}
			catch (Exception)
			{

				throw;
			}

		}
		#endregion

		public List<ReportRespiratorio> GetReportSintomaticoRespiratorio(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
																		equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join oc in dbContext.organization on new { a = E1.v_CustomerOrganizationId }
								   equals new { a = oc.v_OrganizationId } into oc_join
								 from oc in oc_join.DefaultIfEmpty()

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											  equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId


								 where A.v_ServiceId == pstrserviceId
								 select new ReportRespiratorio
								 {
									 IdServicio = A.v_ServiceId,
									 IdServiciComponent = E.v_ServiceComponentId,
									 TipoEso = et.v_Value1,
									 FechaEvaluacion = A.d_ServiceDate.Value,
									 DireccionTrabajador = B.v_AdressLocation,
									 Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Genero = J.v_Value1,
									 Puesto = B.v_CurrentOccupation,
									 DNI = B.v_DocNumber,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 FirmaUsuarioGraba = pme.b_SignatureImage,

									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaEnu = ValoresComponente(pstrserviceId, Constants.SINTOMATICO_RESPIRATORIO)

						   select new ReportRespiratorio
						   {
							   IdServicio = a.IdServicio,
							   IdServiciComponent = a.IdServiciComponent,
							   TipoEso = a.TipoEso,
							   FechaEvaluacion = a.FechaEvaluacion,
							   DireccionTrabajador = a.DireccionTrabajador,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Genero = a.Genero,
							   Puesto = a.Puesto,
							   DNI = a.DNI,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Edad = GetAge(a.FechaNacimiento),

							   TUBERCULOSIS1 = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.TUBERCULOSIS1) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.TUBERCULOSIS1).v_Value1,

							   TOS_POR_MAS_15_DIAS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.TOS_POR_MAS_15_DIAS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.TOS_POR_MAS_15_DIAS).v_Value1,

							   BAJO_PESO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.BAJO_PESO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.BAJO_PESO).v_Value1,

							   SUDORACION_NOCTURNA = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.SUDORACION_NOCTURNA) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.SUDORACION_NOCTURNA).v_Value1,

							   EXPECTORACION_CON_SANGRE = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EXPECTORACION_CON_SANGRE) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.EXPECTORACION_CON_SANGRE).v_Value1,

							   FAMILIARES_AMIGOS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.FAMILIARES_AMIGOS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.FAMILIARES_AMIGOS).v_Value1,

							   SOSPECHA_TUBERCULOSIS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.SOSPECHA_TUBERCULOSIS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.SOSPECHA_TUBERCULOSIS).v_Value1,

							   OBSERVACIONES = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.OBSERVACIONES) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.OBSERVACIONES).v_Value1,

							   ES_SINTOMATICO_RESPIRATORIO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ES_SINTOMATICO_RESPIRATORIO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ES_SINTOMATICO_RESPIRATORIO).v_Value1,

							   RESULTADOS_BK_1 = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_BK_1) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_BK_1).v_Value1,

							   RESULTADOS_BK_2 = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_BK_2) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_BK_2).v_Value1,

							   RADIOGRAFIA_TORAX = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.RADIOGRAFIA_TORAX) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.RADIOGRAFIA_TORAX).v_Value1,




						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ReportOstocopia> GetReportFichaOtoscopia(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
																		equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join oc in dbContext.organization on new { a = E1.v_CustomerOrganizationId }
								   equals new { a = oc.v_OrganizationId } into oc_join
								 from oc in oc_join.DefaultIfEmpty()

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											  equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()


								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId


								 where A.v_ServiceId == pstrserviceId
								 select new ReportOstocopia
								 {
									 IdServicio = A.v_ServiceId,
									 IdServiciComponent = E.v_ServiceComponentId,
									 TipoEso = et.v_Value1,
									 FechaEvaluacion = A.d_ServiceDate.Value,
									 Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 Genero = J.v_Value1,
									 Puesto = B.v_CurrentOccupation,
									 DNI = B.v_DocNumber,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaEnu = ValoresComponente(pstrserviceId, Constants.FICHA_OTOSCOPIA)

						   select new ReportOstocopia
						   {
							   IdServicio = a.IdServicio,
							   IdServiciComponent = a.IdServiciComponent,
							   TipoEso = a.TipoEso,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   Genero = a.Genero,
							   Puesto = a.Puesto,
							   DNI = a.DNI,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   Edad = GetAge(a.FechaNacimiento),

							   ANTECEDENTES_OTOLOGICOS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ANTECEDENTES_OTOLOGICOS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ANTECEDENTES_OTOLOGICOS).v_Value1,

							   ZUMBIDOS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ZUMBIDOS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ZUMBIDOS).v_Value1,

							   SECRECION_DEL_OIDO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.SECRECION_DEL_OIDO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.SECRECION_DEL_OIDO).v_Value1,

							   MAREOS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.MAREOS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.MAREOS).v_Value1,

							   OTALGIA = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.OTALGIA) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.OTALGIA).v_Value1,

							   DISMIUCION_DE_AUDICION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.DISMIUCION_DE_AUDICION) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.DISMIUCION_DE_AUDICION).v_Value1,

							   OTROS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.OTROS) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.OTROS).v_Value1,

							   ENF_TRACTO_RASPIRATORIO_ACTUAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ENF_TRACTO_RASPIRATORIO_ACTUAL) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.ENF_TRACTO_RASPIRATORIO_ACTUAL).v_Value1,



							   MEMBRAMA_TIMPANICA_OIDO_DERECHO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.MEMBRAMA_TIMPANICA_OIDO_DERECHO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.MEMBRAMA_TIMPANICA_OIDO_DERECHO).v_Value1,

							   CONDUCTO_AUDITIVO_OIDO_DERECHO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.CONDUCTO_AUDITIVO_OIDO_DERECHO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.CONDUCTO_AUDITIVO_OIDO_DERECHO).v_Value1,

							   MEMBRANA_TIMPANICA_OIDO_IZQUIERDO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.MEMBRANA_TIMPANICA_OIDO_IZQUIERDO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.MEMBRANA_TIMPANICA_OIDO_IZQUIERDO).v_Value1,

							   CONDUCTO_AUDITIVO_OIDO_IZQUIERDO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == Constants.CONDUCTO_AUDITIVO_OIDO_IZQUIERDO) == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == Constants.CONDUCTO_AUDITIVO_OIDO_IZQUIERDO).v_Value1,




						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<Servicios> ListarServiciosSinReportes()
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			DateTime FechaMin = DateTime.Parse("01/05/2016");
			var query = (from A in dbContext.service
						 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId
						 where A.i_IsDeleted == 0 && A.i_ServiceStatusId == (int)ServiceStatus.Culminado && A.i_StatusLiquidation == null
						 && A.d_ServiceDate >FechaMin
						 select new Servicios
						 {
							 ServiceId = A.v_ServiceId,
							 PacienteId = A.v_PersonId,
							 EmpresaCliente = B.v_CustomerOrganizationId

						 }
						 ).ToList();

			return query;
		}

		public void ListarServiciosEsperandoAptitud(string pstrServiceId, List<string> ClientSession)
		{
			try
			{
				List<Servicios> l = new List<Servicios>();
				Servicios o = null;
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = (from A in dbContext.service
							 join B in dbContext.diagnosticrepository on A.v_ServiceId equals B.v_ServiceId
							 where A.i_IsDeleted == 0
							 && A.v_ServiceId == pstrServiceId
							 && A.i_ServiceStatusId == (int)ServiceStatus.EsperandoAptitud && (B.i_FinalQualificationId == (int)FinalQualification.Definitivo || B.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
							 && B.i_IsDeleted == 0
							 select new Servicios
							 {
								 ServiceId = A.v_ServiceId,
								 PacienteId = A.v_PersonId,
								 v_DiagnosticRepositoryId = B.v_DiagnosticRepositoryId,
								 i_FinalQualificationId = B.i_FinalQualificationId.Value
							 }
							 ).ToList();

				var lServicios = query.AsEnumerable()
					   .GroupBy(x => x.ServiceId)
					   .Select(group => group.First());


				foreach (var item in lServicios)
				{
					if (ConcatenateRestrictionByService(item.ServiceId) == "")
					{
						ActualizarEstadoAptitudAutomatico(item.ServiceId, ClientSession);
					}
				}

			}
			catch (Exception ex)
			{
			}

		}

		public void ActualizarEstadoAptitudAutomatico(string pStrServiceId, List<string> ClientSession)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pStrServiceId
									   select a).FirstOrDefault();

				objEntitySource.d_GlobalExpirationDate = objEntitySource.d_ServiceDate.Value.Date.AddYears(1);               
				objEntitySource.i_ServiceStatusId = (int)ServiceStatus.Culminado;
				objEntitySource.i_AptitudeStatusId = (int)AptitudeStatus.Apto;
				objEntitySource.d_UpdateDateOccupationalMedical = DateTime.Now;
				objEntitySource.i_UpdateUserOccupationalMedicaltId = Int32.Parse(ClientSession[2]);
				// Guardar los cambios
				dbContext.SaveChanges();
				return;

			}
			catch (Exception ex)
			{

				return;
			}
		}

		public List<ProtocolSystemUSerExternalList> GetProtocolSystemExternalList(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.systemuser
							join B in dbContext.protocolsystemuser on A.i_SystemUserId equals B.i_SystemUserId
							join C in dbContext.protocol on B.v_ProtocolId equals C.v_ProtocolId
							join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId


							select new ProtocolSystemUSerExternalList
							{
								v_ProtocolSystemUserId = B.v_ProtocolSystemUserId,
								i_SystemUserId = A.i_SystemUserId,
								v_UserName = A.v_UserName,
								v_ProtocolId = C.v_ProtocolId,
								v_ProtocolName = C.v_Name,
								i_ApplicationHierarchyId = B.i_ApplicationHierarchyId,
								v_CustomerOrganizationId = C.v_CustomerOrganizationId,
								v_CustomerOrganizationName = D.v_Name,
								v_PersonId = A.v_PersonId,
								i_IsDeleted = A.i_IsDeleted

							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}



				var objData = query.AsEnumerable()
					  .GroupBy(x => x.v_ProtocolId)
					  .Select(group => group.First());
				pobjOperationResult.Success = 1;
				return objData.ToList();



			}
			catch (Exception ex)
			{
				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
				return null;
			}
		}

		public void ActualizarEstadoUsuarioExterno(int i_SystemUserId, int i_IsDeletedId, List<string> ClientSession)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.systemuser
									   where a.i_SystemUserId == i_SystemUserId
									   select a).FirstOrDefault();


				if (i_IsDeletedId == 1)
				{
					objEntitySource.i_IsDeleted = 0;
				}
				else
				{
					objEntitySource.i_IsDeleted = 1;
				}

				objEntitySource.d_UpdateDate = DateTime.Now;
				objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
				// Guardar los cambios
				dbContext.SaveChanges();
				return;

			}
			catch (Exception ex)
			{

				return;
			}
		}

		#region User controls

		public List<UcSomnolencia> ReporteSomnolencia(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId


								 where A.v_ServiceId == pstrserviceId
								 select new UcSomnolencia
								 {
									 EmpresaCliente = D1.v_Name,
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });

                var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.SOMNOLENCIA_ID).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new UcSomnolencia
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),
                               

							   SOMNOLENCIA_1_SENTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_1_SENTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_1_SENTADO_ID).v_Value1,

							   SOMNOLENCIA_2_MIRANDO_TV_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_2_MIRANDO_TV_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_2_MIRANDO_TV_ID).v_Value1,

							   SOMNOLENCIA_3_SENTADO_INACTIVO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_3_SENTADO_INACTIVO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_3_SENTADO_INACTIVO_ID).v_Value1,
							   SOMNOLENCIA_4_PASAJERO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_4_PASAJERO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_4_PASAJERO_ID).v_Value1,
							   SOMNOLENCIA_5_ACOSTADO_DESC_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_5_ACOSTADO_DESC_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_5_ACOSTADO_DESC_ID).v_Value1,
							   SOMNOLENCIA_6_ACOSTADO_CONVER_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_6_ACOSTADO_CONVER_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_6_ACOSTADO_CONVER_ID).v_Value1,
							   SOMNOLENCIA_7_SENTADO_TRANQUILO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_7_SENTADO_TRANQUILO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_7_SENTADO_TRANQUILO_ID).v_Value1,
							   SOMNOLENCIA_8_CARRO_TRACON_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_8_CARRO_TRACON_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_8_CARRO_TRACON_ID).v_Value1,

							   SOMNOLENCIA_1_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_1_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_1_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_2_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_2_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_2_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_3_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_3_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_3_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_4_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_4_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_4_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_5_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_5_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_5_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_6_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_6_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_6_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_7_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_7_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_7_RESULTADO_ID).v_Value1,

							   SOMNOLENCIA_8_RESULTADO_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_8_RESULTADO_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_8_RESULTADO_ID).v_Value1,
							   SOMNOLENCIA_TOTAL_ID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_TOTAL_ID) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SOMNOLENCIA_TOTAL_ID).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,
							   Dx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.SOMNOLENCIA_ID),
							   Recomendaciones = ConcatenarRecomendacionesPorComponente(pstrserviceId, Constants.SOMNOLENCIA_ID)
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<UcAcumetria> ReporteAcumetria(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new UcAcumetria
								 {
									 EmpresaCliente = D1.v_Name,
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_FirstLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.AUDIOMETRIA_ID).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new UcAcumetria
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),


							   ACUMETRIA_PRUEBA_WEBER = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_PRUEBA_WEBER) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_PRUEBA_WEBER).v_Value1,
							   ACUMETRIA_OD_RINNER = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OD_RINNER) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OD_RINNER).v_Value1,
							   ACUMETRIA_OI_RINNER = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OI_RINNER) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OI_RINNER).v_Value1,
							   ACUMETRIA_WEBER = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_WEBER) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_WEBER).v_Value1,
							   ACUMETRIA_OD_RINNE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OD_RINNE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OD_RINNE).v_Value1,
							   ACUMETRIA_OI_RINNE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OI_RINNE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_OI_RINNE).v_Value1,
							   ACUMETRIA_CONCLUSIONES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_CONCLUSIONES) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.ACUMETRIA_CONCLUSIONES).v_Value1,
							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<UcErgonomica> ReporteErgnomia(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new UcErgonomica
								 {
									 EmpresaCliente = D1.v_Name,
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_FirstLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 Dni = B.v_DocNumber,
									 TipoEso = et.v_Value1,

								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.EXAMEN_FISICO_ID).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new UcErgonomica
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   TipoEso = a.TipoEso,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   Dni = a.Dni,

							   EVA_ERGONOMICA_HOMBORS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_HOMBORS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_HOMBORS).v_Value1,
							   EVA_ERGONOMICA_CUELLO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CUELLO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CUELLO).v_Value1,
							   EVA_ERGONOMICA_ESPALDA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_ESPALDA) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_ESPALDA).v_Value1,
							   EVA_ERGONOMICA_RODILLAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_RODILLAS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_RODILLAS).v_Value1,
							   EVA_ERGONOMICA_RODILLAS_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_RODILLAS_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_RODILLAS_2).v_Value1,
							   EVA_ERGONOMICA_BRAZO_MUNE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_BRAZO_MUNE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_BRAZO_MUNE).v_Value1,
							   EVA_ERGONOMICA_BRAZO_MUNE_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_BRAZO_MUNE_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_BRAZO_MUNE_2).v_Value1,

							   EVA_ERGONOMICA_MANOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_MANOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_MANOS).v_Value1,
							   EVA_ERGONOMICA_RODILLAS_3 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_RODILLAS_3) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_RODILLAS_3).v_Value1,
							   EVA_ERGONOMICA_CUELLOS_HOMB = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CUELLOS_HOMB) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CUELLOS_HOMB).v_Value1,
							   EVA_ERGONOMICA_CUELLOS_HOMB_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CUELLOS_HOMB_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CUELLOS_HOMB_2).v_Value1,
							   EVA_ERGONOMICA_ZONA_LUMBAR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_ZONA_LUMBAR) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_ZONA_LUMBAR).v_Value1,
							   EVA_ERGONOMICA_ZONA_LUMBAR_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_ZONA_LUMBAR_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_ZONA_LUMBAR_2).v_Value1,
							   EVA_ERGONOMICA_MANOS_BRAZOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_MANOS_BRAZOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_MANOS_BRAZOS).v_Value1,
							   EVA_ERGONOMICA_MANOS_BRAZOS_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_MANOS_BRAZOS_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_MANOS_BRAZOS_2).v_Value1,
							   EVA_ERGONOMICA_CONCLUSIONES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CONCLUSIONES) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.EVA_ERGONOMICA_CONCLUSIONES).v_Value1,

							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<UcOtoscopiacs> ReporteOtoscopia(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrserviceId
								 select new UcOtoscopiacs
								 {
									 EmpresaCliente = D1.v_Name,
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.AUDIOMETRIA_ID).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new UcOtoscopiacs
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),


							   OTOSCOPIA_RUIDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_RUIDO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_RUIDO).v_Value1,
							   OTOSCOPIA_QUIMICO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_QUIMICO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_QUIMICO).v_Value1,
							   OTOSCOPIA_DEPORTE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_DEPORTE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_DEPORTE).v_Value1,
							   OTOSCOPIA_RUIDO_EXCE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_RUIDO_EXCE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_RUIDO_EXCE).v_Value1,
							   OTOSCOPIA_MUSICA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_MUSICA) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_MUSICA).v_Value1,
							   OTOSCOPIA_OTOXICOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTOXICOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTOXICOS).v_Value1,
							   OTOSCOPIA_MANIPULACION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_MANIPULACION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_MANIPULACION).v_Value1,

							   OTOSCOPIA_OTOLOGICOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTOLOGICOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTOLOGICOS).v_Value1,
							   OTOSCOPIA_ZUMBIDOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_ZUMBIDOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_ZUMBIDOS).v_Value1,
							   OTOSCOPIA_SECRECION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_SECRECION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_SECRECION).v_Value1,
							   OTOSCOPIA_MAREOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_MAREOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_MAREOS).v_Value1,
							   OTOSCOPIA_OTALGIA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTALGIA) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTALGIA).v_Value1,
							   OTOSCOPIA_DISMINUCION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_DISMINUCION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_DISMINUCION).v_Value1,
							   OTOSCOPIA_TRACTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_TRACTO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_TRACTO).v_Value1,
							   OTOSCOPIA_OTROS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTROS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OTROS).v_Value1,
							   OTOSCOPIA_OD_1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_1).v_Value1,

							   OTOSCOPIA_OD_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_2).v_Value1,
							   OTOSCOPIA_OD_3 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_3) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_3).v_Value1,
							   OTOSCOPIA_OD_4 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_4) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_4).v_Value1,
							   OTOSCOPIA_OI_1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_1).v_Value1,
							   OTOSCOPIA_OI_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_2).v_Value1,
							   OTOSCOPIA_OI_3 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_3) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_3).v_Value1,
							   OTOSCOPIA_OI_4 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_4) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_4).v_Value1,
							   OTOSCOPIA_OD_DESC = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_DESC) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OD_DESC).v_Value1,
							   OTOSCOPIA_OI_DESC = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_DESC) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OTOSCOPIA_OI_DESC).v_Value1,




							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<SintomaticoRespi> ReporteSintomaticoRespiratorio(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new SintomaticoRespi
								 {
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.EXAMEN_FISICO_ID).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new SintomaticoRespi
						   {

							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),


							   SINTOMATICO_1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_1).v_Value1,
							   SINTOMATICO_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_2).v_Value1,
							   SINTOMATICO_3 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_3) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_3).v_Value1,
							   SINTOMATICO_4 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_4) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_4).v_Value1,
							   SINTOMATICO_5 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_5) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_5).v_Value1,
							   SINTOMATICO_6 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_6) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_6).v_Value1,
							   SINTOMATICO_7 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_7) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_7).v_Value1,
							   SINTOMATICO_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_OBS).v_Value1,
							   SINTOMATICO_SI_NO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_SI_NO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_SI_NO).v_Value1,
							   SINTOMATICO_BK_1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_BK_1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_BK_1).v_Value1,
							   SINTOMATICO_BK_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_BK_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_BK_2).v_Value1,
							   SINTOMATICO_RX = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_RX) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.SINTOMATICO_RX).v_Value1,




							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<LumboSacracs> ReporteLumboSaca(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new LumboSacracs
								 {
									 EmpresaCliente = D1.v_Name,
									 Trabajador = B.v_FirstLastName + " " + B.v_FirstLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_FirstLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,

									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, pstrComponentId).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new LumboSacracs
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),


							   LUMBOSACRA_1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_1).v_Value1,
							   LUMBOSACRA_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_2).v_Value1,
							   LUMBOSACRA_3 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_3) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_3).v_Value1,
							   LUMBOSACRA_4 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_4) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_4).v_Value1,
							   LUMBOSACRA_5 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_5) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_5).v_Value1,
							   LUMBOSACRA_6 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_6) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_6).v_Value1,
							   LUMBOSACRA_7 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_7) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_7).v_Value1,
							   LUMBOSACRA_8 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_8) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.LUMBOSACRA_8).v_Value1,


							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<UcOsteo> ReporteOsteomuscular(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrserviceId
								 select new UcOsteo
								 {
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_FirstLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });
				//Parchado
				var ValorUSer = ValoresComponenteOdontogramaValue1(pstrserviceId, Constants.EXAMEN_FISICO_ID).ToList();
                if (ValorUSer.Count ==0)
			    {
                    ValorUSer = ValoresComponenteOdontogramaValue1(pstrserviceId, Constants.EXAMEN_FISICO_7C_ID).ToList();

			        if (ValorUSer.Count == 0)
			        {
                        ValorUSer = ValoresComponenteOdontogramaValue1(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1).ToList();
			        }
			    }

				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new UcOsteo
						   {
							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),


							   UC_OSTEO_FLEXIBILIDAD = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD).v_Value1,
							   UC_OSTEO_FLEXIBILIDAD_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_PTJ).v_Value1,
							   UC_OSTEO_FLEXIBILIDAD_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_OBS).v_Value1,
							   UC_OSTEO_CADERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA).v_Value1,
							   UC_OSTEO_CADERA_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_PTJ).v_Value1,
							   UC_OSTEO_CADERA_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_OBS).v_Value1,
							   UC_OSTEO_MUSLO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO).v_Value1,
							   UC_OSTEO_MUSLO_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_PTJ).v_Value1,
							   UC_OSTEO_MUSLO_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_OBS).v_Value1,
							   UC_OSTEO_ABDOMEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN).v_Value1,


							   UC_OSTEO_ABDOMEN_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_PTJ).v_Value1,
							   UC_OSTEO_ABDOMEN_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_OBS).v_Value1,
							   UC_OSTEO_ABD_180 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180).v_Value1,
							   UC_OSTEO_ABD_180_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_PTJ).v_Value1,
							   UC_OSTEO_ABD_180_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_SINO).v_Value1,
							   UC_OSTEO_ABD_60 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60).v_Value1,
							   UC_OSTEO_ABD_60_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_PTJ).v_Value1,
							   UC_OSTEO_ABD_60_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_SINO).v_Value1,
							   UC_OSTEO_ABD_90 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90).v_Value1,
							   UC_OSTEO_ABD_90_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_PTJ).v_Value1,


							   UC_OSTEO_ABD_90_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_SINO).v_Value1,
							   UC_OSTEO_ROTACION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION).v_Value1,
							   UC_OSTEO_ROTACION_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_PTJ).v_Value1,
							   UC_OSTEO_ROTACION_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_SINO).v_Value1,
							   UC_OSTEO_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_OBS).v_Value1,
							   UC_OSTEO_TOTAL1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL1).v_Value1,
							   UC_OSTEO_TOTAL2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL2).v_Value1,


							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

        public List<UcOsteo> ReporteUCOsteoCoimalache(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                       equals new { a = C.v_ServiceId, b = C.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId

                                 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

                                 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
                                               equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                                 from et in et_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new UcOsteo
                                 {
                                     Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate,
                                     FechaEvaluacion = A.d_ServiceDate,
                                     Puesto = B.v_CurrentOccupation,
                                     ServicioId = A.v_ServiceId,
                                     FirmaUsuarioGraba = pme.b_SignatureImage,
                                     NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_FirstLastName + " " + Z.v_FirstName,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     TipoEso = et.v_Value1,
                                     Dni = B.v_DocNumber
                                 });
                var ValorUSer = ValoresComponenteOdontogramaValue1(pstrserviceId, "N009-ME000000052").ToList();
                var MedicalCenter = GetInfoMedicalCenter();
                var sql = (from a in objEntity.ToList()
                           select new UcOsteo
                           {
                               TipoEso = a.TipoEso,
                               Dni = a.Dni,
                               Trabajador = a.Trabajador,
                               FechaNacimiento = a.FechaNacimiento,
                               FechaEvaluacion = a.FechaEvaluacion,
                               Puesto = a.Puesto,
                               ServicioId = a.ServicioId,
                               FirmaUsuarioGraba = a.FirmaUsuarioGraba,
                               NombreUsuarioGraba = a.NombreUsuarioGraba,
                               HuellaTrabajador = a.HuellaTrabajador,
                               FirmaTrabajador = a.FirmaTrabajador,
                               Edad = GetAge(a.FechaNacimiento.Value),


                               UC_OSTEO_FLEXIBILIDAD = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD).v_Value1,
                               UC_OSTEO_FLEXIBILIDAD_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_PTJ).v_Value1,
                               UC_OSTEO_FLEXIBILIDAD_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_FLEXIBILIDAD_OBS).v_Value1,
                               UC_OSTEO_CADERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA).v_Value1,
                               UC_OSTEO_CADERA_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_PTJ).v_Value1,
                               UC_OSTEO_CADERA_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_CADERA_OBS).v_Value1,
                               UC_OSTEO_MUSLO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO).v_Value1,
                               UC_OSTEO_MUSLO_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_PTJ).v_Value1,
                               UC_OSTEO_MUSLO_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_MUSLO_OBS).v_Value1,
                               UC_OSTEO_ABDOMEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN).v_Value1,


                               UC_OSTEO_ABDOMEN_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_PTJ).v_Value1,
                               UC_OSTEO_ABDOMEN_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABDOMEN_OBS).v_Value1,
                               UC_OSTEO_ABD_180 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180).v_Value1,
                               UC_OSTEO_ABD_180_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_PTJ).v_Value1,
                               UC_OSTEO_ABD_180_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_180_SINO).v_Value1,
                               UC_OSTEO_ABD_60 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60).v_Value1,
                               UC_OSTEO_ABD_60_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_PTJ).v_Value1,
                               UC_OSTEO_ABD_60_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_60_SINO).v_Value1,
                               UC_OSTEO_ABD_90 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90).v_Value1,
                               UC_OSTEO_ABD_90_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_PTJ).v_Value1,


                               UC_OSTEO_ABD_90_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ABD_90_SINO).v_Value1,
                               UC_OSTEO_ROTACION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION).v_Value1,
                               UC_OSTEO_ROTACION_PTJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_PTJ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_PTJ).v_Value1,
                               UC_OSTEO_ROTACION_SINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_SINO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_ROTACION_SINO).v_Value1,
                               UC_OSTEO_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_OBS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_OBS).v_Value1,
                               UC_OSTEO_TOTAL1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL1).v_Value1,
                               UC_OSTEO_TOTAL2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.UC_OSTEO_TOTAL2).v_Value1,


                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();


                return sql;

            }
            catch (Exception)
            {

                throw;
            }


        }


		public List<OjoSeco> ReporteOjoSeco(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new OjoSeco
								 {
									 EmpresaCliente = D1.v_Name,
									 Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate,
									 FechaEvaluacion = A.d_ServiceDate,
									 Puesto = B.v_CurrentOccupation,
									 ServicioId = A.v_ServiceId,
									 FirmaUsuarioGraba = pme.b_SignatureImage,
									 NombreUsuarioGraba = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 FirmaTrabajador = B.b_RubricImage,
									 TipoEso = et.v_Value1,
									 Dni = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, Constants.OFTALMOLOGIA_ID).ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new OjoSeco
						   {
							   EmpresaCliente = a.EmpresaCliente,
							   TipoEso = a.TipoEso,
							   Dni = a.Dni,
							   Trabajador = a.Trabajador,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaEvaluacion = a.FechaEvaluacion,
							   Puesto = a.Puesto,
							   ServicioId = a.ServicioId,
							   FirmaUsuarioGraba = a.FirmaUsuarioGraba,
							   NombreUsuarioGraba = a.NombreUsuarioGraba,
							   HuellaTrabajador = a.HuellaTrabajador,
							   FirmaTrabajador = a.FirmaTrabajador,
							   Edad = GetAge(a.FechaNacimiento.Value),


							   OJO_SECO_ENROJECIMIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ENROJECIMIENTO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ENROJECIMIENTO).v_Value1,
							   OJO_SECO_ENROJECIMIENTO_PTJ_1 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ENROJECIMIENTO_PTJ_1) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ENROJECIMIENTO_PTJ_1).v_Value1,
							   OJO_SECO_BORDE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_BORDE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_BORDE).v_Value1,
							   OJO_SECO_BORDE_PTJ_2 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_BORDE_PTJ_2) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_BORDE_PTJ_2).v_Value1,
							   OJO_SECO_ESCAMAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ESCAMAS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ESCAMAS).v_Value1,
							   OJO_SECO_ESCAMAS_PTJ_3 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ESCAMAS_PTJ_3) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ESCAMAS_PTJ_3).v_Value1,
							   OJO_SECO_OJOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_OJOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_OJOS).v_Value1,
							   OJO_SECO_OJOS_PTJ_4 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_OJOS_PTJ_4) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_OJOS_PTJ_4).v_Value1,
							   OJO_SECO_SECRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SECRE) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SECRE).v_Value1,
							   OJO_SECO_SECRE_PTJ_5 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SECRE_PTJ_5) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SECRE_PTJ_5).v_Value1,
							   OJO_SECO_SEQUEDAD = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SEQUEDAD) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SEQUEDAD).v_Value1,

							   OJO_SECO_SEQUEDAD_PTJ_6 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SEQUEDAD_PTJ_6) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SEQUEDAD_PTJ_6).v_Value1,
							   OJO_SECO_ARENILLA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARENILLA) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARENILLA).v_Value1,
							   OJO_SECO_ARENILLA_PTJ_7 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARENILLA_PTJ_7) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARENILLA_PTJ_7).v_Value1,
							   OJO_SECO_EXTRANO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_EXTRANO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_EXTRANO).v_Value1,
							   OJO_SECO_EXTRANO_PTJ_8 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_EXTRANO_PTJ_8) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_EXTRANO_PTJ_8).v_Value1,
							   OJO_SECO_ARDOR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARDOR) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARDOR).v_Value1,
							   OJO_SECO_ARDOR_PTJ_9 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARDOR_PTJ_9) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_ARDOR_PTJ_9).v_Value1,
							   OJO_SECO_PICOR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PICOR) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PICOR).v_Value1,
							   OJO_SECO_PICOR_PTJ_10 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PICOR_PTJ_10) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PICOR_PTJ_10).v_Value1,
							   OJO_SECO_MALESTAR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_MALESTAR) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_MALESTAR).v_Value1,
							   OJO_SECO_MALESTAR_PTJ_11 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_MALESTAR_PTJ_11) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_MALESTAR_PTJ_11).v_Value1,

							   OJO_SECO_DOLOR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_DOLOR) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_DOLOR).v_Value1,
							   OJO_SECO_DOLOR_PTJ_12 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_DOLOR_PTJ_12) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_DOLOR_PTJ_12).v_Value1,
							   OJO_SECO_LAGRIMEO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LAGRIMEO) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LAGRIMEO).v_Value1,
							   OJO_SECO_LAGRIMEO_PTJ_13 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LAGRIMEO_PTJ_13) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LAGRIMEO_PTJ_13).v_Value1,
							   OJO_SECO_LLOROSOS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LLOROSOS) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LLOROSOS).v_Value1,
							   OJO_SECO_LLOROSOS_PTJ_14 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LLOROSOS_PTJ_14) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_LLOROSOS_PTJ_14).v_Value1,
							   OJO_SECO_SENSIBILIDAD = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SENSIBILIDAD) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SENSIBILIDAD).v_Value1,
							   OJO_SECO_SENSIBILIDAD_PTJ_15 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SENSIBILIDAD_PTJ_15) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_SENSIBILIDAD_PTJ_15).v_Value1,

							   OJO_SECO_VISION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_VISION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_VISION).v_Value1,
							   OJO_SECO_VISION_PTJ_16 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_VISION_PTJ_16) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_VISION_PTJ_16).v_Value1,
							   OJO_SECO_CANSANCION = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_CANSANCION) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_CANSANCION).v_Value1,
							   OJO_SECO_CANSANCION_PTJ_17 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_CANSANCION_PTJ_17) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_CANSANCION_PTJ_17).v_Value1,
							   OJO_SECO_PESADEZ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PESADEZ) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PESADEZ).v_Value1,
							   OJO_SECO_PESADEZ_PTJ_18 = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PESADEZ_PTJ_18) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_PESADEZ_PTJ_18).v_Value1,
							   OJO_SECO_TOTAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_TOTAL) == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == Constants.OJO_SECO_TOTAL).v_Value1,


							   b_Logo = MedicalCenter.b_Image,
							   EmpresaPropietaria = MedicalCenter.v_Name,
							   EmpresaPropietariaDireccion = MedicalCenter.v_Address,
							   EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
							   EmpresaPropietariaEmail = MedicalCenter.v_Mail,

							   Dx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.TESTOJOSECO_ID),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		#endregion

		public ServiceShort GetServiceShort(string pstrServiceId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
								 from B in B_join.DefaultIfEmpty()
								 join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
								 from C in C_join.DefaultIfEmpty()
								 join D in dbContext.person on A.v_PersonId equals D.v_PersonId

								 where A.v_ServiceId == pstrServiceId

								 select new ServiceShort
								 {
									 Empresa = C.v_Name,
									 Paciente = D.v_FirstLastName + " " + D.v_SecondLastName + " " + D.v_FirstName,
									 FechaServicio = A.d_ServiceDate,
									 DNI = D.v_DocNumber
								 });


				var sql = (from a in objEntity.ToList()

						   select new ServiceShort
						   {
							   Empresa = a.Empresa,
							   Paciente = a.Paciente,
							   FechaServicio = a.FechaServicio,
							   DNI = a.DNI
						   }).FirstOrDefault();

				return sql;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		//public ServiceShort GetServiceForReport(string pstrServiceId)
		//{
		//    //mon.IsActive = true;

		//    try
		//    {
		//        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

		//        var objEntity = (from A in dbContext.service
		//                         join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
		//                         from B in B_join.DefaultIfEmpty()
		//                         join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
		//                         from C in C_join.DefaultIfEmpty()
		//                         join D in dbContext.person on A.v_PersonId equals D.v_PersonId

		//                         where A.v_ServiceId == pstrServiceId

		//                         select new ServiceShort
		//                         {
		//                             Empresa = C.v_Name,
		//                             Paciente = D.v_FirstLastName + " " + D.v_SecondLastName + " " + D.v_FirstName,
		//                             FechaServicio = A.d_ServiceDate,
		//                             DNI = D.v_DocNumber
		//                         });


		//        var sql = (from a in objEntity.ToList()

		//                   select new ServiceShort
		//                   {
		//                       Empresa = a.Empresa,
		//                       Paciente = a.Paciente,
		//                       FechaServicio = a.FechaServicio,
		//                       DNI = a.DNI
		//                   }).FirstOrDefault();

		//        return sql;
		//    }
		//    catch (Exception ex)
		//    {
		//        return null;
		//    }
		//}


		public void CulminarServicioPorDefecto(string pstrServiceComponentId, int pintCategoriaId)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.servicecomponent
									   where a.v_ServiceComponentId == pstrServiceComponentId
									   select a).FirstOrDefault();
				objEntitySource.i_ServiceComponentStatusId = (int)ServiceComponentStatus.PorAprobacion;

				if (pintCategoriaId == 6) // RX
				{
					objEntitySource.i_UpdateUserTechnicalDataRegisterId = 145;
					objEntitySource.i_InsertUserTechnicalDataRegisterId = 145;
				}
				else if (pintCategoriaId == 16)//Espiro
				{
					objEntitySource.i_UpdateUserTechnicalDataRegisterId = 145;
					objEntitySource.i_InsertUserTechnicalDataRegisterId = 145;
				}
				else if (pintCategoriaId == 5)//EKG
				{
					objEntitySource.i_UpdateUserTechnicalDataRegisterId = 146;
					objEntitySource.i_InsertUserTechnicalDataRegisterId = 146;
				}

				// Guardar los cambios
				dbContext.SaveChanges();

				return;
			}
			catch (Exception ex)
			{

				// Llenar entidad Log
				return;
			}
		}

		public void ActualizarEstadoComponentesPorCategoria(ref OperationResult pobjOperationResult, int pintCategoriaI, string pstrServiceId, int pintStatusComponentId, List<string> ClientSession)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var ListobjEntitySource = (from a in dbContext.servicecomponent
										   join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
										   where a.v_ServiceId == pstrServiceId && b.i_CategoryId == pintCategoriaI
										   select a).ToList();

				foreach (var item in ListobjEntitySource)
				{
					item.i_ServiceComponentStatusId = pintStatusComponentId;
					item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
					item.d_UpdateDate = DateTime.Now;
					item.i_UpdateUserId = Int32.Parse(ClientSession[2]);
					// Guardar los cambios
					dbContext.SaveChanges();
					pobjOperationResult.Success = 1;
				}

				return;

			}
			catch (Exception ex)
			{

				pobjOperationResult.Success = 0;
				pobjOperationResult.ExceptionMessage = ex.Message;
				return;
			}
		}

		// Alberto
		public List<ReporteOftalmologiaAntiguo> GetReportOftalmologiaAntiguo(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	  equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
																		equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
								 from J in J_join.DefaultIfEmpty()

								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join oc in dbContext.organization on new { a = E1.v_CustomerOrganizationId }
								   equals new { a = oc.v_OrganizationId } into oc_join
								 from oc in oc_join.DefaultIfEmpty()


								 // Usuario Tecnologo *************************************
								 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
								 from tec in tec_join.DefaultIfEmpty()

								 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
								 from ptec in ptec_join.DefaultIfEmpty()
								 // *******************************************************  

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId


								 where A.v_ServiceId == pstrserviceId
								 select new ReporteOftalmologiaAntiguo
								 {

									 Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
									 FechaNacimiento = B.d_Birthdate,
									 DNI = B.v_DocNumber,
									 v_ServiceId = A.v_ServiceId,
									 FirmaMedico = pme.b_SignatureImage,
									 EmpresaCliente = oc.v_Name,
									 PuestoTrabajo = B.v_CurrentOccupation,
									 FechaServicio = A.d_ServiceDate,
									 FirmaTecnico = ptec.b_SignatureImage,
									 LogoEmpresaCliente = oc.b_Image
								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()
						   let EvaEnu = ValoresComponente(pstrserviceId, Constants.OFTALMOLOGIA_ID)

						   select new ReporteOftalmologiaAntiguo
						   {
							   Paciente = a.Paciente,
							   DNI = a.DNI,
							   v_ServiceId = a.v_ServiceId,
							   EmpresaCliente = a.EmpresaCliente,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   FechaServicio = a.FechaServicio,
							   PuestoTrabajo = a.PuestoTrabajo,
							   USO_DE_CORRECTORES_SI = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000224") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000224").v_Value1,

							   USO_DE_CORRECTORES_NO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000719") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000719").v_Value1,

							   ULTIMA_REFRACCION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000225") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000225").v_Value1,

							   ANTECEDENTE_DIABETES = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000176") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000176").v_Value1,

							   ANTECEDENTE_HIPERTENSION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000175") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000175").v_Value1,

							   ANTECEDENTE_SUST_QUIMICAS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000180") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000180").v_Value1,

							   ANTECEDENTE_EXP_A_RADIACION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000182") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000182").v_Value1,

							   ANTECEDENTE_MIOPIA = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000709") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000709").v_Value1,

							   ANTECEDENTE_CIRUGIA_OCULAR = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000181") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000181").v_Value1,

							   ANTECEDENTE_TRAUMA_OCULAR = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000178") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000178").v_Value1,

							   ANTECEDENTE_GLAUCOMA = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000177") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000177").v_Value1,

							   ANTECEDENTE_ASTIGMATISMO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000179") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000179").v_Value1,

							   ANTECEDENTE_OTROS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000710") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000710").v_Value1,

							   PATOLOGIA_SIN_PATOLOGIAS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002092") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002092").v_Value1,

							   PATOLOGIA_PTOSIS_PALPEBRAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002084") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002084").v_Value1,

							   PATOLOGIA_CONJUNTIVITIS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002085") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002085").v_Value1,

							   PATOLOGIA_PTERIGIUM = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002086") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002086").v_Value1,

							   PATOLOGIA_ESTRABISMO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002087") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002087").v_Value1,

							   PATOLOGIA_TRANS_DE_CORNEA = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002088") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002088").v_Value1,

							   PATOLOGIA_CATARATAS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002089") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002089").v_Value1,

							   PATOLOGIA_CHALAZION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002090") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002090").v_Value1,

							   PATOLOGIA_OTRAS = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002091") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002091").v_Value1,

							   S_C_LEJOS_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000234") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000234").v_Value1,

							   S_C_LEJOS_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000230") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000230").v_Value1,

							   C_C_LEJOS_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000231") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000231").v_Value1,

							   C_C_LEJOS_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000236") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000236").v_Value1,

							   A_E_LEJOS_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002080") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002080").v_Value1,

							   A_E_LEJOS_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002081") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002081").v_Value1,

							   S_C_CERCA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000233") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000233").v_Value1,

							   S_C_CERCA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000227") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000227").v_Value1,

							   C_C_CERCA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000235") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000235").v_Value1,

							   C_C_CERCA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000646") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000646").v_Value1,

							   A_E_CERCA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002082") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002082").v_Value1,

							   A_E_CERCA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002083") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002083").v_Value1,

							   FONDO_OJO_MACULOPATIA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000251") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000251").v_Value1,

							   FONDO_OJO_MACULOPATIA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000252") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000252").v_Value1,

							   FONDO_OJO_NEURITIS_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000254") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000254").v_Value1,

							   FONDO_OJO_NEURITIS_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000255") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000255").v_Value1,

							   FONDO_OJO_RETINOPATIA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000524") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000524").v_Value1,

							   FONDO_OJO_RETINOPATIA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000525") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000525").v_Value1,

							   FONDO_OJO_ANGIOPATIA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000530") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000530").v_Value1,

							   FONDO_OJO_ANGIOPATIA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000531") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000531").v_Value1,

							   FONDO_OJO_ATROFIA_DE_N_O = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000532") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000532").v_Value1,

							   FONDO_OJO_ATROFIA_DE_NO_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000533") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000533").v_Value1,

							   FONDO_OJO_ATROFIA_DE_NO_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000534") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000534").v_Value1,

							   TEST_ISHIHARA_NORMAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000717") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000717").v_Value1,

							   TEST_ISHIHARA_ANORMAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000718") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000718").v_Value1,

							   TEST_ISHIHARA_DESCRIPCION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000522") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000522").v_Value1Name,

							   TEST_ESTEREOPSIS_NORMAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000343") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000343").v_Value1,

							   TEST_ESTEREOPSIS_ANORMAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000342") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000342").v_Value1,

							   TEST_ESTEREOPSIS_ENCANDILAMIENTO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000226") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000226").v_Value1,

							   TEST_ESTEREOPSIS_TIEMPO = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000258") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000258").v_Value1,

							   TEST_ESTEREOPSIS_RECUPERACION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002093") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002093").v_Value1,

							   CAMPIMETRIA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002094") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002094").v_Value1,

							   CAMPIMETRIA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002095") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002095").v_Value1,

							   TONOMETRIA_O_D = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002096") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002096").v_Value1,

							   TONOMETRIA_O_I = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002097") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000002097").v_Value1,

							   REFLEJOS_PUPILARES_NORMAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000711") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000711").v_Value1,

							   REFLEJOS_PUPILARES_ANORMAL = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000712") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N009-MF000000712").v_Value1,

							   REFLEJOS_PUPILARES_DESCRIPCION = EvaEnu.Count == 0 || EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000261") == null ? string.Empty : EvaEnu.Find(p => p.v_ComponentFieldId == "N002-MF000000261").v_Value1,

							   LogoEmpresa = MedicalCenter.b_Image,
							   Dx = GetDiagnosticByServiceIdAndCategoryId(pstrserviceId, 14),
							   Recomendaciones = ConcatenateRecomendacionesByCategoria(14, pstrserviceId),
							   FirmaTecnico = a.FirmaTecnico,
							   FirmaMedico = a.FirmaMedico,
							   LogoEmpresaCliente = a.LogoEmpresaCliente

						   }).ToList();

				return sql;
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<FichaAudiometricaAudiomax> GetReportAudiometriaAudiomax(string pstrServiceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join E in dbContext.servicecomponent on new { a = pstrServiceId, b = pstrComponentId }
																		equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()
								 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId
								 join H in dbContext.systemparameter on new { a = pro.i_EsoTypeId.Value, b = 118 }
												equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()
								 where A.v_ServiceId == pstrServiceId
								 //************************************************************************************
								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 select new FichaAudiometricaAudiomax
								 {
									 ServiceComponentId = E.v_ServiceComponentId,
									 ApellidosNombre = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FechaNacimiento = B.d_Birthdate.Value,
									 FechaExamen = A.d_ServiceDate.Value,
									 i_SexTypeId = B.i_SexTypeId.Value,
									 Genero = B.i_SexTypeId == (int)Gender.MASCULINO ? "M" : "F",
									 Examen = H.v_Value1,
									 FirmaTrabajador = B.b_RubricImage,
									 HuellaTrabajador = B.b_FingerPrintImage,
									 HizoAudimetria = Z.v_FirstLastName + " " + Z.v_SecondLastName + " " + Z.v_FirstName,

								 });

				var MedicalCenter = GetInfoMedicalCenter();

				var __sql = ValoresComponente(pstrServiceId, pstrComponentId);


				var sql = (from a in objEntity.ToList()

						   select new FichaAudiometricaAudiomax
						   {

							   ServiceComponentId = a.ServiceComponentId,
							   ApellidosNombre = a.ApellidosNombre,
							   FechaNacimiento = a.FechaNacimiento,
							   FechaExamen = a.FechaExamen,
							   i_SexTypeId = a.i_SexTypeId,
							   Genero = a.Genero,
							   Examen = a.Examen,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   HizoAudimetria = a.HizoAudimetria,
							   // Requisitos para la Audiometria                         
							   TiempoExpoRuidoTrabajoActual = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == "N009-MF000002159").v_Value1,


						   }).ToList();

				return sql;


			}
			catch (Exception)
			{

				throw;
			}
		}

        public List<FichaAntecedentePatologico> GetReportAntecedentePatologico(string pstrPacientId, string pstrServiceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var servicios = (from ser in dbContext.service
                                 join serCom in dbContext.servicecomponent on ser.v_ServiceId equals serCom.v_ServiceId
                                 join per in dbContext.person on ser.v_PersonId equals per.v_PersonId
                                 join doc in dbContext.datahierarchy on new { a = per.i_DocTypeId.Value, b = 106 } equals new { a = doc.i_ItemId, b = doc.i_GroupId } into doc_join
                                 from doc in doc_join.DefaultIfEmpty()
                                 join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId
                                 join empCli in dbContext.organization on prot.v_CustomerOrganizationId equals empCli.v_OrganizationId
                                 join empTrab in dbContext.organization on prot.v_WorkingOrganizationId equals empTrab.v_OrganizationId
                                 join empEmp in dbContext.organization on prot.v_EmployerOrganizationId equals empEmp.v_OrganizationId
                                 join gen in dbContext.systemparameter on new { a = per.i_DocTypeId.Value, b = 100 } equals new { a = gen.i_ParameterId, b = gen.i_GroupId } into gen_join
                                 from gen in gen_join.DefaultIfEmpty()
                                 join me in dbContext.systemuser on serCom.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()
                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where ser.v_ServiceId == pstrServiceId
                                 select new FichaAntecedentePatologico
                                 {
                                     ServiceId = ser.v_ServiceId,
                                     ServiceComponentId = serCom.v_ServiceComponentId,
                                     FechaServicio = ser.d_ServiceDate.Value,
                                     Nombres = per.v_FirstName,
                                     ApellidoPaterno = per.v_FirstLastName,
                                     ApellidoMaterno = per.v_SecondLastName,
                                     NombreCompleto = per.v_FirstLastName + " " + per.v_SecondLastName + " " + per.v_FirstName,
                                     FechaNacimiento = per.d_Birthdate.Value,
                                     TipoDocumentoId = per.i_DocTypeId.Value,
                                     TipoDocumento = doc.v_Value1,
                                     NroDocumento = per.v_DocNumber,
                                     EmpresaCliente = empCli.v_Name,
                                     EmpresaTrabajo = empTrab.v_Name,
                                     EmpresaEmpleadora = empEmp.v_Name,
                                     Puesto = per.v_CurrentOccupation,
                                     GeneroId = per.i_SexTypeId.Value,
                                     Genero = gen.v_Value1,
                                     FirmaTrabajador = per.b_RubricImage,
                                     HuellaTrabajador = per.b_FingerPrintImage,
                                     FirmaUsuarioGraba = pme.b_SignatureImage,
                                     InicioMestrucion = ser.v_Menarquia,
                                     InicioVidaSexual = ser.v_InicioVidaSexaul,
                                     NumeroParejas = ser.v_NroParejasActuales,
                                     DamasNumeroHijosVivos = per.i_NumberLivingChildren,
                                     DamasNumeroHijosFallecidos = per.i_NumberDependentChildren,
                                     DamasNumeroAborto = ser.v_NroAbortos,
                                     DamasCausaAborto = ser.v_PrecisarCausas,
                                     VaronesNumeroHijosVivos = per.i_NumberLiveChildren,
                                     VaromesNumeroHijosFallecidos = per.i_NumberDeadChildren,
                                     VaromesNumeroAbortoPareja = "",
                                     VaronesCausaAborto = "",
                                     b_Logo_Cliente = empCli.b_Image

                                 }).ToList();
                var MedicalCenter = GetInfoMedicalCenter();
                var objEntity = (from A in dbContext.personmedicalhistory
                                 join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
                                 where A.v_PersonId == pstrPacientId
                                 select new 
                                 {
                                        Nombre = B.v_Name,
                                        Detalle = A.v_DiagnosticDetail,
                                        Tratamiento = A.v_TreatmentSite,
                                        FechaAntecedente = A.d_StartDate,
                                        DiseasseId = A.v_DiseasesId,
                                        Hospital = A.NombreHospital,
                                        Complicaciones = A.v_Complicaciones
                                        
                                 }).ToList();

                var FichaAntecedentePatologico = new FichaAntecedentePatologico();
                List<FichaAntecedentePatologico> list = new List<BE.FichaAntecedentePatologico>();
                
                FichaAntecedentePatologico.ServiceId = servicios[0].ServiceId;
                FichaAntecedentePatologico.b_Logo = MedicalCenter.b_Image;
                FichaAntecedentePatologico.ServiceComponentId = servicios[0].ServiceComponentId;
                FichaAntecedentePatologico.FechaServicio = servicios[0].FechaServicio;
                FichaAntecedentePatologico.Nombres = servicios[0].Nombres;
                FichaAntecedentePatologico.ApellidoPaterno = servicios[0].ApellidoPaterno;
                FichaAntecedentePatologico.ApellidoMaterno = servicios[0].ApellidoMaterno;
                FichaAntecedentePatologico.NombreCompleto = servicios[0].NombreCompleto;
                FichaAntecedentePatologico.FechaNacimiento = servicios[0].FechaNacimiento;
                FichaAntecedentePatologico.Edad = servicios[0].Edad;
                FichaAntecedentePatologico.TipoDocumentoId = servicios[0].TipoDocumentoId;
                FichaAntecedentePatologico.TipoDocumento = servicios[0].TipoDocumento;
                FichaAntecedentePatologico.b_Logo_Cliente = servicios[0].b_Logo_Cliente;
                FichaAntecedentePatologico.Dia = servicios[0].FechaServicio.Value.Day.ToString();
                FichaAntecedentePatologico.Mes = servicios[0].FechaServicio.Value.Month.ToString();
                FichaAntecedentePatologico.Anio = servicios[0].FechaServicio.Value.Year.ToString();

                FichaAntecedentePatologico.NroDocumento = servicios[0].NroDocumento;
                FichaAntecedentePatologico.EmpresaCliente = servicios[0].EmpresaCliente;
                FichaAntecedentePatologico.EmpresaTrabajo = servicios[0].EmpresaTrabajo;
                FichaAntecedentePatologico.EmpresaEmpleadora = servicios[0].EmpresaEmpleadora;
                FichaAntecedentePatologico.Puesto = servicios[0].Puesto;
                FichaAntecedentePatologico.GeneroId = servicios[0].GeneroId;
                FichaAntecedentePatologico.Genero = servicios[0].Genero;
                var FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrServiceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID);
                FichaAntecedentePatologico.FirmaMedicina = FirmaMedicoMedicina.Value5;
                FichaAntecedentePatologico.FirmaTrabajador = servicios[0].FirmaTrabajador;
                FichaAntecedentePatologico.HuellaTrabajador = servicios[0].HuellaTrabajador;
                FichaAntecedentePatologico.FirmaUsuarioGraba = servicios[0].FirmaUsuarioGraba;

                FichaAntecedentePatologico.InicioMestrucion = servicios[0].InicioMestrucion;
                FichaAntecedentePatologico.InicioVidaSexual = servicios[0].InicioVidaSexual;
                FichaAntecedentePatologico.NumeroParejas = servicios[0].NumeroParejas;
                FichaAntecedentePatologico.DamasNumeroHijosVivos = servicios[0].DamasNumeroHijosVivos;
                FichaAntecedentePatologico.DamasNumeroHijosFallecidos = servicios[0].DamasNumeroHijosFallecidos;
                FichaAntecedentePatologico.DamasNumeroAborto = servicios[0].DamasNumeroAborto;
                FichaAntecedentePatologico.DamasCausaAborto = servicios[0].DamasCausaAborto;
                FichaAntecedentePatologico.VaronesNumeroHijosVivos = servicios[0].VaronesNumeroHijosVivos;
                FichaAntecedentePatologico.VaromesNumeroHijosFallecidos = servicios[0].VaromesNumeroHijosFallecidos;
                FichaAntecedentePatologico.VaromesNumeroAbortoPareja = servicios[0].VaromesNumeroAbortoPareja;
                FichaAntecedentePatologico.VaronesCausaAborto = servicios[0].VaronesCausaAborto;

                //Primer bloque
                FichaAntecedentePatologico.Alergia = objEntity.Find(p => p.Nombre.Contains("Alergia")) == null ? " " : "X";
                FichaAntecedentePatologico.AmigdalitisCronica = objEntity.Find(p => p.Nombre.Contains("Amigoalitis Cronica")) == null ? " " : "X";
                FichaAntecedentePatologico.Asma = objEntity.Find(p => p.Nombre.Contains("Asma")) == null ? " " : "X";
                FichaAntecedentePatologico.Bocio = objEntity.Find(p => p.Nombre.Contains("Bocio")) == null ? " " : "X";
                FichaAntecedentePatologico.Bronconeumonia = objEntity.Find(p => p.Nombre.Contains("Bronconeumonia")) == null ? " " : "X";
                FichaAntecedentePatologico.BronquitisRepeticion = objEntity.Find(p => p.Nombre.Contains("Bronquitis")) == null ? " " : "X";
                FichaAntecedentePatologico.Colecistitis = objEntity.Find(p => p.Nombre.Contains("Colecistitis")) == null ? " " : "X";
                FichaAntecedentePatologico.Dermatisis = objEntity.Find(p => p.Nombre.Contains("Dermatisis")) == null ? " " : "X";
                FichaAntecedentePatologico.Diabetes = objEntity.Find(p => p.Nombre == "Diabetes") == null ? " " : "X";
                FichaAntecedentePatologico.Disenteria = objEntity.Find(p => p.Nombre == "Disenteria") == null? " ": "X";
                FichaAntecedentePatologico.ArritmiasCardiacas = objEntity.Find(p => p.Nombre.Contains("Arritmias")) == null ? " " : "X";
                FichaAntecedentePatologico.EnfCorazon = objEntity.Find(p => p.Nombre.Contains("Corazón")) == null ? " " : "X";
                FichaAntecedentePatologico.Caries = objEntity.Find(p => p.Nombre.Contains("Caries")) == null ? " " : "X";
                FichaAntecedentePatologico.EnfOculares = objEntity.Find(p => p.Nombre.Contains("Ocular")) == null ? " " : "X";
                FichaAntecedentePatologico.Epilepcia = objEntity.Find(p => p.Nombre.Contains("Epilepcia") ) == null ? " " : "X";
                FichaAntecedentePatologico.FaringitisCronica = objEntity.Find(p => p.Nombre.Contains("Faringitis")) == null ? " " : "X";
                FichaAntecedentePatologico.FiebreMala = objEntity.Find(p => p.Nombre.Contains("Mala")) == null ? " " : "X";
                FichaAntecedentePatologico.FiebreTifoidea = objEntity.Find(p => p.Nombre.Contains("Tifoidea")) == null ? " " : "X";

                FichaAntecedentePatologico.FiebreReumatica = objEntity.Find(p => p.Nombre.Contains("Reomatica")) == null ? " " : "X";
                FichaAntecedentePatologico.Forunculosis = objEntity.Find(p => p.Nombre.Contains("Forunculo")) == null ? " " : "X";
                FichaAntecedentePatologico.GastritisCronica = objEntity.Find(p => p.Nombre.Contains("Gastritis")) == null ? " " : "X";
                FichaAntecedentePatologico.Gonorrea = objEntity.Find(p => p.Nombre.Contains("Gonorrea")) == null ? " " : "X";
                FichaAntecedentePatologico.Hemorroides = objEntity.Find(p => p.Nombre.Contains("Hemorroides")) == null ? " " : "X";
                FichaAntecedentePatologico.Hepatitis = objEntity.Find(p => p.Nombre.Contains("Hepatitis")) == null ? " " : "X";
                FichaAntecedentePatologico.Hernias = objEntity.Find(p => p.Nombre.Contains("Hernias")) == null ? " " : "X";
                FichaAntecedentePatologico.InfUrinaria = objEntity.Find(p => p.Nombre.Contains("Urinaria")) == null ? " " : "X";
                FichaAntecedentePatologico.Intoxicaciones = objEntity.Find(p => p.Nombre.Contains("Intoxicaciones")) == null ? " " : "X";
                FichaAntecedentePatologico.LitiasisUrinaria = objEntity.Find(p => p.Nombre.Contains("Litiasis")) == null ? " " : "X";
                FichaAntecedentePatologico.Meningitis = objEntity.Find(p => p.Nombre.Contains("Meningitis")) == null ? " " : "X";
                FichaAntecedentePatologico.Neuritis = objEntity.Find(p => p.Nombre.Contains("Neuritis")) == null ? " " : "X";
                FichaAntecedentePatologico.Otitis = objEntity.Find(p => p.Nombre.Contains("Otitis")) == null ? " " : "X";
                FichaAntecedentePatologico.PresionAlta = objEntity.Find(p => p.Nombre.Contains("Presion Alta")) == null ? " " : "X";
                FichaAntecedentePatologico.Paludismo = objEntity.Find(p => p.Nombre.Contains("Paludismo")) == null ? " " : "X";
                FichaAntecedentePatologico.Parasitosis = objEntity.Find(p => p.Nombre.Contains("Parasitosis")) == null ? " " : "X";
                FichaAntecedentePatologico.Parodititis = objEntity.Find(p => p.Nombre.Contains("Parodititis")) == null ? " " : "X";
                FichaAntecedentePatologico.Pleuresia = objEntity.Find(p => p.Nombre.Contains("Pleuresia")) == null ? " " : "X";

                FichaAntecedentePatologico.Plubismo = objEntity.Find(p => p.Nombre.Contains("Plubismo")) == null ? " " : "X";
                FichaAntecedentePatologico.Poliomelitis = objEntity.Find(p => p.Nombre.Contains("Poliomelitis")) == null ? " " : "X";
                FichaAntecedentePatologico.ResfrioFrecuente = objEntity.Find(p => p.Nombre.Contains("Resfrio")) == null ? " " : "X";
                FichaAntecedentePatologico.Reumatismo = objEntity.Find(p => p.Nombre.Contains("Reumatismo")) == null ? " " : "X";
                FichaAntecedentePatologico.Sarampion = objEntity.Find(p => p.Nombre.Contains("Sarampion")) == null ? " " : "X";
                FichaAntecedentePatologico.Sifilis = objEntity.Find(p => p.Nombre.Contains("sifilis")) == null ? " " : "X";
                FichaAntecedentePatologico.Silicosis = objEntity.Find(p => p.Nombre.Contains("Silicosis")) == null ? " " : "X";
                FichaAntecedentePatologico.Sinusitis = objEntity.Find(p => p.Nombre.Contains("Sinusitis")) == null ? " " : "X";
                FichaAntecedentePatologico.Traumatismo = objEntity.Find(p => p.Nombre.Contains("Traumatismo")) == null ? " " : "X";
                FichaAntecedentePatologico.TosConvulsiva = objEntity.Find(p => p.Nombre.Contains("Tos")) == null ? " " : "X";
                FichaAntecedentePatologico.TrastNervioso = objEntity.Find(p => p.Nombre.Contains("Nervioso")) == null ? " " : "X";
                FichaAntecedentePatologico.Tuberculosis = objEntity.Find(p => p.Nombre.Contains("Tuberculosis")) == null ? " " : "X";
                FichaAntecedentePatologico.Tumores = objEntity.Find(p => p.Nombre.Contains("Tumores")) == null ? " " : "X";
                FichaAntecedentePatologico.Ulcera = objEntity.Find(p => p.Nombre.Contains("Ulcera")) == null ? " " : "X";
                FichaAntecedentePatologico.Gota = objEntity.Find(p => p.Nombre.Contains("Gota")) == null ? " " : "X";
                FichaAntecedentePatologico.Varices = objEntity.Find(p => p.Nombre.Contains("Varices")) == null ? " " : "X";
                FichaAntecedentePatologico.Varicocele = objEntity.Find(p => p.Nombre.Contains("Varicocele")) == null ? " " : "X";
                FichaAntecedentePatologico.Varicela = objEntity.Find(p => p.Nombre.Contains("Varicela")) == null ? " " : "X";

                //Segundo bloque
                FichaAntecedentePatologico.PerdidaMemoria = objEntity.Find(p => p.Nombre.Contains("Memoria")) == null ? " " : "X";
                FichaAntecedentePatologico.Preocupacion = objEntity.Find(p => p.Nombre.Contains("Preocupacion")) == null ? " " : "X";
                FichaAntecedentePatologico.DoloresArteriales = objEntity.Find(p => p.Nombre.Contains("Arteriales")) == null ? " " : "X";
                FichaAntecedentePatologico.AumentoDisPeso = objEntity.Find(p => p.Nombre.Contains("Peso")) == null ? " " : "X";
                FichaAntecedentePatologico.DolorCabeza = objEntity.Find(p => p.Nombre.Contains("Cabeza")) == null ? " " : "X";
                FichaAntecedentePatologico.Diarrea = objEntity.Find(p => p.Nombre.Contains("Diarrea")) == null ? " " : "X";
                FichaAntecedentePatologico.AgitacionEjercicios = objEntity.Find(p => p.Nombre.Contains("Ejercicios")) == null ? " " : "X";
                FichaAntecedentePatologico.DolorOcular = objEntity.Find(p => p.Nombre.Contains("Ocular")) == null ? " " : "X";
                FichaAntecedentePatologico.DolorOpresivo = objEntity.Find(p => p.Nombre.Contains("Opresivo")) == null ? " " : "X";
                FichaAntecedentePatologico.HinchazonPiesManos = objEntity.Find(p => p.Nombre.Contains("Hinchazon")) == null ? " " : "X";

                FichaAntecedentePatologico.Estrenimiento = objEntity.Find(p => p.Nombre.Contains("Estrenimiento")) == null ? " " : "X";
                FichaAntecedentePatologico.VomitosConSangre = objEntity.Find(p => p.Nombre.Contains("Vomitos")) == null ? " " : "X";
                FichaAntecedentePatologico.SangreOrina = objEntity.Find(p => p.Nombre.Contains("SangreOrina")) == null ? " " : "X";
                FichaAntecedentePatologico.TosConSangre = objEntity.Find(p => p.Nombre.Contains("Tos con Sangre")) == null ? " " : "X";
                FichaAntecedentePatologico.ColoracionAmarilla = objEntity.Find(p => p.Nombre.Contains("Coloracion")) == null ? " " : "X";
                FichaAntecedentePatologico.IndigestionFrecuente = objEntity.Find(p => p.Nombre.Contains("Indigestion")) == null ? " " : "X";
                FichaAntecedentePatologico.Insomnio = objEntity.Find(p => p.Nombre.Contains("Insomnio")) == null ? " " : "X";
                FichaAntecedentePatologico.Lumbalgias = objEntity.Find(p => p.Nombre.Contains("Lumbalgia")) == null ? " " : "X";
                FichaAntecedentePatologico.MareosDesmayo = objEntity.Find(p => p.Nombre.Contains("Mareos")) == null ? " " : "X";
                FichaAntecedentePatologico.HecesNegras = objEntity.Find(p => p.Nombre.Contains("Heces")) == null ? " " : "X";

                FichaAntecedentePatologico.OrinaDolor = objEntity.Find(p => p.Nombre.Contains("Orina con Dolor")) == null ? " " : "X";
                FichaAntecedentePatologico.OrinaInvoluntaria = objEntity.Find(p => p.Nombre.Contains("Orina Involuntaria")) == null ? " " : "X";
                FichaAntecedentePatologico.DolorOido = objEntity.Find(p => p.Nombre.Contains("Dolor Oido")) == null ? " " : "X";
                FichaAntecedentePatologico.SecrecionOido = objEntity.Find(p => p.Nombre.Contains("Secrecion Oido")) == null ? " " : "X";
                FichaAntecedentePatologico.Palpitcion = objEntity.Find(p => p.Nombre.Contains("Palpitcion")) == null ? " " : "X";
                FichaAntecedentePatologico.Adormecimiento = objEntity.Find(p => p.Nombre.Contains("Adormecimiento")) == null ? " " : "X";
                FichaAntecedentePatologico.PesadillaFrecuente = objEntity.Find(p => p.Nombre.Contains("Pesadilla Frecuente")) == null ? " " : "X";
                FichaAntecedentePatologico.DolorMuscular = objEntity.Find(p => p.Nombre.Contains("Dolor Muscular")) == null ? " " : "X";
                FichaAntecedentePatologico.TosCronico = objEntity.Find(p => p.Nombre.Contains("Tos Cronico")) == null ? " " : "X";
                FichaAntecedentePatologico.SangradoEncias = objEntity.Find(p => p.Nombre.Contains("Sangrado Encias")) == null ? " " : "X";

                var habitos = (from A in dbContext.noxioushabits
                                 where A.v_PersonId == pstrPacientId
                                 select new
                                 {
                                     TypeHabitId = A.i_TypeHabitsId,
                                     Frequency = A.v_Frequency,
                                     Comment =A.v_Comment
                                 }).ToList();

                FichaAntecedentePatologico.Fumar = habitos.Find(p => p.TypeHabitId == 1).Frequency;
                FichaAntecedentePatologico.NumeroCigarrillo = habitos.Find(p => p.TypeHabitId == 1).Comment;

                FichaAntecedentePatologico.Licor = habitos.Find(p => p.TypeHabitId == 2).Frequency;
                FichaAntecedentePatologico.TipoMasFrecuente = habitos.Find(p => p.TypeHabitId == 2).Comment;

                FichaAntecedentePatologico.Drogas = habitos.Find(p => p.TypeHabitId == 3).Frequency;
                FichaAntecedentePatologico.TipoProbado = habitos.Find(p => p.TypeHabitId == 3).Comment;

                FichaAntecedentePatologico.FechaAntecedenteQuirurgico = objEntity.Find(p => p.DiseasseId == "N009-DD000000637") == null ? "" : objEntity.Find(p => p.DiseasseId == "N009-DD000000637").FechaAntecedente.ToString();
                FichaAntecedentePatologico.OperacionAntecedenteQuirurgico = objEntity.Find(p => p.DiseasseId == "N009-DD000000637") == null ? "" : objEntity.Find(p => p.DiseasseId == "N009-DD000000637").Detalle;
                FichaAntecedentePatologico.DiasAntecedenteQuirurgico = objEntity.Find(p => p.DiseasseId == "N009-DD000000637") == null ? "" : objEntity.Find(p => p.DiseasseId == "N009-DD000000637").Tratamiento;
                FichaAntecedentePatologico.HospitalAntecedenteQuirurgico = objEntity.Find(p => p.DiseasseId == "N009-DD000000637") == null ? "" : objEntity.Find(p => p.DiseasseId == "N009-DD000000637").Hospital;
                FichaAntecedentePatologico.ComplicacionesAntecedenteQuirurgico = objEntity.Find(p => p.DiseasseId == "N009-DD000000637") == null ? "" : objEntity.Find(p => p.DiseasseId == "N009-DD000000637").Complicaciones;
                
                list.Add(FichaAntecedentePatologico);
                return list;
            }
            catch (Exception ex)
            {
                return null;
            }

        }

		public List<ReportToxicologico> GetReportToxicologico(string pstrServiceId, string pstrComponentId)
		{
			//mon.IsActive = true;
			var groupUbigeo = 113;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
								 from B in B_join.DefaultIfEmpty()

								 join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join P1 in dbContext.person on new { a = A.v_PersonId }
										 equals new { a = P1.v_PersonId } into P1_join
								 from P1 in P1_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrServiceId

								 select new ReportToxicologico
								 {
									 ServiceId = A.v_ServiceId,
									 Fecha = A.d_ServiceDate.Value,
									 FechaNacimiento = P1.d_Birthdate,
									 Trabajador = P1.v_FirstName + " " + P1.v_FirstLastName + " " + P1.v_SecondLastName,
									 Dni = P1.v_DocNumber,
									 EmpresaTrabajador = C.v_Name,
									 FirmaMedico = pme.b_SignatureImage,
									 FirmaTrabajador = P1.b_RubricImage,
									 HuellaTrabajador = P1.b_FingerPrintImage,
									 Puesto = P1.v_CurrentOccupation,
									 NOMBRE_EMPRESA_CLIENTE = C.v_Name,
								 });


				var MedicalCenter = GetInfoMedicalCenter();

				var sql = (from a in objEntity.ToList()

						   let TOXICOLOGICO_ANFETAMINAS = ValoresComponente(pstrServiceId, Constants.TOXICOLOGICO_ANFETAMINAS)
						   let TOXICOLOGICO_ALCOHOLEMIA = ValoresComponente(pstrServiceId, Constants.TOXICOLOGICO_ALCOHOLEMIA)
						   let TOXICOLOGICO_BENZODIAZEPINAS = ValoresComponente(pstrServiceId, Constants.TOXICOLOGICO_BENZODIAZEPINAS)
						   let TOXICOLOGICO_COLINESTERASA = ValoresComponente(pstrServiceId, Constants.TOXICOLOGICO_COLINESTERASA)
						   let CARBOXIHEMOGLOBINA = ValoresComponente(pstrServiceId, "N002-ME000000042")
						   let TOXICOLOGICO_COCAINA_MARIHUANA = ValoresComponente(pstrServiceId, Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID)
						   let LogoEmpresa = GetLogoMedicalCenter()
						   select new ReportToxicologico
						   {
							   LogoEmpresa = LogoEmpresa,
							   ServiceId = a.ServiceId,
							   Fecha = a.Fecha,
							   FechaNacimiento = a.FechaNacimiento,
							   Trabajador = a.Trabajador,
							   Dni = a.Dni,
							   EmpresaTrabajador = a.EmpresaTrabajador,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Puesto = a.Puesto,
							   Empresa = MedicalCenter.v_Name,

							   ANFETAMINA = TOXICOLOGICO_ANFETAMINAS.Count == 0 ? string.Empty : TOXICOLOGICO_ANFETAMINAS.Find(p => p.v_ComponentFieldId == "N009-MF000000391") == null ? "" : TOXICOLOGICO_ANFETAMINAS.Find(p => p.v_ComponentFieldId == "N009-MF000000391").v_Value1,

							   ALCOHOLEMIA = TOXICOLOGICO_ALCOHOLEMIA.Count == 0 ? string.Empty : TOXICOLOGICO_ALCOHOLEMIA.Find(p => p.v_ComponentFieldId == "N009-MF000000397") == null ? "" : TOXICOLOGICO_ALCOHOLEMIA.Find(p => p.v_ComponentFieldId == "N009-MF000000397").v_Value1,
							   ALCOHOLEMIA_DESEABLE = TOXICOLOGICO_ALCOHOLEMIA.Count == 0 ? string.Empty : TOXICOLOGICO_ALCOHOLEMIA.Find(p => p.v_ComponentFieldId == "N009-MF000002061") == null ? "" : TOXICOLOGICO_ALCOHOLEMIA.Find(p => p.v_ComponentFieldId == "N009-MF000002061").v_Value1,

							   BENZODIACEPINA = TOXICOLOGICO_BENZODIAZEPINAS.Count == 0 ? string.Empty : TOXICOLOGICO_BENZODIAZEPINAS.Find(p => p.v_ComponentFieldId == "N009-MF000000395") == null?"":TOXICOLOGICO_BENZODIAZEPINAS.Find(p => p.v_ComponentFieldId == "N009-MF000000395").v_Value1,
							   BENZODIACEPINA_DESEABLE = TOXICOLOGICO_BENZODIAZEPINAS.Count == 0 ? string.Empty : TOXICOLOGICO_BENZODIAZEPINAS.Find(p => p.v_ComponentFieldId == "N009-MF000000396") == null ? "" : TOXICOLOGICO_BENZODIAZEPINAS.Find(p => p.v_ComponentFieldId == "N009-MF000000396").v_Value1,


							   COLINESTERASA = TOXICOLOGICO_COLINESTERASA.Count == 0 ? string.Empty : TOXICOLOGICO_COLINESTERASA.Find(p => p.v_ComponentFieldId == "N009-MF000000393") == null ? "" : TOXICOLOGICO_COLINESTERASA.Find(p => p.v_ComponentFieldId == "N009-MF000000393").v_Value1,
							   COLINESTERASA_DESEABLE = TOXICOLOGICO_COLINESTERASA.Count == 0 ? string.Empty : TOXICOLOGICO_COLINESTERASA.Find(p => p.v_ComponentFieldId == "N009-MF000000394") == null ? "" : TOXICOLOGICO_COLINESTERASA.Find(p => p.v_ComponentFieldId == "N009-MF000000394").v_Value1,

							   CARBOXIHEMOGLOBINA = CARBOXIHEMOGLOBINA.Count == 0 ? string.Empty : CARBOXIHEMOGLOBINA.Find(p => p.v_ComponentFieldId == "N009-MF000000201") == null ? "" : CARBOXIHEMOGLOBINA.Find(p => p.v_ComponentFieldId == "N009-MF000000201").v_Value1,
							   CARBOXIHEMOGLOBINA_DESEABLE = CARBOXIHEMOGLOBINA.Count == 0 ? string.Empty : CARBOXIHEMOGLOBINA.Find(p => p.v_ComponentFieldId == "N009-MF000002062") == null ?"":CARBOXIHEMOGLOBINA.Find(p => p.v_ComponentFieldId == "N009-MF000002062").v_Value1,

							   Lote = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002799") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002799").v_Value1,
							   Lote_marihuana = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002814") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002814").v_Value1,
						   }).ToList();

				return sql;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

        public List<OstioCoimolache> GetReportOsteoCoimalache(string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;
            var groupUbigeo = 113;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from ser in dbContext.service
                                 join serCom in dbContext.servicecomponent on ser.v_ServiceId equals serCom.v_ServiceId
                                 join per in dbContext.person on ser.v_PersonId equals per.v_PersonId
                                 join doc in dbContext.datahierarchy on new { a = per.i_DocTypeId.Value, b = 106 } equals new { a = doc.i_ItemId, b = doc.i_GroupId } into doc_join
                                 from doc in doc_join.DefaultIfEmpty()
                                 join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId
                                 join empCli in dbContext.organization on prot.v_CustomerOrganizationId equals empCli.v_OrganizationId
                                 join empTrab in dbContext.organization on prot.v_WorkingOrganizationId equals empTrab.v_OrganizationId
                                 join empEmp in dbContext.organization on prot.v_EmployerOrganizationId equals empEmp.v_OrganizationId
                                 join gen in dbContext.systemparameter on new { a = per.i_DocTypeId.Value, b = 100 } equals new { a = gen.i_ParameterId, b = gen.i_GroupId } into gen_join
                                 from gen in gen_join.DefaultIfEmpty()
                                 join me in dbContext.systemuser on serCom.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()
                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where ser.v_ServiceId == pstrServiceId
                                 select new OstioCoimolache
                                 {
                                  ServiceId =ser.v_ServiceId,
                                  ServiceComponentId = serCom.v_ServiceComponentId,
                                  FechaServicio = ser.d_ServiceDate.Value,
                                  Nombres = per.v_FirstName,
                                  ApellidoPaterno = per.v_FirstLastName,
                                  ApellidoMaterno = per.v_SecondLastName,
                                  NombreCompleto = per.v_FirstLastName + " " + per.v_SecondLastName + " " + per.v_FirstName,
                                  FechaNacimiento = per.d_Birthdate.Value,
                                  //Edad = "",
                                  TipoDocumentoId = per.i_DocTypeId.Value,
                                  TipoDocumento = doc.v_Value1,
                                  NroDocumento = per.v_DocNumber,
                                  EmpresaCliente = empCli.v_Name,
                                  EmpresaTrabajo = empTrab.v_Name,
                                  EmpresaEmpleadora = empEmp.v_Name,
                                  Puesto = per.v_CurrentOccupation,
                                  GeneroId = per.i_SexTypeId.Value,
                                  Genero = gen.v_Value1,
                                  FirmaTrabajador = per.b_RubricImage,
                                  HuellaTrabajador = per.b_FingerPrintImage,
                                  FirmaUsuarioGraba = pme.b_SignatureImage
                                 });


                var MedicalCenter = GetInfoMedicalCenter();
                var Valores = ValoresComponente(pstrServiceId, pstrComponentId).ToList();
                var sql = (from a in objEntity.ToList()
                           select new OstioCoimolache
                           {
                                ServiceId =a.ServiceId,
                                ServiceComponentId = a.ServiceComponentId,
                                FechaServicio = a.FechaServicio,
                                Nombres = a.Nombres,
                                ApellidoPaterno = a.ApellidoPaterno,
                                ApellidoMaterno = a.ApellidoMaterno,
                                NombreCompleto = a.NombreCompleto,
                                FechaNacimiento = a.FechaNacimiento,
                                Edad = GetAge(a.FechaNacimiento.Value),
                                TipoDocumentoId = a.TipoDocumentoId,
                                TipoDocumento = a.TipoDocumento,
                                NroDocumento = a.NroDocumento,
                                EmpresaCliente = a.EmpresaCliente,
                                EmpresaTrabajo = a.EmpresaTrabajo,
                                EmpresaEmpleadora = a.EmpresaEmpleadora,
                                Puesto = a.Puesto,
                                GeneroId = a.GeneroId,
                                Genero = a.Genero,
                                FirmaTrabajador = a.FirmaTrabajador,
                                HuellaTrabajador = a.HuellaTrabajador,
                                FirmaUsuarioGraba = a.FirmaUsuarioGraba,

                                Escoliosis = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003136") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003136").v_Value1,
                                Cifosis = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003137") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003137").v_Value1,
                                Lordosis = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003138") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003138").v_Value1,
                                EscoliosisComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003139") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003139").v_Value1,
                                CifosisComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003140") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003140").v_Value1,
                                LordosisComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003141") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003141").v_Value1,
                                FlexionAdelante = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003142") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003142").v_Value1,
                                Hiperextesion = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003144") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003144").v_Value1,
                                FlexionIzquierdo = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003146") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003146").v_Value1,
                                FlexionDerecho = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003148") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003148").v_Value1,

                                RotacionIzquierdo = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003150") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003150").v_Value1,
                                RotacionDerecho = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003152") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003152").v_Value1,
                                FuerzaLevantase = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003154") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003154").v_Value1,
                                FlexionAdelanteComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003143") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003143").v_Value1,
                                HiperextesionComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003145") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003145").v_Value1,
                                FlexionIzquierdoComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003147") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003147").v_Value1,
                                FlexionDerechoComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003149") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003149").v_Value1,
                                RotacionIzquierdoComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003151") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003151").v_Value1,
                                RotacionDerechoComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003153") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003153").v_Value1,
                                FuerzaLevantaseComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003155") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003155").v_Value1,

                                Corriendo = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003156") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003156").v_Value1,
                                Caminando = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003158") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003158").v_Value1,
                                PonerseCuclilla = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003160") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003160").v_Value1,
                                CorriendoComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003157") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003157").v_Value1,
                                CaminandoComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003159") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003159").v_Value1,
                                PonerseCuclillaComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003161") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003161").v_Value1,
                                CodoIzquierdo = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003162") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003162").v_Value1,
                                CodoDerecho = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003163") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003163").v_Value1,
                                RodillaIzquierdo = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003164") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003164").v_Value1,
                                RodillaDerecho = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003165") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003165").v_Value1,

                                Abdomen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003166") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003166").v_Value1,
                                Cadera = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003168") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003168").v_Value1,
                                Muslo = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003167") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003167").v_Value1,
                                Lateral = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003169") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003169").v_Value1,
                                AbdomenComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003175") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003175").v_Value1,
                                CaderaComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003176") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003176").v_Value1,
                                MusloComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003178") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003178").v_Value1,
                                LateralComen = Valores.Count == 0 ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003177") == null ? "" : Valores.Find(p => p.v_ComponentFieldId == "N009-MF000003177").v_Value1,
                            
                             }).ToList();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


		public List<ReportToxicologico> GetReportCocainaMarihuana(string pstrServiceId, string pstrComponentId)
		{
			//mon.IsActive = true;
			var groupUbigeo = 113;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
								 from B in B_join.DefaultIfEmpty()

								 join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
								 from C in C_join.DefaultIfEmpty()

								 join P1 in dbContext.person on new { a = A.v_PersonId }
										 equals new { a = P1.v_PersonId } into P1_join
								 from P1 in P1_join.DefaultIfEmpty()

								 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
																	 equals new { a = E.v_ServiceId, b = E.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 where A.v_ServiceId == pstrServiceId

								 select new ReportToxicologico
								 {
									 ServiceId = A.v_ServiceId,
									 Fecha = A.d_ServiceDate.Value,
									 FechaNacimiento = P1.d_Birthdate,

									 Trabajador = P1.v_FirstName + " " + P1.v_FirstLastName + " " + P1.v_SecondLastName,
									 Dni = P1.v_DocNumber,
									 EmpresaTrabajador = C.v_Name,
									 FirmaMedico = pme.b_SignatureImage,
									 FirmaTrabajador = P1.b_RubricImage,
									 HuellaTrabajador = P1.b_FingerPrintImage,
									 Puesto = P1.v_CurrentOccupation,
									 NOMBRE_EMPRESA_CLIENTE = C.v_Name,
								 });


				var MedicalCenter = GetInfoMedicalCenter();
			    var TOXICOLOGICO_COCAINA_MARIHUANA = ValoresComponente(pstrServiceId, Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID);
			    var LogoEmpresa = GetLogoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReportToxicologico
						   {
							   LogoEmpresa = LogoEmpresa,
							   ServiceId = a.ServiceId,
							   Fecha = a.Fecha,
							   FechaNacimiento = a.FechaNacimiento,
							   Edad = GetAge(a.FechaNacimiento.Value),
							   Trabajador = a.Trabajador,
							   Dni = a.Dni,
							   EmpresaTrabajador = a.EmpresaTrabajador,
							   FirmaMedico = a.FirmaMedico,
							   FirmaTrabajador = a.FirmaTrabajador,
							   HuellaTrabajador = a.HuellaTrabajador,
							   Puesto = a.Puesto,
							   Empresa = MedicalCenter.v_Name,
                               COCAINA = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000000705") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000000705").v_Value1,
                               MARIHUANA = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001294") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001294").v_Value1,


							   MUESTRA = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001374") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001374").v_Value1,
                               METODO = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001375") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001375").v_Value1,

							   _1SUFRE_ENFREMEDAD = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001407") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001407").v_Value1,
							   _1DIGA = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001408") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001408").v_Value1,
							   _2CONSUME_MEDICAMENTO = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001398") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001398").v_Value1,
                               _2DIGA = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001399") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001399").v_Value1,
							   _3TOMA_MATE = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001400") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001400").v_Value1,
                               _3CUANTAS_VECES = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001401").v_Value1,
                               _3CUANDO_ULTIMA_VEZ = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001403") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001403").v_Value1,
							   _4CONSUME_PRODUCTOS = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001404") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001404").v_Value1,
                               _4CUANTAS_VECES = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001409") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001409").v_Value1,
                               _4CUANDO_ULTIMA_VEZ = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001405") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001405").v_Value1,
							   _5ANESTESIA = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001406") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001406").v_Value1,
							   Lote = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002799") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002799").v_Value1,
							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrServiceId, "N009-ME000000053"),
							   NOMBRE_EMPRESA_CLIENTE = a.NOMBRE_EMPRESA_CLIENTE,
                               Motivo_Prueba = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001376") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000001376").v_Value1Name,
							   Lote_marihuana = TOXICOLOGICO_COCAINA_MARIHUANA.Count == 0 ? string.Empty : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002814") == null ? "" : TOXICOLOGICO_COCAINA_MARIHUANA.Find(p => p.v_ComponentFieldId == "N009-MF000002814").v_Value1,
						   }).ToList();

				return sql;
			}
			catch (Exception ex)
			{
				return null;
			}
		}

		public List<AutoevaTrabEquipo> ReporteAutoevaTrabEquipo(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new AutoevaTrabEquipo
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_FirstLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new AutoevaTrabEquipo
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   __1ME_SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002502") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002502").v_Value1,
							   __2ME_SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002503") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002503").v_Value1,
							   __3RECIBO_RE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002504") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002504").v_Value1,
							   __4TENGO_UNA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002505") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002505").v_Value1,
							   __5TENGO_LIB = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002506") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002506").v_Value1,
							   __6SE_RESOLV = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002507") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002507").v_Value1,
							   __7TENGO_CON = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002508") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002508").v_Value1,
							   __8SOY_PRODU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002509") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002509").v_Value1,
							   __9TENGO_UN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF0000025210") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF0000025210").v_Value1,
							   __10TRABAJO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002511") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002511").v_Value1,
							   __11ESTOY_DE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002512") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002512").v_Value1,
							   __12RESPALDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002513") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002513").v_Value1,
							   __13MI_TRABAJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002514") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002514").v_Value1,


							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002515") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002515").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000309"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteCuestionariogradodeafectividad> ReporteCuestionariogradodeafectividad(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteCuestionariogradodeafectividad
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteCuestionariogradodeafectividad
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1TE_ENCUE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002516") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002516").v_Value1,
							   _2DUERMES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002517") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002517").v_Value1,
							   _3DESPIERT = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002518") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002518").v_Value1,
							   _4TIENES_A = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002519") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002519").v_Value1,
							   _5HAS_CAMI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002520") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002520").v_Value1,
							   _6A_VECES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002521") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002521").v_Value1,
							   _7TE_NOTAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002522") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002522").v_Value1,
							   _8TE_PONES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002523") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002523").v_Value1,
							   _9SUFRES_D = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002524") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002524").v_Value1,
							   _10ERES_TI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002525") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002525").v_Value1,
							   _11HAS_SEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002526") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002526").v_Value1,
							   _12SIENTES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002527") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002527").v_Value1,
							   _13TE_DIST = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002528") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002528").v_Value1,

							   _14TE_CUES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002529") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002529").v_Value1,
							   _15TIENES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002530") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002530").v_Value1,
							   _16TE_SOFO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002531") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002531").v_Value1,
							   _17TE_HACE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002532") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002532").v_Value1,
							   _18TE_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002533") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002533").v_Value1,
							   _19TE_CUES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002534") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002534").v_Value1,
							   _20TE_ENOJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002535") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002535").v_Value1,
							   _21TE_COME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002536") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002536").v_Value1,
							   _22TE_AGRA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002537") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002537").v_Value1,
							   _23TE_GUST = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002538") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002538").v_Value1,
							   _24TE_ACEP = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002539") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002539").v_Value1,
							   _25PUEDES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002540") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002540").v_Value1,
							   _26TE_CONS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002541") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002541").v_Value1,
							   _27HAS_TEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002542") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002542").v_Value1,
							   _28TE_HAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002543") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002543").v_Value1,
							   _29SIENTES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002544") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002544").v_Value1,
							   _30TE_PARE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002545") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002545").v_Value1,


							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002515") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002515").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000304"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteFobiasocial01> ReporteFobiaSocial01(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteFobiasocial01
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteFobiasocial01
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1CASI_NU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002547") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002547").v_Value1,
							   _2ME_PREO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002548") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002548").v_Value1,
							   _3ME_PONG = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002549") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002549").v_Value1,
							   _4NO_ME_P = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002550") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002550").v_Value1,
							   _5ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002551") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002551").v_Value1,
							   _6LAS_OPI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002552") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002552").v_Value1,
							   _7TEMO_A = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002553") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002553").v_Value1,
							   _8APENAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002554") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002554").v_Value1,
							   _9TEMO_A = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002555") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002555").v_Value1,
							   _10LA_DES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002556") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002556").v_Value1,
							   _11SI_ALG = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002557") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002557").v_Value1,
							   _12RARAME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002558") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002558").v_Value1,
							   _13TENGO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002559") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002559").v_Value1,

							   _14ME_DA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002560") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002560").v_Value1,
							   _15LAS_OP = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002561") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002561").v_Value1,
							   _16NO_ME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002562") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002562").v_Value1,
							   _17CUANDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002563") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002563").v_Value1,
							   _18CREO_Q = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002564") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002564").v_Value1,
							   _19GENERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002565") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002565").v_Value1,
							   _20ME_PRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002566") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002566").v_Value1,
							   _21SI_SE_Q = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002567") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002567").v_Value1,
							   _22ME_PRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002568") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002568").v_Value1,
							   _23ME_PRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002569") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002569").v_Value1,
							   _24A_VECE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002570") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002570").v_Value1,
							   _25A_MENU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002571") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002571").v_Value1,
							   _26A_MENU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002572") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002572").v_Value1,
							   _27GENERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002573") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002573").v_Value1,
							   _28A_MENU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002574") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002574").v_Value1,
							   _29ME_OBS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002575") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002575").v_Value1,
							   _30ME_PON = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002576") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002576").v_Value1,


							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002577") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002577").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000305"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteFobiasocial02> ReporteFobiaSocial02(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteFobiasocial02
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteFobiasocial02
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002578") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002578").v_Value1,
							   _2INTENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002579") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002579").v_Value1,
							   _3NORMALM = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002580") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002580").v_Value1,
							   _4GENERAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002581") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002581").v_Value1,
							   _5A_MENUD = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002582") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002582").v_Value1,
							   _6GENERAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002583") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002583").v_Value1,
							   _7NORMALM = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002584") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002584").v_Value1,
							   _8PROCURO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002585") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002585").v_Value1,
							   _9SI_TENG = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002586") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002586").v_Value1,
							   _10A_MENU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002587") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002587").v_Value1,
							   _11SI_NO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002588") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002588").v_Value1,
							   _12NORMAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002589") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002589").v_Value1,
							   _13A_MENU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002590") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002590").v_Value1,

							   _14NORMAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002591") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002591").v_Value1,
							   _15NORMAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002592") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002592").v_Value1,
							   _16CUANDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002593") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002593").v_Value1,
							   _17PUEDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002594") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002594").v_Value1,
							   _18NORMAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002595") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002595").v_Value1,
							   _19CUANDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002596") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002596").v_Value1,
							   _20CUANDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002597") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002597").v_Value1,
							   _21PROCUR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002598") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002598").v_Value1,
							   _22NO_ME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002599") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002599").v_Value1,
							   _23RARAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002600") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002600").v_Value1,
							   _24GENERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002601") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002601").v_Value1,
							   _25ALGUNA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002602") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002602").v_Value1,
							   _26PROCUR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002603") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002603").v_Value1,
							   _27GENERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002604") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002604").v_Value1,
							   _28CREO_Q = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002605") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002605").v_Value1,
							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002606") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002606").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000306"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteTestdepersonalldad> ReporteTestdepersonalldad(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteTestdepersonalldad
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteTestdepersonalldad
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1CREE_QU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002607") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002607").v_Value1,
							   _2SIEMPRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002608") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002608").v_Value1,
							   _3SE_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002609") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002609").v_Value1,
							   _4_ACOST = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002610") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002610").v_Value1,
							   __5TIENE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002611") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002611").v_Value1,
							   __6SE_SIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002612") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002612").v_Value1,
							   __7CONSID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002613") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002613").v_Value1,
							   __8ENCUEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002614") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002614").v_Value1,
							   __9SE_IMP = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002615") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002615").v_Value1,
							   __10ES__U = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002616") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002616").v_Value1,
							   __11SE_ES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002617") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002617").v_Value1,
							   __12MIENT = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002618") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002618").v_Value1,
							   _13TIENE_U = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002619") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002619").v_Value1,

							   __14ENCUE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002620") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002620").v_Value1,
							   _15SE_SIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002621") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002621").v_Value1,
							   _16LLNTEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002622") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002622").v_Value1,
							   _17AL_CON = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002623") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002623").v_Value1,
							   _18SE_SOM = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002624") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002624").v_Value1,
							   _19APRIET = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002625") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002625").v_Value1,
							   _20LLEVA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002626") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002626").v_Value1,
							   _21ACOSTU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002627") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002627").v_Value1,
							   __22SE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002628") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002628").v_Value1,
							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002629") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002629").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000307"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteFobiasocialAdmin> ReporteFobiasocialAdmin(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteFobiasocialAdmin
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteFobiasocialAdmin
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1TENGO_M = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002630") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002630").v_Value1,
							   _2ME_MOLE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002632") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002632").v_Value1,
							   _3LAS_FIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002633") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002633").v_Value1,

							   _4EVITO_H = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002634") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002634").v_Value1,
							   _5ME_DA_M = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002635") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002635").v_Value1,
							   _6POR_TEM = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002636") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002636").v_Value1,
							   _7SUDAR_E = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002637") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002637").v_Value1,

							   _8EVITO_I = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002638") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002638").v_Value1,
							   _9EVITO_A = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002639") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002639").v_Value1,
							   _10HABLAR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002640") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002640").v_Value1,
							   _11EVITO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002641") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002641").v_Value1,

							   _12EVITO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002642") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002642").v_Value1,
							   _13ME_DAN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002643") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002643").v_Value1,

							   _14TEMO_H = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002644") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002644").v_Value1,
							   _15ENTRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002645") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002645").v_Value1,
							   _16EVITO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002646") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002646").v_Value1,
							   _17EVITO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002647") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002647").v_Value1,
							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002648") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002648").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000308"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteTestdefatiga> ReporteTestdefatiga(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteTestdefatiga
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteTestdefatiga
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1ESTOY_M = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002649") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002649").v_Value1,
							   _2HACER_E = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002650") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002650").v_Value1,
							   _3ME_CANS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002651") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002651").v_Value1,
							   _4EL_CANS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002652") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002652").v_Value1,

							   _5EL_CANS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002653") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002653").v_Value1,
							   _6MI_CANS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002654") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002654").v_Value1,

							   _7EL_CANS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002655") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002655").v_Value1,
							   _8LA_FATI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002656") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002656").v_Value1,
							   _9EL_CANS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002657") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002657").v_Value1,

							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N002-MF000000271") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N002-MF000000271").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N002-ME000000034"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteMaslachestres> ReporteMaslachestres(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteMaslachestres
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteMaslachestres
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1DEBIDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002658") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002658").v_Value1,
							   _2AL_FINA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002659") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002659").v_Value1,
							   _3ME_ENCU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002660") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002660").v_Value1,
							   _4PUEDO_E = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002661") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002661").v_Value1,

							   _5CREO_QU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002662") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002662").v_Value1,
							   _6TRABAJA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002663") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002663").v_Value1,

							   _7ME_ENFR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002664") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002664").v_Value1,
							   _8ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002665") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002665").v_Value1,
							   _9SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002666") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002666").v_Value1,

							   _10CREO_Q = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002667") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002667").v_Value1,

							   _11ME_PRE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002668") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002668").v_Value1,
							   _12ME_ENC = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002669") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002669").v_Value1,
							   _13ME_SIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002670") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002670").v_Value1,
							   _14SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002671") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002671").v_Value1,

							   _15REALME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002672") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002672").v_Value1,
							   _16TRABAJ = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002673") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002673").v_Value1,
							   _17TENGO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002674") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002674").v_Value1,
							   _18ME_ENC = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002675") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002675").v_Value1,

							   _19HE_REA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002676") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002676").v_Value1,
							   _20EN_EL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002677") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002677").v_Value1,
							   _21SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002678") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002678").v_Value1,
							   _22SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002679") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002679").v_Value1,


							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N002-MF000000340") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N002-MF000000340").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N002-ME000000036"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteTestdeansiedad> ReporteTestdeansiedad(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteTestdeansiedad
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteTestdeansiedad
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1ME_SIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002680") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002680").v_Value1,
							   _2ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002681") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002681").v_Value1,
							   _3DESPIER = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002682") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002682").v_Value1,
							   _4ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002683") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002683").v_Value1,

							   _5SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002684") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002684").v_Value1,
							   _6ME_TIEM = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002685") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002685").v_Value1,

							   _7ME_MORT = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002686") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002686").v_Value1,
							   _8ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002687") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002687").v_Value1,
							   _9ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002688") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002688").v_Value1,

							   _10PUEDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002689") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002689").v_Value1,
							   _11SUFRO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002690") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002690").v_Value1,
							   _12SUFRO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002691") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002691").v_Value1,

							   _13PUEDO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002692") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002692").v_Value1,
							   _14SE_ME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002693") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002693").v_Value1,
							   _15SUFRO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002694") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002694").v_Value1,
							   _16ORINO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002695") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002695").v_Value1,

							   _17GENERA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002696") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002696").v_Value1,
							   _18SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002697") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002697").v_Value1,
							   _19ME_QUE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002698") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002698").v_Value1,
							   _20TENGO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002699") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002699").v_Value1,

							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000000193") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000000193").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N002-ME000000039"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteTestdedepresion> ReporteTestdedepresion(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteTestdedepresion
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteTestdedepresion
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1ME_SIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002700") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002700").v_Value1,
							   _2POR_LA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002701") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002701").v_Value1,
							   _3TENGO_G = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002702") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002702").v_Value1,
							   _4ME_CUES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002703") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002703").v_Value1,

							   _5COMO_IG = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002704") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002704").v_Value1,
							   _6A_UN_TE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002705") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002705").v_Value1,

							   _7NOTO_QU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002706") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002706").v_Value1,
							   _8ESTOY_E = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002707") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002707").v_Value1,
							   _9EL_CORA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002708") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002708").v_Value1,

							   _10ME_CAN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002709") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002709").v_Value1,
							   _11MI_MEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002710") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002710").v_Value1,
							   _12HAGO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002711") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002711").v_Value1,

							   _13ME_SIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002712") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002712").v_Value1,
							   _14TENGO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002713") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002713").v_Value1,
							   _15ESTOY = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002714") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002714").v_Value1,
							   _16ENCUEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002715") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002715").v_Value1,

							   _17SIENTO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002716") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002716").v_Value1,
							   _18ENCUEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002717") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002717").v_Value1,
							   _19CREO_Q = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002718") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002718").v_Value1,
							   _20ME_GUS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002719") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002719").v_Value1,

							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000000195") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000000195").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N002-ME000000037"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<ReporteCuestionarioAutoeva> ReporteCuestionarioAutoeva(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteCuestionarioAutoeva
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteCuestionarioAutoeva
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1TIENEFREC = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002721") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002721").v_Value1,
							   _2TIENEPOCO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002722") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002722").v_Value1,
							   _3DUERMEMAL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002723") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002723").v_Value1,
							   _4SEASUSTA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002724") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002724").v_Value1,
							   _5SESIENTE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002725") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002725").v_Value1,
							   _6LETIEMBLA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002726") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002726").v_Value1,
							   _7TIENEMALA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002727") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002727").v_Value1,
							   _8TIENEPROB = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002728") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002728").v_Value1,
							   _9SESIENTE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002729") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002729").v_Value1,
							   _10LLORAMAS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002730") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002730").v_Value1,
							   _11ENCUENTRA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002731") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002731").v_Value1,
							   _12ENCUENTRA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002732") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002732").v_Value1,
							   _13ESTASUFR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002733") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002733").v_Value1,
							   _14ESINCAPA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002734") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002734").v_Value1,
							   _15HAPERDID = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002735") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002735").v_Value1,
							   _16SIENTEQU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002736") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002736").v_Value1,
							   _17HAPASADO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002737") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002737").v_Value1,
							   _18SESIENTE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002738") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002738").v_Value1,
							   _19TIENESEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002739") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002739").v_Value1,
							   _20SECANSA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002740") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002740").v_Value1,
							   _21TOMAALCO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002741") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002741").v_Value1,
							   _22SIENTEQU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002742") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002742").v_Value1,
							   _23SEHADAD = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002743") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002743").v_Value1,
							   _24ALGUNAVE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002744") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002744").v_Value1,
							   _25TIENESUE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002745") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002745").v_Value1,
							   _26EVITAACT = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002746") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002746").v_Value1,
							   _27PARECEME = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002747") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002747").v_Value1,
							   _28SESIENTE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002748") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002748").v_Value1,
							   _29TIENEPRO = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002749") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002749").v_Value1,

							   PUNTAJE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002750") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002750").v_Value1,

							   DIAGNOSTICO_EXAMEN = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000310"),
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<MatrizAbreviada> ReporteAseguradoraAbreviada(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
		{

			try
			{
				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					List<string> ServicioIds = new List<string>();
					List<string> PersonIds = new List<string>();
					var objEntity = from A in dbContext.service
									join B in dbContext.person on A.v_PersonId equals B.v_PersonId

									join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
									from C in C_join.DefaultIfEmpty()

									join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
									from D in D_join.DefaultIfEmpty()

									join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
									   equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
									from J4 in J4_join.DefaultIfEmpty()

									join et in dbContext.systemparameter on new { a = C.i_EsoTypeId.Value, b = 118 }
												equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
									from et in et_join.DefaultIfEmpty()

									join su in dbContext.systemuser on A.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
									from su in su_join.DefaultIfEmpty()

									join B1 in dbContext.person on su.v_PersonId equals B1.v_PersonId into B1_join
									from B1 in B1_join.DefaultIfEmpty()

									join H1 in dbContext.systemparameter on new { a = B.i_BloodGroupId.Value, b = 154 }
											  equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
									from H1 in H1_join.DefaultIfEmpty()

									join H2 in dbContext.systemparameter on new { a = B.i_BloodFactorId.Value, b = 155 }
																			equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
									from H2 in H2_join.DefaultIfEmpty()


									join F in dbContext.groupoccupation on C.v_GroupOccupationId equals F.v_GroupOccupationId

									join G in dbContext.calendar on A.v_ServiceId equals G.v_ServiceId
									join K in dbContext.calendar on new { a = A.v_ServiceId, b = 1 } equals new { a = K.v_ServiceId, b = K.i_LineStatusId.Value }


									where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin
									//&& C.v_ProtocolId != "N009-PR000000044"

									select new MatrizAbreviada
									{
										ServiceId = A.v_ServiceId,
										Nombre_Completo = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
										DNI = B.v_DocNumber,
										Examen_Solicitado_Por = D.v_Name,
										Tipo_Examen = et.v_Value1,
										Grupo_Riesgo = F.v_Name,
										Puesto_Postula = B.v_CurrentOccupation,
										Fecha_Examen = A.d_ServiceDate.Value,
										Grupo_Sanguineo = H1.v_Value1 + " " + H2.v_Value1,
										Aptitud_Medica = J4.v_Value1,
										Medico_Ocupacional = B1.v_FirstLastName + " " + B1.v_SecondLastName + " " + B1.v_FirstName,
										v_CustomerOrganizationId = C.v_CustomerOrganizationId,
										v_CustomerLocationId = C.v_CustomerLocationId,
										IdProtocolId = C.v_ProtocolId,
										FechaNacimiento = B.d_Birthdate.Value,
										d_HoraInicio = G.d_CircuitStartDate.Value,
										d_Horafin = G.d_SalidaCM.Value,
										IdTrabajador = B.v_PersonId
									};


					if (!string.IsNullOrEmpty(pstrFilterExpression))
					{
						objEntity = objEntity.Where(pstrFilterExpression);
					}

					foreach (var item in objEntity)
					{
						PersonIds.Add(item.IdTrabajador);
						ServicioIds.Add(item.ServiceId);
					}

					var varValores = DevolverValorCampoPorServicioMejorado(ServicioIds);

					var sql = (from a in objEntity.ToList()

							   let Grupo = varValores.Find(p => p.ServicioId == a.ServiceId).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.ServiceId).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.ServiceId).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).ValorName
							   let Factor = varValores.Find(p => p.ServicioId == a.ServiceId).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.ServiceId).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.ServiceId).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).ValorName

							   select new MatrizAbreviada
							   {
								   v_CustomerOrganizationId = a.v_CustomerOrganizationId,
								   v_CustomerLocationId = a.v_CustomerLocationId,
								   IdProtocolId = a.IdProtocolId,
								   ServiceId = a.ServiceId,
								   Nombre_Completo = a.Nombre_Completo,
								   DNI = a.DNI,
								   Examen_Solicitado_Por = a.Examen_Solicitado_Por,
								   Tipo_Examen = a.Tipo_Examen,
								   Grupo_Riesgo = a.Grupo_Riesgo,
								   Puesto_Postula = a.Puesto_Postula,
								   Fecha_Examen = a.Fecha_Examen,
								   Grupo_Sanguineo = Grupo + " - " + Factor,//a.Grupo_Sanguineo,
								   Resumen_Medico = ConcatenateDxForServiceDifNormal(a.ServiceId),
								   Recomendaciones = ConcatenateRecommendationByServiceDifNormal(a.ServiceId),
								   Restricciones = ConcatenateRestrictionByService(a.ServiceId),
								   Aptitud_Medica = a.Aptitud_Medica,
								   Medico_Ocupacional = a.Medico_Ocupacional,
								   FechaNacimiento = a.FechaNacimiento,
								   Edad = GetAge(a.FechaNacimiento.Value),
								   HoraInicio = a.d_HoraInicio == null ? " " : a.d_HoraInicio.Value.ToString("HH:mm"),
								   Horafin = a.d_Horafin == null ? " " : a.d_Horafin.Value.ToString("HH:mm"),

							   }).ToList();

					return sql;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		//public List<RecomendationList> GetServiceRecommendationByServiceIdConcatenado(string pstrServiceId)
		//{
		//    //mon.IsActive = true;

		//    try
		//    {
		//        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

		//        List<RecomendationList> query = (from ddd in dbContext.recommendation
		//                                         join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
		//                                                                         equals fff.v_DiagnosticRepositoryId into J7_join
		//                                         from fff in J7_join.DefaultIfEmpty()

		//                                         join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

		//                                         join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
		//                                                         equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
		//                                         from J1 in J1_join.DefaultIfEmpty()

		//                                         join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
		//                                                                         equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
		//                                         from J2 in J2_join.DefaultIfEmpty()
		//                                         where (ddd.v_ServiceId == pstrServiceId) &&
		//                                         (ddd.i_IsDeleted == 0) && (fff.i_IsDeleted == 0) &&
		//                                         (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
		//                                         fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
		//                                         select new RecomendationList
		//                                         {
		//                                             v_RecommendationId = ddd.v_RecommendationId,
		//                                             v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
		//                                             v_ServiceId = ddd.v_ServiceId,
		//                                             v_ComponentId = ddd.v_ComponentId,
		//                                             v_MasterRecommendationId = ddd.v_MasterRecommendationId,
		//                                             v_RecommendationName = eee.v_Name,
		//                                             i_RecordStatus = (int)RecordStatus.Grabado,
		//                                             i_RecordType = (int)RecordType.NoTemporal,
		//                                             i_IsDeleted = ddd.i_IsDeleted
		//                                         }).ToList();



		//        return query1;
		//    }
		//    catch (Exception ex)
		//    {
		//        return null;
		//    }
		//}

		public List<ObtenerIdsImporacion> ObtenerIdsParaImportacionExcel(List<string> ServiceIds, int CategoriaId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				List<Sigesoft.Node.WinClient.BE.ObtenerIdsImporacion> objEntity = null;

				objEntity = (from a in dbContext.servicecomponent
							 join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
							 join c in dbContext.service on a.v_ServiceId equals c.v_ServiceId
							 join d in dbContext.person on c.v_PersonId equals d.v_PersonId
							 where b.i_CategoryId == CategoriaId && ServiceIds.Contains(c.v_ServiceId)
							 //orderby b.i_UIIndex
							 select new ObtenerIdsImporacion
							 {
								 ServicioId = c.v_ServiceId,
								 ServicioComponentId = a.v_ServiceComponentId,
								 ComponentId = a.v_ComponentId,
								 PersonId = c.v_PersonId,
								 Paciente = d.v_FirstLastName + " " + d.v_SecondLastName + " " + d.v_FirstName,
								 DNI = d.v_DocNumber,
								 CategoriaId = b.i_CategoryId.Value,
								 i_UIIndex = b.i_UIIndex.Value
							 }).ToList();

				objEntity.Sort((x, y) => x.ComponentId.CompareTo(y.ComponentId));

				var objData = objEntity.AsEnumerable()
						   .GroupBy(x => new { x.CategoriaId, x.ServicioId })
						   .Select(group => group.First())
						   .OrderBy(o => o.i_UIIndex);



				return objData.ToList();
			}
			catch (Exception ex)
			{

				return null;
			}
		}

		public List<ObtenerIdsImporacion> ObtenerIdsParaImportacion(List<string> ServiceIds, int CategoriaId)
		{
			//mon.IsActive = true;
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				List<Sigesoft.Node.WinClient.BE.ObtenerIdsImporacion> objEntity = null;

				objEntity = (from a in dbContext.servicecomponent
							 join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
							 join c in dbContext.service on a.v_ServiceId equals c.v_ServiceId
							 join d in dbContext.person on c.v_PersonId equals d.v_PersonId
							 where b.i_CategoryId == CategoriaId && ServiceIds.Contains(c.v_ServiceId)
							 //orderby b.i_UIIndex
							 select new ObtenerIdsImporacion
							 {
								 ServicioId = c.v_ServiceId,
								 ServicioComponentId = a.v_ServiceComponentId,
								 ComponentId = a.v_ComponentId,
								 PersonId = c.v_PersonId,
								 Paciente = d.v_FirstLastName + " " + d.v_SecondLastName + " " + d.v_FirstName,
								 DNI = d.v_DocNumber,
								 CategoriaId = b.i_CategoryId.Value,
								 i_UIIndex = b.i_UIIndex.Value
							 }).ToList();

				//objEntity.Sort((x, y) => x.ComponentId.CompareTo(y.ComponentId));

				//var objData = objEntity.AsEnumerable()
				//           .GroupBy(x => new { x.CategoriaId, x.ServicioId })
				//           .Select(group => group.First())
				//           .OrderBy(o => o.i_UIIndex);

				return objEntity.ToList();
			}
			catch (Exception ex)
			{

				return null;
			}
		}

		public List<ServiceComponentFieldsList> GetServiceComponentFields_(string pstrServiceComponentId, string pstrServiceId)
		{
			var isDeleted = (int)SiNo.NO;
			var isDeleted1 = (int)SiNo.NO;
			string serviceId = pstrServiceId;
			var serviceComponentId = pstrServiceComponentId;

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			#region serviceComponentFieldValues

			var serviceComponentFieldValues = (from s in dbContext.service
											   join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
											   join scfs in dbContext.servicecomponentfields on sc.v_ServiceComponentId equals scfs.v_ServiceComponentId
											   join A in dbContext.servicecomponentfieldvalues on scfs.v_ServiceComponentFieldsId equals A.v_ServiceComponentFieldsId

											   where s.v_ServiceId == pstrServiceId &&
													 A.i_IsDeleted == isDeleted

											   select new ServiceComponentFieldValuesList
											   {
												   v_ComponentFieldId = scfs.v_ComponentFieldId,
												   v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
												   v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
												   v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
												   v_Value1 = A.v_Value1,
												   v_Value2 = A.v_Value2,
												   i_Index = A.i_Index,
												   i_Value1 = A.i_Value1,
											   }).ToList();

			#endregion

			var serviceComponentFields = (from A in dbContext.servicecomponentfields
										  join ss in
											  (from jjj in dbContext.diagnosticrepository
											   where //(jjj.v_ComponentFieldId == "") &&
													 (jjj.v_ServiceId == serviceId) &&
													 (jjj.i_IsDeleted == 0)

											   select new
											   {
												   v_ComponentFieldId = jjj.v_ComponentFieldId,
												   i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
											   }) on A.v_ComponentFieldId equals ss.v_ComponentFieldId into feePayments

										  from ss in feePayments.DefaultIfEmpty()

										  where (A.v_ServiceComponentId == serviceComponentId) &&
												(A.i_IsDeleted == isDeleted)

										  select new ServiceComponentFieldsList
										  {
											  v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
											  v_ComponentFieldsId = A.v_ComponentFieldId,
											  v_ServiceComponentId = A.v_ServiceComponentId,
											  i_HasAutomaticDxId = ss.i_HasAutomaticDxId,
										  }).ToList();



			if (serviceComponentFields.Count != 0)
			{
				// Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
				serviceComponentFieldValues.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
				serviceComponentFields.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
				serviceComponentFields.ForEach(a => a.ServiceComponentFieldValues = serviceComponentFieldValues.FindAll(p => p.v_ServiceComponentFieldsId == a.v_ServiceComponentFieldsId));

				return serviceComponentFields;
			}
			else
			{
				return serviceComponentFields;
			}
			//var dd = new List<ServiceComponentFieldsList>();
			//return dd;
		}

		public List<ReporteCuestionarioIstas> ReporteCuestionarioIstas(string pstrserviceId, string pstrComponentId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var objEntity = (from A in dbContext.service
								 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
								 join C in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
																	   equals new { a = C.v_ServiceId, b = C.v_ComponentId }

								 // Usuario Medico Evaluador / Medico Aprobador ****************************
								 join me in dbContext.systemuser on C.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
								 from me in me_join.DefaultIfEmpty()

								 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
								 from pme in pme_join.DefaultIfEmpty()

								 join Z in dbContext.person on me.v_PersonId equals Z.v_PersonId
								 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

								 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
											   equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
								 from et in et_join.DefaultIfEmpty()
								 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId

								 where A.v_ServiceId == pstrserviceId
								 select new ReporteCuestionarioIstas
								 {
									 EMPRESA_CLIENTE = D1.v_Name,
									 NOMBRE_APELLIDO_TRABAJADOR = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
									 FECHA_ATENCION = A.d_ServiceDate.Value,
									 PUESTO_TRABAJADOR = B.v_CurrentOccupation,
									 FIRMA_USUARIO_GRABA = pme.b_SignatureImage,
									 TIPO_ESO = et.v_Value1,
									 DNI_TRABAJADOR = B.v_DocNumber
								 });

				var ValorUSer = ValoresComponentesUserControl(pstrserviceId, "N002-ME000000033").ToList();
				var MedicalCenter = GetInfoMedicalCenter();
				var sql = (from a in objEntity.ToList()
						   select new ReporteCuestionarioIstas
						   {
							   LOGO_PROPIETARIA = MedicalCenter.b_Image,
							   EMPRESA_CLIENTE = a.EMPRESA_CLIENTE,
							   NOMBRE_APELLIDO_TRABAJADOR = a.NOMBRE_APELLIDO_TRABAJADOR,
							   FECHA_ATENCION = a.FECHA_ATENCION,
							   PUESTO_TRABAJADOR = a.PUESTO_TRABAJADOR,
							   FIRMA_USUARIO_GRABA = a.FIRMA_USUARIO_GRABA,
							   TIPO_ESO = a.TIPO_ESO,
							   DNI_TRABAJADOR = a.DNI_TRABAJADOR,

							   _1TIEN = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002758") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002758").v_Value1,
							   _2LADIS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002759") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002759").v_Value1,
							   _3TIENES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002760") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002760").v_Value1,
							   _4TECUE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002761") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002761").v_Value1,
							   _5TUTRA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002762") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002762").v_Value1,
							   _6TUTRA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002763") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002763").v_Value1,
							   _7TIENES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002764") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002764").v_Value1,
							   _8SETIE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002765") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002765").v_Value1,
							   _9TIENES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002766") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002766").v_Value1,
							   _10PUEDE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002767") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002767").v_Value1,

							   _11SITI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002768") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002768").v_Value1,
							   _12TUTR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002769") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002769").v_Value1,
							   _13TUTR = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002770") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002770").v_Value1,
							   _14TESI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002771") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002771").v_Value1,
							   _15TIENE = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002772") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002772").v_Value1,
							   _16HABLA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002773") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002773").v_Value1,
							   _17PORL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002774") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002774").v_Value1,
							   _18PORS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002775") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002775").v_Value1,
							   _19PORS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002776") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002776").v_Value1,
							   _20PORS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002777") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002777").v_Value1,

							   _21SABES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002778") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002778").v_Value1,
							   _22SABES = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002779") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002779").v_Value1,
							   _23ENTU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002780") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002780").v_Value1,
							   _24RECIB = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002781") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002781").v_Value1,
							   _25RECIB = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002782") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002782").v_Value1,
							   _26RECIB = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002783") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002783").v_Value1,
							   _27TUPU = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002784") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002784").v_Value1,
							   _28ENEL = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002785") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002785").v_Value1,
							   _29TUSA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002786") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002786").v_Value1,
							   _30TUSA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002787") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002787").v_Value1,

							   _31PREG = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002788") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002788").v_Value1,
							   _32SIFA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002789") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002789").v_Value1,
							   _33CUAND = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002790") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002790").v_Value1,
							   _34HAYM = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002791") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002791").v_Value1,
							   _35MISS = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002792") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002792").v_Value1,
							   _36ENLA = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002793") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002793").v_Value1,
							   _37ENMI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002794") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002794").v_Value1,
							   _38SIPI = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002795") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002795").v_Value1,
							   Puntaje = ValorUSer.Count() == 0 || ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002796") == null ? string.Empty : ValorUSer.Find(p => p.v_ComponentFieldId == "N009-MF000002796").v_Value1,
							   Dx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, "N009-ME000000331")
						   }).ToList();


				return sql;

			}
			catch (Exception)
			{

				throw;
			}


		}

		public List<DiagnosticRepositoryList> DevolverDxELiminados()
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var objEntity = (from A in dbContext.diagnosticrepository
							 where A.i_IsDeleted == 1
							 select new DiagnosticRepositoryList
							 {
								 v_DiagnosticRepositoryId = A.v_DiagnosticRepositoryId
							 }).ToList();
			return objEntity;


		}

		public void ObtenerRecomendacionesPorDiagnosticRepository(string psrtDiagnosticRepository)
		{

			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var objEntity = (from a in dbContext.recommendation
							 where a.v_DiagnosticRepositoryId == psrtDiagnosticRepository
							 select a).ToList();


			foreach (var item in objEntity)
			{
				item.d_UpdateDate = DateTime.Now;
				item.i_UpdateUserId = 11;
				item.i_IsDeleted = 1;
			}
			dbContext.SaveChanges();

		}

		public List<ListaServiciosComponentesShort> ListaServicios(string pstEmpresaId, string pstrSedeId, DateTime? Fechainicio, DateTime? FechaFin)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var query = (from A in dbContext.service
							 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
							 join C in dbContext.person on A.v_PersonId equals C.v_PersonId
							 join D in dbContext.protocol on A.v_ProtocolId equals D.v_ProtocolId
							 join B1 in dbContext.systemparameter on new { a = B.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B1.i_ParameterId, b = B1.i_GroupId }

							 where A.d_ServiceDate >= Fechainicio && A.d_ServiceDate <= FechaFin
							 && A.i_IsDeleted == 0 && D.v_CustomerOrganizationId == pstEmpresaId && D.v_CustomerLocationId == pstrSedeId && B.i_IsRequiredId == 1
							 select new ListaServiciosComponentesShort
							 {
								 ServiceId = A.v_ServiceId,
								 Paciente = C.v_FirstLastName + " " + C.v_SecondLastName + " " + C.v_FirstName,
								 FechaServicio = A.d_ServiceDate,
								 ComponentId = B.v_ComponentId,
								 ServiceComponentStatusId = B.i_ServiceComponentStatusId.Value,
								 ProtocoloId = A.v_ProtocolId,
								 ServiceComponentName = B1.v_Value1
							 }).ToList();

				return query;

			}
			catch (Exception)
			{
				return null;
				throw;
			}

		}

		public List<ReporteCartaCotizacion> ObtenerCabeceraCotizacion(string EmpresaClienteId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var MedicalCenter = GetInfoMedicalCenter();

				var objEntity = (from A in dbContext.organization

								 join su in dbContext.systemuser on 11 equals su.i_SystemUserId into su_join
								 from su in su_join.DefaultIfEmpty()

								 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
								 from pr in pr_join.DefaultIfEmpty()

								 where A.v_OrganizationId == EmpresaClienteId
								 select new ReporteCartaCotizacion
								 {
									 LogoPropietaria = MedicalCenter.b_Image,
									 EmpresaCliente = A.v_Name,
									 RucCliente = A.v_IdentificationNumber,
									 DireccionCliente = A.v_Address,
									 FirmaSa = pr.b_SignatureImage,
									 NombreEmpresaPropietaria = MedicalCenter.v_Name,
									 Representante_Legal_Propietaria = MedicalCenter.v_ContacName,
									 Contacto_RRHH_Propietaria = MedicalCenter.v_Contacto,
									 Contacto_Medico_Propietaria = MedicalCenter.v_ContactoMedico,
									 Email_Representante_Legal_Propietaria = MedicalCenter.v_Mail,
									 Email_Contacto_RRHH_Propietaria = MedicalCenter.v_EmailContacto,
									 Email_Contacto_Medico_Propietaria = MedicalCenter.v_EmailMedico,
									 Telefono_Propietaria = MedicalCenter.v_PhoneNumber
								 }).ToList();

				return objEntity;

			}
			catch (Exception ex)
			{

				throw;
			}
		}

		public List<ReporteEnvioDx> RetornarLista(DateTime? FechaInicio, DateTime? FechaFin)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

			var query = (from A in dbContext.service
						 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
						 join C in dbContext.diagnosticrepository on A.v_ServiceId equals C.v_ServiceId
						 join D in dbContext.diseases on C.v_DiseasesId equals D.v_DiseasesId
						 join E in dbContext.component on C.v_ComponentId equals E.v_ComponentId
						 join F in dbContext.systemparameter on new { a = E.i_CategoryId.Value, b = 116 }  // Categoria
								 equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
						 from F in F_join.DefaultIfEmpty()
						 where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin

						 && A.i_IsDeleted == 0
						 select new ReporteEnvioDx
						 {
							 ServiceId = A.v_ServiceId,
							 Telefono = B.v_TelephoneNumber,
							 dx = D.v_Name,
							 Categoria = F.v_Value1

						 }).ToList();

			return query;

		}

		public void ActualizarContrasenaPersona()
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				var ListaPersonas = (from a in dbContext.person
									 select a).ToList();

				var ListaUsuarios = (from a in dbContext.systemuser
									 select a).ToList();


				foreach (var item in ListaPersonas)
				{
					var x = ListaUsuarios.Find(u => u.v_PersonId == item.v_PersonId);

					if (x == null)
					{
						item.v_Password = item.v_DocNumber;
					}
				}

				// Guardar los cambios
				dbContext.SaveChanges();

				return;
			}
			catch (Exception ex)
			{
				return;
			}
		}

		public void BuscarServiceComponentParaFirmas(string ServiceId, int CategoriaId, int pintTecnicoId, int pintMedicoId)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<string> ListaServiciosID = new List<string>();

				ListaServiciosID.Add(ServiceId);
				var x = ObtenerIdsParaImportacion(ListaServiciosID, CategoriaId);

				foreach (var item in x)
				{
					//if (x.Count != 0)
					//{
					string serviceComponentId = item.ServicioComponentId;
					var query = (from A in dbContext.servicecomponent
								 where A.i_IsDeleted == 0 && A.v_ServiceId == ServiceId && A.v_ServiceComponentId == serviceComponentId
								 select A).ToList();

					if (query.Count > 0)
					{
						query[0].i_InsertUserTechnicalDataRegisterId = pintTecnicoId;
						query[0].d_InsertDateTechnicalDataRegister = DateTime.Now;

						query[0].i_UpdateUserTechnicalDataRegisterId = pintTecnicoId;
						query[0].d_UpdateDateTechnicalDataRegister = DateTime.Now;

						query[0].i_ApprovedUpdateUserId = pintMedicoId;
						query[0].d_ApprovedUpdateDate = DateTime.Now;

						query[0].i_InsertUserMedicalAnalystId = pintMedicoId;
						query[0].d_InsertDateMedicalAnalyst = DateTime.Now;

						query[0].i_UpdateUserMedicalAnalystId = pintMedicoId;
						query[0].d_ApprovedInsertDate = DateTime.Now;

						query[0].i_ServiceComponentStatusId = 3;
						dbContext.SaveChanges();
					}
					//}
				}




			}
			catch (Exception ex)
			{

				throw;
			}

		}

		public List<DiagnosticRepositoryList> GetDiagnosticByServiceIdAndComponentSeguimiento(string pstrServiceId, string pstrComponent)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
						 from ddd in ddd_join.DefaultIfEmpty()

						 //join eee in dbContext.recommendation on new { a = pstrServiceId, b = pstrComponent }
						 //                                           equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
						 //from eee in eee_join.DefaultIfEmpty()

						 //join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
						 //                                       equals fff.v_MasterRecommendationRestricctionId into fff_join
						 //from fff in fff_join.DefaultIfEmpty()

						 where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
							   ccc.i_IsDeleted == 0
						 select new DiagnosticRepositoryList
						 {
							 v_DiseasesName = ddd.v_Name,
							 v_Cie10 = ddd.v_CIE10Id,
							 v_ComponentId = ccc.v_ComponentId,
							 v_ComponentFieldsId = ccc.v_ComponentFieldId
						 }).ToList();


			return query;
		}

		public List<DiagnosticRepositoryList> GetDiagnosticByServiceIdAndComponentSeguimiento_(string pstrServiceId, string pstrComponent, string pstrComponent2)
		{
			SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
			var query = (from ccc in dbContext.diagnosticrepository
						 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
						 from ddd in ddd_join.DefaultIfEmpty()

						 where ccc.v_ServiceId == pstrServiceId && (ccc.v_ComponentId == pstrComponent || ccc.v_ComponentId == pstrComponent2) &&
							   ccc.i_IsDeleted == 0
						 select new DiagnosticRepositoryList
						 {
							 v_DiseasesName = ddd.v_Name,
							 v_Cie10 = ddd.v_CIE10Id,
							 v_ComponentId = ccc.v_ComponentId,
							 v_ComponentFieldsId = ccc.v_ComponentFieldId
						 }).ToList();


			return query;
		}

		public NoxiousHabitsList GetHabitoNoscivoSeguimiento(string pstrPacientId, int pintTypeHabit)
		{
			int isDeleted = (int)SiNo.NO;

			try
			{

				using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
				{
					var query = (from A in dbContext.noxioushabits
								 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId && A.i_TypeHabitsId == pintTypeHabit
								 select new NoxiousHabitsList
								 {
									 v_Frequency = A.v_Frequency,
									 v_Comment = A.v_Comment
								 }).FirstOrDefault();

					return query;
				}
			}
			catch (Exception)
			{

				throw;
			}
		}

		public List<ListaAtenciones> DevolverListaAtenciones(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
		{
			//mon.IsActive = true;

			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
				var query = from A in dbContext.service

							join B in dbContext.person on A.v_PersonId equals B.v_PersonId

							join C in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
							from C in C_join.DefaultIfEmpty()

							join D in dbContext.protocol on A.v_ProtocolId equals D.v_ProtocolId into D_join
							from D in D_join.DefaultIfEmpty()

							join E in dbContext.calendar on new {a = A.v_ServiceId, b= 1} equals new { a =E.v_ServiceId,  b= E.i_LineStatusId.Value}

							where A.i_IsDeleted == 0
							&& A.v_ProtocolId != null
							&& A.d_ServiceDate > pdatBeginDate && A.d_ServiceDate < pdatEndDate
							//&& A.v_ServiceId == "N009-SR000013198"
							select new ListaAtenciones
							{
								d_ServiceDate = A.d_ServiceDate.Value,
								v_ServiceId = A.v_ServiceId,
								v_Pacient = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
								v_AptitudeStatusName = C.v_Value1,
								i_EnvioCertificado = A.i_EnvioCertificado,
								i_EnvioHistoria = A.i_EnvioHistoria,
								v_CustomerOrganizationId = D.v_CustomerOrganizationId,
								v_CustomerLocationId = D.v_CustomerLocationId,
								i_StatusLiquidation = A.i_StatusLiquidation,
								Protocolo = D.v_Name
							};

				if (!string.IsNullOrEmpty(pstrFilterExpression))
				{
					query = query.Where(pstrFilterExpression);
				}
				if (!string.IsNullOrEmpty(pstrSortExpression))
				{
					query = query.OrderBy(pstrSortExpression);
				}
				if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
				{
					int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
					query = query.Skip(intStartRowIndex);
				}
				if (pintResultsPerPage.HasValue)
				{
					query = query.Take(pintResultsPerPage.Value);
				}
				return query.ToList();
			}
			catch (Exception)
			{

				throw;
			}

		}

		public void ActualizarEnvioHistoria(string pstrServiceId, int pintEnvioHistoria)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pstrServiceId
									   select a).FirstOrDefault();

				objEntitySource.i_EnvioHistoria = pintEnvioHistoria;

				// Guardar los cambios
				dbContext.SaveChanges();

				return;

			}
			catch (Exception ex)
			{

				// Llenar entidad Log
				return;
			}


		}

		public void ActualizarEnvioCertificado(string pstrServiceId, int pintEnvioCertificado)
		{
			try
			{

				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				// Obtener la entidad fuente
				var objEntitySource = (from a in dbContext.service
									   where a.v_ServiceId == pstrServiceId
									   select a).FirstOrDefault();

				objEntitySource.i_EnvioCertificado = pintEnvioCertificado;

				// Guardar los cambios
				dbContext.SaveChanges();

				return;

			}
			catch (Exception ex)
			{

				// Llenar entidad Log
				return;
			}


		}

		public string DEvolverTipoESOConcatenado(List<llenarConsultaSigesoft> Lista)
		{
			try
			{
				SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

				List<string> ListaIds = new List<string>(); 
				   foreach (var item in Lista)
					{
						 ListaIds.Add(item.IdService);
					}
				   var qry = (from a in dbContext.service
										  join b in dbContext.protocol on a.v_ProtocolId equals b.v_ProtocolId
										  join c in dbContext.systemparameter on new { a = b.i_EsoTypeId.Value, b = 118 } equals new { a = c.i_ParameterId, b = c.i_GroupId } into c_join
										  from c in c_join.DefaultIfEmpty()
										  where ListaIds.Contains(a.v_ServiceId)
										  select new {                                           
											  TipoEso = c.v_Value1
										  }).ToList().Distinct();

				   return string.Join("/ ", qry.Select(p => p.TipoEso));
			}
			catch (Exception)
			{
				
				throw;
			}
		}
		//public List<Medicamentos> ListarMedicamentos()
		//{
		//    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
		//                var query = (from A in dbContext.service
		//                 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId
		//                 where A.i_IsDeleted == 0 && A.i_ServiceStatusId == (int)ServiceStatus.Culminado && A.i_StatusLiquidation == null
		//                 && A.d_ServiceDate > FechaMin
		//                 select new Servicios
		//                 {
		//                     ServiceId = A.v_ServiceId,
		//                     PacienteId = A.v_PersonId,
		//                     EmpresaCliente = B.v_CustomerOrganizationId

		//                 }
		//                 ).ToList();

		//    return query;
		//}

        public List<CuestionarioAudiometria> GetCustionarioAudiometria(string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId


                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                    equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 join M in dbContext.systemparameter on new { a = B.i_MaritalStatusId.Value, b = 101 }
                                              equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()
                                 join N in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
                                 from N in N_join.DefaultIfEmpty()

                                 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

                                 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
                                 from D1 in D1_join.DefaultIfEmpty()

                                 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
                                            equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                                 from et in et_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = E.v_ServiceId, b = E.v_ComponentId }


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join E2 in dbContext.area on A.v_AreaId equals E2.v_AreaId into E2_join
                                 from E2 in E2_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrServiceId

                                 select new CuestionarioAudiometria
                                 {
                                     NOMBREPACIENTE = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate,
                                     LugarNacimiento = B.v_AdressLocation,
                                     EstadoCivil = M.v_Value1,
                                     GradoInstruccion = N.v_Value1,
                                     LugarResidencia = B.v_AdressLocation,
                                     PuestoTrabajo = B.v_CurrentOccupation,
                                     TipoESO = E1.i_EsoTypeId.Value,
                                     NombreEmpresa = D1.v_Name,
                                     ActividadEmpresa = D1.v_SectorName,
                                     FechaEvaluacion = A.d_ServiceDate.Value,
                                     IdServicio = A.v_ServiceId,
                                     AreaTrabajo = E2.v_Name,
                                     FIRMAMEDICO = pme.b_SignatureImage,
                                     DNI = B.v_DocNumber,
                                     GENERO = J.v_Value1,
                                     FIRMAPACIENTE = B.b_RubricImage,
                                     HUELLAPACIENTE = B.b_FingerPrintImage,
                                     LOGOCLIENTE = D1.b_Image

                                 });

                var serviceBL = new ServiceBL();
                var MedicalCenter = serviceBL.GetInfoMedicalCenter();
                var valores = ValoresComponente(pstrServiceId, "N009-ME000000337");

                var sql = (from a in objEntity.ToList()
                           select new CuestionarioAudiometria
                           {
                               NOMBREPACIENTE = a.NOMBREPACIENTE,
                               FechaNacimiento = a.FechaNacimiento,
                               DNI = a.DNI,
                               GENERO = a.GENERO,
                               FIRMAPACIENTE = a.FIRMAPACIENTE,
                               HUELLAPACIENTE = a.HUELLAPACIENTE,
                               EDAD = GetAge(a.FechaNacimiento.Value),
                               LugarNacimiento = a.LugarNacimiento,
                               EstadoCivil = a.EstadoCivil,
                               GradoInstruccion = a.GradoInstruccion,
                               LugarResidencia = a.LugarResidencia,
                               PuestoTrabajo = a.PuestoTrabajo,
                               TipoESO = a.TipoESO,
                               EMPRESACLIENTE = a.NombreEmpresa,
                               ActividadEmpresa = a.ActividadEmpresa,
                               FechaEvaluacion = a.FechaEvaluacion,
                               IdServicio = a.IdServicio,
                               AreaTrabajo = a.AreaTrabajo,
                               LogoPropietaria = MedicalCenter.b_Image,
                               FIRMAMEDICO = a.FIRMAMEDICO,
                               LOGOCLIENTE = a.LOGOCLIENTE,
                               ANTIGUEDADDELPUESTO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003023") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003023").v_Value1,

                               DESCRIPCION = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003024") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003024").v_Value1,

                               _1HATENIDOPUESTOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003025") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003025").v_Value1,

                               _2TIPODETRABAJO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003026") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003026").v_Value1,

                               _3NRODEANIOSEXP = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003027") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003027").v_Value1,

                               _4TUVOSOSPECHADEENF = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003028") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003028").v_Value1,

                               DISCOTECAS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003029") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003029").v_Value1,

                               DEPORTEENMOTO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003030") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003030").v_Value1,

                               CAZA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003031") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003031").v_Value1,

                               SERVMILITARCONARMA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003032") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003032").v_Value1,

                               FRECUENCIADEEXP = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003033") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003033").v_Value1,

                               _1CTITZAMEDIDASDEPROT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003034") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003034").v_Value1,

                               _2ENCASOSIQUETIPODEPROTEC = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003035") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003035").v_Value1,

                               FAMILIARESCONPROBLEMAS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003037") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003037").v_Value1,

                               //OTROSPROTECDETALLAR = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002962") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002962").v_Value1,

                               DIABETES = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003039") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003039").v_Value1,

                               HIPERARTERIAL = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003040") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003040").v_Value1,

                               NRODEEMBARAZOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003041") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003041").v_Value1,

                               ABORTOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003042") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003042").v_Value1,

                               RECNACBAJOPESO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003043") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003043").v_Value1,

                               TUMORESDELSSTNERV = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003044") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003044").v_Value1,

                               TTOANTITBC = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003045") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003045").v_Value1,

                               TTOANTIMAL = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003046") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003046").v_Value1,

                               CONSUMODEASPINRA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003047") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003047").v_Value1,

                               //OTROSTRATANTIB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002972") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002972").v_Value1,

                               //SIFAMPROBDETALLAR = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002973") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002973").v_Value1,

                               USODIURETICOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003049") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003049").v_Value1,

                               USODECITOST = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003050") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003050").v_Value1,

                               USODEBETABLOQ = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003051") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003051").v_Value1,

                               FUMADOR = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003052") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003052").v_Value1,

                               NRODECIGARROS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003053") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003053").v_Value1,

                               ALCOHOL = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003054") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003054").v_Value1,

                               FRECUENCIADECONSUMO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003055") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003055").v_Value1,

                               MONOXIDODECARB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003056") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003056").v_Value1,

                               PLOMO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003057") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003057").v_Value1,

                               MERCURIO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003058") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003058").v_Value1,

                               OTROSEXPDETALLAR = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003059") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003059").v_Value1,

                               TRAUMATISMOSCRANEALES = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002985") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002985").v_Value1,

                               SARAMPION = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002986") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002986").v_Value1,

                               PAPERAS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002987") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002987").v_Value1,

                               RUBEOLA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002988") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002988").v_Value1,

                               FIABRETIFOIDEA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002989") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002989").v_Value1,

                               ACUFENOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002990") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002990").v_Value1,

                               VERTIGO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002991") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002991").v_Value1,

                               DOLORDEOIDOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002992") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002992").v_Value1,

                               SECRECOIDOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002993") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002993").v_Value1,

                               OTROSSINTOMASDETALLAR = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002994") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002994").v_Value1,

                               _1OYEBIEN = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002995") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002995").v_Value1,

                               _2NODESDECUANDO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002996") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002996").v_Value1,

                               _3ENCONVERSACIONES = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002997") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002997").v_Value1,

                               _4NECESITAAUMENTAR = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002998") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002998").v_Value1,

                               _5OYEMEJORCUANDO = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000002999") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000002999").v_Value1,

                               _6LEMOLESTANLOSRUIDOS = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003000") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003000").v_Value1,


                               NroEmbarazos = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003172") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003172").v_Value1,
                               NroAbortos = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003173") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003173").v_Value1,
                               OtrosTipos = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003174") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003174").v_Value1,
                               UitlizaMedProtec = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003034") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003034").v_Value1,
                               SiMedProtecDetalle = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003035") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003035").v_Value1,
                               TipoDeProtec = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003036") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003036").v_Value1,

                               SIFAMPROBDETALLAR1 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003038") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003038").v_Value1,
                               OTROSTRATANTIB1 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003051") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003051").v_Value1,


                           }).ToList();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ReportCarneVacuna> GetCarneVacuna(string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join M in dbContext.systemparameter on new { a = B.i_MaritalStatusId.Value, b = 101 }
                                              equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()
                                 join N in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
                                 from N in N_join.DefaultIfEmpty()

                                 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

                                 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
                                 from D1 in D1_join.DefaultIfEmpty()

                                 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
                                            equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                                 from et in et_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = E.v_ServiceId, b = E.v_ComponentId }


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join E2 in dbContext.area on A.v_AreaId equals E2.v_AreaId into E2_join
                                 from E2 in E2_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrServiceId

                                 select new ReportCarneVacuna
                                 {
                                     NOMBREPACIENTE = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     DNI = B.v_DocNumber,
                                     IDSERVICIO = A.v_ServiceId,
                                     IDSERVICECOMPONENT = E.v_ServiceComponentId,
                                     FECHANACIMIENTO = B.d_Birthdate.Value,
                                     DIRECCION = B.v_AdressLocation,
                                     EstadoCivil = M.v_Value1,
                                     GradoInstruccion = N.v_Value1,
                                     LugarResidencia = B.v_AdressLocation,
                                     PuestoTrabajo = B.v_CurrentOccupation,
                                     TipoESO = E1.i_EsoTypeId.Value,
                                     NombreEmpresa = D1.v_Name,
                                     ActividadEmpresa = D1.v_SectorName,
                                     FechaEvaluacion = A.d_ServiceDate.Value,
                                     AreaTrabajo = E2.v_Name,
                                     FirmaGraba = pme.b_SignatureImage,

                                 });

                var serviceBL = new ServiceBL();
                var MedicalCenter = serviceBL.GetInfoMedicalCenter();
                var valores = ValoresComponente(pstrServiceId, pstrComponentId);

                var sql = (from a in objEntity.ToList()
                           select new ReportCarneVacuna
                           {
                               NOMBREPACIENTE = a.NOMBREPACIENTE,
                               DNI = a.DNI,
                               IDSERVICIO = a.IDSERVICIO,
                               IDSERVICECOMPONENT = a.IDSERVICECOMPONENT,
                               FECHANACIMIENTO = a.FECHANACIMIENTO,
                               DIRECCION = a.DIRECCION,
                               Edad = GetAge(a.FECHANACIMIENTO.Value),                               
                               EstadoCivil = a.EstadoCivil,
                               GradoInstruccion = a.GradoInstruccion,
                               LugarResidencia = a.LugarResidencia,
                               PuestoTrabajo = a.PuestoTrabajo,
                               TipoESO = a.TipoESO,
                               NombreEmpresa = a.NombreEmpresa,
                               ActividadEmpresa = a.ActividadEmpresa,
                               FechaEvaluacion = a.FechaEvaluacion,
                               IdServicio = a.IdServicio,
                               AreaTrabajo = a.AreaTrabajo,
                               LogoPropietaria = MedicalCenter.b_Image,
                               FirmaGraba = a.FirmaGraba,
                               LOTE1ERA_ANTIHEPATITISB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003001") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003001").v_Value1,
                               FECHA1ERA_ANTIHEPATITISB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003002") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003002").v_Value1,
                               LOTE2DA_ANTIHEPATITISB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003003") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003003").v_Value1,
                               FECHA2DA_ANTIHEPATITISB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003004") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003004").v_Value1,
                               LOTE3ERA_ANTIHEPATITISB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003005") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003005").v_Value1,
                               FECHA3ERA_ANTIHEPATITISB = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003006") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003006").v_Value1,
                               LOTEUNICA_ANTIINFLUENZA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003007") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003007").v_Value1,
                               FECHAUNICA_ANTIINFLUENZA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003008") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003008").v_Value1,
                               LOTEUNICA_ANTIAMARILICA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003009") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003009").v_Value1,
                               FECHAUNICA_ANTIAMARILICA = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003010") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003010").v_Value1,
                               LOTE1ERA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003011") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003011").v_Value1,
                               FECHA1ERA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003012") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003012").v_Value1,
                               LOTE2DA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003013") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003013").v_Value1,
                               FECHA2DA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003014") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003014").v_Value1,
                               LOTE3ERA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003015") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003015").v_Value1,
                               FECHA3ERA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003016") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003016").v_Value1,
                               LOTE4TA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003017") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003017").v_Value1,
                               FECHA4TA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003018") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003018").v_Value1,
                               LOTE5TA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003019") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003019").v_Value1,
                               FECHA5TA_TOXOIDETETANICADT = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003020") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003020").v_Value1,
                               LOTEUNICA_SRDIVIRAL = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003021") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003021").v_Value1,
                               FECHAUNICA_SRDIVIRAL = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003022") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003022").v_Value1,



                           }).ToList();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<ComisionAuxiliar> ComisionAuxiliar(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression)
        {
            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.servicecomponent on A.v_ServiceId equals D.v_ServiceId into D_join
                                    from D in D_join.DefaultIfEmpty()

                                    join E in dbContext.component on D.v_ComponentId equals E.v_ComponentId into E_join
                                    from E in E_join.DefaultIfEmpty()


                                    where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin

                                    select new ComisionAuxiliar
                                    {
                                        IdServicio = A.v_ServiceId,                                        
                                        Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName   ,
                                        Componente = E.v_Name,
                                        PrecioBase = E.r_BasePrice,
                                        CategoriaId = E.i_CategoryId.Value,
                                        i_InsertUserId = D.i_InsertUserId.Value
                                    };

                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    var sql = (from a in objEntity.ToList()
                               select new ComisionAuxiliar
                               {
                                   IdServicio = a.IdServicio,
                                   Paciente = a.Paciente,
                                   Componente = a.Componente,
                                   PrecioBase = a.PrecioBase,
                                   CategoriaId = a.CategoriaId,
                                   Comision = CalcularComision(a.CategoriaId, a.PrecioBase),
                                   i_InsertUserId = a.i_InsertUserId
                               }).ToList();

                    return sql;

                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        private float CalcularComision(int cat, float? pb)
        {

            SystemParameterBL oSystemParameterBL = new SystemParameterBL();
            OperationResult objOperationResult = new OperationResult();
            var o = oSystemParameterBL.GetSystemParameter(ref objOperationResult, 116, cat);

            var listapc = o.v_Field.Split('-');
            float pc = float.Parse(listapc[1].ToString());
            float Comision = 0;

            Comision = pb.Value * pc / 100;
            return Comision;

        }
   
        #region Clonar
        public void ClonarServicio(string psrtServiceOldId, string pProtocolId, string pEmpresaCliente, DateTime pFechaServicio)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                //psrtServiceOldId = "N009-SR000017574";
                //pProtocolId = "N009-PR000001090";
                string serviceNew = "";
                string serviceComponentNew = "", serviceComponentOld = "";
                string serviceComponentFieldsNew = "", serviceComponentFieldsOld = "";
                string diagnosticRepositoryNew = "", diagnosticRepositoryOld = "";
                int intNodeId = 9;
                var qService = (from a in dbContext.service where a.v_ServiceId == psrtServiceOldId select a).ToList();
                if (qService.Count > 0)
                {
                    #region MyRegion
                    serviceDto oserviceDto = new serviceDto();
                    foreach (var item in qService)
                    {
                        serviceNew = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 23), "SR");
                        oserviceDto.v_ServiceId = serviceNew;
                        oserviceDto.v_ProtocolId = pProtocolId;
                        oserviceDto.v_PersonId = item.v_PersonId;
                        oserviceDto.i_MasterServiceId = item.i_MasterServiceId;
                        oserviceDto.i_ServiceStatusId = item.i_ServiceStatusId;
                        oserviceDto.v_Motive = item.v_Motive;
                        oserviceDto.i_AptitudeStatusId = item.i_AptitudeStatusId;
                        oserviceDto.d_ServiceDate = pFechaServicio;
                        oserviceDto.d_GlobalExpirationDate = item.d_GlobalExpirationDate;
                        oserviceDto.d_ObsExpirationDate = item.d_ObsExpirationDate;
                        oserviceDto.i_FlagAgentId = item.i_FlagAgentId;
                        oserviceDto.v_OrganizationId = item.v_OrganizationId;
                        oserviceDto.v_LocationId = item.v_LocationId;
                        oserviceDto.v_MainSymptom = item.v_MainSymptom;
                        oserviceDto.i_TimeOfDisease = item.i_TimeOfDisease;
                        oserviceDto.i_TimeOfDiseaseTypeId = item.i_TimeOfDiseaseTypeId;
                        oserviceDto.v_Story = item.v_Story;
                        oserviceDto.i_DreamId = item.i_DreamId;
                        oserviceDto.i_UrineId = item.i_UrineId;
                        oserviceDto.i_DepositionId = item.i_DepositionId;
                        oserviceDto.i_AppetiteId = item.i_AppetiteId;
                        oserviceDto.i_ThirstId = item.i_ThirstId;
                        oserviceDto.d_Fur = item.d_Fur;
                        oserviceDto.v_CatemenialRegime = item.v_PersonId;
                        oserviceDto.i_MacId = item.i_MacId;
                        oserviceDto.i_IsNewControl = item.i_IsNewControl;
                        oserviceDto.i_HasMedicalBreakId = item.i_HasMedicalBreakId;
                        oserviceDto.d_MedicalBreakStartDate = item.d_MedicalBreakStartDate;
                        oserviceDto.d_MedicalBreakEndDate = item.d_MedicalBreakEndDate;
                        oserviceDto.v_GeneralRecomendations = item.v_GeneralRecomendations;
                        oserviceDto.i_DestinationMedicationId = item.i_DestinationMedicationId;
                        oserviceDto.i_TransportMedicationId = item.i_TransportMedicationId;
                        oserviceDto.d_StartDateRestriction = item.d_StartDateRestriction;
                        oserviceDto.d_EndDateRestriction = item.d_EndDateRestriction;
                        oserviceDto.i_HasRestrictionId = item.i_HasRestrictionId;
                        oserviceDto.i_HasSymptomId = item.i_HasSymptomId;
                        oserviceDto.d_UpdateDate = item.d_UpdateDate;
                        oserviceDto.d_NextAppointment = item.d_NextAppointment;
                        oserviceDto.i_IsDeleted = item.i_IsDeleted;
                        oserviceDto.i_InsertUserId = item.i_InsertUserId;
                        oserviceDto.d_InsertDate = item.d_InsertDate;
                        oserviceDto.i_UpdateUserId = item.i_UpdateUserId;
                        oserviceDto.i_SendToTracking = item.i_SendToTracking;
                        oserviceDto.i_InsertUserMedicalAnalystId = item.i_InsertUserMedicalAnalystId;
                        oserviceDto.i_UpdateUserMedicalAnalystId = item.i_UpdateUserMedicalAnalystId;
                        oserviceDto.d_InsertDateMedicalAnalyst = item.d_InsertDateMedicalAnalyst;
                        oserviceDto.d_UpdateDateMedicalAnalyst = item.d_UpdateDateMedicalAnalyst;
                        oserviceDto.i_InsertUserOccupationalMedicalId = item.i_InsertUserOccupationalMedicalId;
                        oserviceDto.i_UpdateUserOccupationalMedicaltId = item.i_UpdateUserOccupationalMedicaltId;
                        oserviceDto.d_InsertDateOccupationalMedical = item.d_InsertDateOccupationalMedical;
                        oserviceDto.d_UpdateDateOccupationalMedical = item.d_UpdateDateOccupationalMedical;
                        oserviceDto.i_HazInterconsultationId = item.i_HazInterconsultationId;
                        oserviceDto.v_Gestapara = item.v_Gestapara;
                        oserviceDto.v_Menarquia = item.v_Menarquia;
                        oserviceDto.d_PAP = item.d_PAP;
                        oserviceDto.d_Mamografia = item.d_Mamografia;
                        oserviceDto.v_CiruGine = item.v_CiruGine;
                        oserviceDto.v_Findings = item.v_Findings;
                        oserviceDto.i_StatusLiquidation = item.i_StatusLiquidation;
                        oserviceDto.i_ServiceTypeOfInsurance = item.i_ServiceTypeOfInsurance;
                        oserviceDto.i_ModalityOfInsurance = item.i_ModalityOfInsurance;
                        oserviceDto.i_IsFac = item.i_IsFac;
                        oserviceDto.i_InicioEnf = item.i_InicioEnf;
                        oserviceDto.i_CursoEnf = item.i_CursoEnf;
                        oserviceDto.i_Evolucion = item.i_Evolucion;
                        oserviceDto.v_ExaAuxResult = item.v_ExaAuxResult;
                        oserviceDto.v_ObsStatusService = item.v_ObsStatusService;
                        oserviceDto.d_FechaEntrega = item.d_FechaEntrega;
                        oserviceDto.v_AreaId = item.v_AreaId;
                        oserviceDto.v_FechaUltimoPAP = item.v_FechaUltimoPAP;
                        oserviceDto.v_ResultadosPAP = item.v_ResultadosPAP;
                        oserviceDto.v_FechaUltimaMamo = item.v_FechaUltimaMamo;
                        oserviceDto.v_ResultadoMamo = item.v_ResultadoMamo;
                        oserviceDto.r_Costo = item.r_Costo;
                        oserviceDto.i_EnvioHistoria = item.i_EnvioHistoria;
                        oserviceDto.i_EnvioCertificado = item.i_EnvioCertificado;
                        //oserviceDto.i_IsCapanias = item.i_IsCapanias;

                        service objEntity = serviceAssembler.ToEntity(oserviceDto);
                        dbContext.AddToservice(objEntity);
                        dbContext.SaveChanges();

                    }
                    #endregion

                }

                #region DiagnostyReportitory
                var qDiagnosticRepository = (from a in dbContext.diagnosticrepository where a.v_ServiceId == psrtServiceOldId select a).ToList();
                if (qDiagnosticRepository.Count > 0)
                {
                    diagnosticrepositoryDto odiagnosticrepositoryDto = new diagnosticrepositoryDto();
                    foreach (var item in qDiagnosticRepository)
                    {
                        diagnosticRepositoryNew = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 29), "DR");
                        odiagnosticrepositoryDto.v_DiagnosticRepositoryId = diagnosticRepositoryNew;
                        odiagnosticrepositoryDto.v_ServiceId = serviceNew;
                        odiagnosticrepositoryDto.v_DiseasesId = item.v_DiseasesId;
                        odiagnosticrepositoryDto.v_ComponentId = item.v_ComponentId;
                        odiagnosticrepositoryDto.v_ComponentFieldId = item.v_ComponentFieldId;
                        odiagnosticrepositoryDto.i_AutoManualId = item.i_AutoManualId;
                        odiagnosticrepositoryDto.i_PreQualificationId = item.i_PreQualificationId;
                        odiagnosticrepositoryDto.i_FinalQualificationId = item.i_FinalQualificationId;
                        odiagnosticrepositoryDto.i_DiagnosticTypeId = item.i_DiagnosticTypeId;
                        odiagnosticrepositoryDto.i_IsSentToAntecedent = item.i_IsSentToAntecedent;
                        odiagnosticrepositoryDto.d_ExpirationDateDiagnostic = item.d_ExpirationDateDiagnostic;
                        odiagnosticrepositoryDto.i_GenerateMedicalBreak = item.i_GenerateMedicalBreak;
                        odiagnosticrepositoryDto.v_Recomendations = item.v_Recomendations;
                        odiagnosticrepositoryDto.i_DiagnosticSourceId = item.i_DiagnosticSourceId;
                        odiagnosticrepositoryDto.i_ShapeAccidentId = item.i_ShapeAccidentId;
                        odiagnosticrepositoryDto.i_BodyPartId = item.i_BodyPartId;
                        odiagnosticrepositoryDto.i_ClassificationOfWorkAccidentId = item.i_ClassificationOfWorkAccidentId;
                        odiagnosticrepositoryDto.i_RiskFactorId = item.i_RiskFactorId;
                        odiagnosticrepositoryDto.i_ClassificationOfWorkdiseaseId = item.i_ClassificationOfWorkdiseaseId;
                        odiagnosticrepositoryDto.i_SendToInterconsultationId = item.i_SendToInterconsultationId;
                        odiagnosticrepositoryDto.i_InterconsultationDestinationId = item.i_InterconsultationDestinationId;
                        odiagnosticrepositoryDto.i_IsDeleted = item.i_IsDeleted;
                        odiagnosticrepositoryDto.i_InsertUserId = item.i_InsertUserId;
                        odiagnosticrepositoryDto.d_InsertDate = item.d_InsertDate;
                        odiagnosticrepositoryDto.i_UpdateUserId = item.i_UpdateUserId;
                        odiagnosticrepositoryDto.d_UpdateDate = item.d_UpdateDate;
                        odiagnosticrepositoryDto.v_InterconsultationDestinationId = item.v_InterconsultationDestinationId;

                        diagnosticrepository objEntity = diagnosticrepositoryAssembler.ToEntity(odiagnosticrepositoryDto);

                        dbContext.AddTodiagnosticrepository(objEntity);
                        dbContext.SaveChanges();
                    }
                }
                #endregion

                #region Recomendation
                var qRecomendation = (from a in dbContext.recommendation where a.v_ServiceId == psrtServiceOldId select a).ToList();
                if (qRecomendation.Count > 0)
                {
                    recommendationDto orecommendationDto = new recommendationDto();
                    foreach (var item in qRecomendation)
                    {
                        orecommendationDto.v_RecommendationId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                        orecommendationDto.v_ServiceId = serviceNew;
                        orecommendationDto.v_DiagnosticRepositoryId = diagnosticRepositoryNew;
                        orecommendationDto.v_ComponentId = item.v_ComponentId;
                        orecommendationDto.v_MasterRecommendationId = item.v_MasterRecommendationId;
                        orecommendationDto.i_IsDeleted = item.i_IsDeleted;
                        orecommendationDto.i_InsertUserId = item.i_InsertUserId;
                        orecommendationDto.d_InsertDate = item.d_InsertDate;
                        orecommendationDto.d_UpdateDate = item.d_UpdateDate;
                        orecommendationDto.i_UpdateUserId = item.i_UpdateUserId;

                        recommendation objEntity = recommendationAssembler.ToEntity(orecommendationDto);

                        dbContext.AddTorecommendation(objEntity);
                        dbContext.SaveChanges();
                    }
                }

                #endregion

                #region Restriction
                var qRestriction = (from a in dbContext.restriction where a.v_ServiceId == psrtServiceOldId select a).ToList();
                if (qRestriction.Count > 0)
                {
                    restrictionDto orestrictionDto = new restrictionDto();
                    foreach (var item in qRestriction)
                    {
                        orestrictionDto.v_RestrictionId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                        orestrictionDto.v_DiagnosticRepositoryId = diagnosticRepositoryNew;
                        orestrictionDto.v_ServiceId = serviceNew;
                        orestrictionDto.v_ComponentId = item.v_ComponentId;
                        orestrictionDto.v_MasterRestrictionId = item.v_MasterRestrictionId;
                        orestrictionDto.d_StartDateRestriction = item.d_StartDateRestriction;
                        orestrictionDto.d_EndDateRestriction = item.d_EndDateRestriction;
                        orestrictionDto.i_IsDeleted = item.i_IsDeleted;
                        orestrictionDto.i_InsertUserId = item.i_InsertUserId;
                        orestrictionDto.d_InsertDate = item.d_InsertDate;
                        orestrictionDto.d_UpdateDate = item.d_UpdateDate;
                        orestrictionDto.i_UpdateUserId = item.i_UpdateUserId;

                        restriction objEntity = restrictionAssembler.ToEntity(orestrictionDto);

                        dbContext.AddTorestriction(objEntity);
                        dbContext.SaveChanges();
                    }
                }

                #endregion

                #region Calendar
                var qCalendar = (from a in dbContext.calendar where a.v_ServiceId == psrtServiceOldId select a).ToList();
                if (qCalendar.Count > 0)
                {
                    calendarDto ocalendarDto = new calendarDto();
                    foreach (var item in qCalendar)
                    {
                        ocalendarDto.v_CalendarId = Common.Utils.GetNewId(9, Utils.GetNextSecuentialId(9, 22), "CA");
                        ocalendarDto.v_ServiceId = serviceNew;
                        ocalendarDto.v_ProtocolId = pProtocolId;

                        ocalendarDto.v_PersonId = item.v_PersonId;
                        ocalendarDto.d_DateTimeCalendar = pFechaServicio;
                        ocalendarDto.d_CircuitStartDate = pFechaServicio;
                        ocalendarDto.d_EntryTimeCM = pFechaServicio;
                        ocalendarDto.i_ServiceTypeId = item.i_ServiceTypeId;
                        ocalendarDto.i_CalendarStatusId = item.i_CalendarStatusId;
                        ocalendarDto.i_ServiceId = item.i_ServiceId;

                        ocalendarDto.i_NewContinuationId = item.i_NewContinuationId;
                        ocalendarDto.i_LineStatusId = item.i_LineStatusId;
                        ocalendarDto.i_IsVipId = item.i_IsVipId;
                        ocalendarDto.i_IsDeleted = item.i_IsDeleted;
                        ocalendarDto.i_InsertUserId = item.i_InsertUserId;
                        ocalendarDto.d_InsertDate = item.d_InsertDate;
                        ocalendarDto.i_UpdateUserId = item.i_UpdateUserId;
                        ocalendarDto.d_UpdateDate = item.d_UpdateDate;
                        ocalendarDto.d_SalidaCM = item.d_SalidaCM;

                        calendar objEntity = calendarAssembler.ToEntity(ocalendarDto);

                        dbContext.AddTocalendar(objEntity);
                        dbContext.SaveChanges();
                    }
                }
                #endregion

                #region ServiceComponent

                var qServiceComp = (from a in dbContext.servicecomponent where a.v_ServiceId == psrtServiceOldId select a).ToList();
                if (qServiceComp.Count > 0)
                {
                    #region MyRegion
                    servicecomponentDto oservicecomponentDto = new servicecomponentDto();
                    foreach (var item in qServiceComp)
                    {
                        serviceComponentOld = item.v_ServiceComponentId;
                        serviceComponentNew = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 24), "SC");

                        oservicecomponentDto.v_ServiceComponentId = serviceComponentNew;
                        oservicecomponentDto.v_ServiceId = serviceNew;
                        oservicecomponentDto.v_ComponentId = item.v_ComponentId;
                        oservicecomponentDto.i_ServiceComponentStatusId = item.i_ServiceComponentStatusId;
                        oservicecomponentDto.i_ExternalInternalId = item.i_ExternalInternalId;
                        oservicecomponentDto.i_ServiceComponentTypeId = item.i_ServiceComponentTypeId;
                        oservicecomponentDto.i_IsVisibleId = item.i_IsVisibleId;
                        oservicecomponentDto.i_IsInheritedId = item.i_IsInheritedId;
                        oservicecomponentDto.d_CalledDate = item.d_CalledDate;
                        oservicecomponentDto.d_StartDate = item.d_StartDate;
                        oservicecomponentDto.d_EndDate = item.d_EndDate;
                        oservicecomponentDto.i_index = item.i_index;
                        oservicecomponentDto.r_Price = item.r_Price;
                        oservicecomponentDto.i_IsInvoicedId = item.i_IsInvoicedId;
                        oservicecomponentDto.i_IsRequiredId = item.i_IsRequiredId;
                        oservicecomponentDto.i_IsManuallyAddedId = item.i_IsManuallyAddedId;
                        oservicecomponentDto.i_QueueStatusId = item.i_QueueStatusId;
                        oservicecomponentDto.v_NameOfice = item.v_NameOfice;
                        oservicecomponentDto.v_Comment = item.v_Comment;
                        oservicecomponentDto.i_Iscalling = item.i_Iscalling;
                        oservicecomponentDto.i_IsApprovedId = item.i_IsApprovedId;
                        oservicecomponentDto.i_IsDeleted = item.i_IsDeleted;
                        oservicecomponentDto.i_InsertUserId = item.i_InsertUserId;
                        oservicecomponentDto.d_InsertDate = item.d_InsertDate;
                        oservicecomponentDto.i_UpdateUserId = item.i_UpdateUserId;
                        oservicecomponentDto.d_UpdateDate = item.d_UpdateDate;
                        oservicecomponentDto.i_ApprovedInsertUserId = item.i_ApprovedInsertUserId;
                        oservicecomponentDto.i_ApprovedUpdateUserId = item.i_ApprovedUpdateUserId;
                        oservicecomponentDto.d_ApprovedInsertDate = item.d_ApprovedInsertDate;
                        oservicecomponentDto.d_ApprovedUpdateDate = item.d_ApprovedUpdateDate;
                        oservicecomponentDto.i_InsertUserMedicalAnalystId = item.i_InsertUserMedicalAnalystId;
                        oservicecomponentDto.i_UpdateUserMedicalAnalystId = item.i_UpdateUserMedicalAnalystId;
                        oservicecomponentDto.d_InsertDateMedicalAnalyst = item.d_InsertDateMedicalAnalyst;
                        oservicecomponentDto.d_UpdateDateMedicalAnalyst = item.d_UpdateDateMedicalAnalyst;
                        oservicecomponentDto.i_InsertUserTechnicalDataRegisterId = item.i_InsertUserTechnicalDataRegisterId;
                        oservicecomponentDto.i_UpdateUserTechnicalDataRegisterId = item.i_UpdateUserTechnicalDataRegisterId;
                        oservicecomponentDto.d_InsertDateTechnicalDataRegister = item.d_InsertDateTechnicalDataRegister;
                        oservicecomponentDto.d_UpdateDateTechnicalDataRegister = item.d_UpdateDateTechnicalDataRegister;
                        oservicecomponentDto.i_Iscalling_1 = item.i_Iscalling_1;
                        oservicecomponentDto.i_AuditorInsertUserId = item.i_AuditorInsertUserId;
                        oservicecomponentDto.d_AuditorInsertUser = item.d_AuditorInsertUser;
                        oservicecomponentDto.i_AuditorUpdateUserId = item.i_AuditorUpdateUserId;
                        oservicecomponentDto.d_AuditorUpdateUser = item.d_AuditorUpdateUser;

                        servicecomponent objEntity = servicecomponentAssembler.ToEntity(oservicecomponentDto);

                        dbContext.AddToservicecomponent(objEntity);
                        dbContext.SaveChanges();

                        //SErviceComponentField
                        var qServiceCompFields = (from a in dbContext.servicecomponentfields where a.v_ServiceComponentId == serviceComponentOld select a).ToList();
                        if (qServiceCompFields.Count > 0)
                        {
                            servicecomponentfieldsDto oservicecomponentfieldsDto = new servicecomponentfieldsDto();
                            foreach (var itemFields in qServiceCompFields)
                            {
                                serviceComponentFieldsOld = itemFields.v_ServiceComponentFieldsId;
                                serviceComponentFieldsNew = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
                                oservicecomponentfieldsDto.v_ServiceComponentFieldsId = serviceComponentFieldsNew;
                                oservicecomponentfieldsDto.v_ServiceComponentId = serviceComponentNew;
                                oservicecomponentfieldsDto.v_ComponentId = itemFields.v_ComponentId;
                                oservicecomponentfieldsDto.v_ComponentFieldId = itemFields.v_ComponentFieldId;
                                oservicecomponentfieldsDto.i_IsDeleted = itemFields.i_IsDeleted;
                                oservicecomponentfieldsDto.i_InsertUserId = itemFields.i_InsertUserId;
                                oservicecomponentfieldsDto.d_InsertDate = itemFields.d_InsertDate;
                                oservicecomponentfieldsDto.i_UpdateUserId = itemFields.i_UpdateUserId;
                                oservicecomponentfieldsDto.d_UpdateDate = itemFields.d_UpdateDate;


                                servicecomponentfields objEntityFields = servicecomponentfieldsAssembler.ToEntity(oservicecomponentfieldsDto);

                                dbContext.AddToservicecomponentfields(objEntityFields);
                                dbContext.SaveChanges();

                                //Values
                                var qServiceCompFieldsValues = (from a in dbContext.servicecomponentfieldvalues where a.v_ServiceComponentFieldsId == serviceComponentFieldsOld select a).ToList();
                                if (qServiceCompFieldsValues.Count > 0)
                                {
                                    servicecomponentfieldvaluesDto oservicecomponentfieldvaluesDto = new servicecomponentfieldvaluesDto();
                                    foreach (var itemValues in qServiceCompFieldsValues)
                                    {
                                        oservicecomponentfieldvaluesDto.v_ServiceComponentFieldValuesId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
                                        oservicecomponentfieldvaluesDto.v_ComponentFieldValuesId = itemValues.v_ComponentFieldValuesId;
                                        oservicecomponentfieldvaluesDto.v_ServiceComponentFieldsId = serviceComponentFieldsNew;
                                        oservicecomponentfieldvaluesDto.v_Value1 = itemValues.v_Value1;
                                        oservicecomponentfieldvaluesDto.v_Value2 = itemValues.v_Value2;
                                        oservicecomponentfieldvaluesDto.i_Index = itemValues.i_Index;
                                        oservicecomponentfieldvaluesDto.i_Value1 = itemValues.i_Value1;
                                        oservicecomponentfieldvaluesDto.i_IsDeleted = itemValues.i_IsDeleted;
                                        oservicecomponentfieldvaluesDto.i_InsertUserId = itemValues.i_InsertUserId;
                                        oservicecomponentfieldvaluesDto.d_InsertDate = itemValues.d_InsertDate;
                                        oservicecomponentfieldvaluesDto.i_UpdateUserId = itemValues.i_UpdateUserId;
                                        oservicecomponentfieldvaluesDto.d_UpdateDate = itemValues.d_UpdateDate;

                                        servicecomponentfieldvalues objEntityFieldsValues = servicecomponentfieldvaluesAssembler.ToEntity(oservicecomponentfieldvaluesDto);

                                        dbContext.AddToservicecomponentfieldvalues(objEntityFieldsValues);
                                        dbContext.SaveChanges();
                                    }
                                }
                            }


                        }


                    }
                    #endregion
                }
                #endregion

            }
            catch (Exception ex)
            {

                throw;
            }
        }
        #endregion

        public List<Categoria> GetAllComponentsByService(ref OperationResult pobjOperationResult, string pstrString)
        {

            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)SiNo.SI;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrString &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId.Value,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId,
                                 v_ServiceComponentId = A.v_ServiceComponentId,
                             });





                List<Categoria> xxx = new List<Categoria>();
                Categoria oCategoria = null;
                foreach (var item in query)
                {
                    oCategoria = new Categoria();
                    oCategoria.v_ComponentId = item.v_ComponentId;
                    oCategoria.v_ComponentName = item.v_ComponentName;
                    oCategoria.i_CategoryId = item.i_CategoryId;
                    oCategoria.v_CategoryName = item.v_CategoryName;// item.i_CategoryId.Value == -1 ? item.v_CategoryName : item.v_ServiceComponentStatusName;
                    oCategoria.v_ServiceComponentStatusName = item.v_ServiceComponentStatusName;
                    oCategoria.v_QueueStatusName = item.v_QueueStatusName;
                    oCategoria.i_ServiceComponentStatusId = item.i_ServiceComponentStatusId.Value;
                    xxx.Add(oCategoria);
                }

                var objData = xxx.AsEnumerable()
                        .Where(s => s.i_CategoryId != -1)
                        .GroupBy(x => x.i_CategoryId)
                        .Select(group => group.First());

                List<Categoria> obj = objData.ToList();

                Categoria objCategoriaList;
                List<Categoria> Lista = new List<Categoria>();

                //int CategoriaId_Old = 0;
                for (int i = 0; i < obj.Count(); i++)
                {
                    objCategoriaList = new Categoria();

                    objCategoriaList.i_CategoryId = obj[i].i_CategoryId.Value;
                    objCategoriaList.v_CategoryName = obj[i].v_CategoryName;
                    objCategoriaList.v_ServiceComponentStatusName = obj[i].v_ServiceComponentStatusName;
                    objCategoriaList.v_QueueStatusName = obj[i].v_QueueStatusName;
                    objCategoriaList.i_ServiceComponentStatusId = obj[i].i_ServiceComponentStatusId;
                    var x = query.ToList().FindAll(p => p.i_CategoryId == obj[i].i_CategoryId.Value);

                    x.Sort((z, y) => z.v_ComponentName.CompareTo(y.v_ComponentName));
                    ComponentDetailList objComponentDetailList;
                    List<ComponentDetailList> ListaComponentes = new List<ComponentDetailList>();
                    foreach (var item in x)
                    {
                        objComponentDetailList = new ComponentDetailList();

                        objComponentDetailList.v_ComponentId = item.v_ComponentId;
                        objComponentDetailList.v_ComponentName = item.v_ComponentName;
                        objComponentDetailList.v_ServiceComponentId = item.v_ServiceComponentId;
                        ListaComponentes.Add(objComponentDetailList);
                    }
                    objCategoriaList.Componentes = ListaComponentes;

                    Lista.Add(objCategoriaList);

                }



                pobjOperationResult.Success = 1;
                return Lista;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

	    public byte[] ObtenerImageMultimedia(string multimediaFileId)
	    {
	        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
	        return (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId select mf.b_File).SingleOrDefault();

	    }

        public List<ServiceComponentFieldValuesList> historialComponente(string pstrPersonId, string pstrComponentId)
	    {

	        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            var serviceComponentFieldValues = (from A in dbContext.service
                                               join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                               join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                               join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                               join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                               join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                               join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                               join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

                                               where  H.v_ComponentId == pstrComponentId
                                                       && B.i_IsDeleted == 0
                                                       && C.i_IsDeleted == 0
                                                        && A.v_PersonId == pstrPersonId
                                               select new ServiceComponentFieldValuesList
                                               {
                                                   d_ServiceDate = A.d_ServiceDate,
                                                   v_ComponentFieldId = G.v_ComponentFieldId,
                                                   v_ComponentFielName = G.v_TextLabel,
                                                   v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                   v_Value1 = D.v_Value1,
                                                   i_GroupId = G.i_GroupId.Value
                                               });

            var finalQuery = (from a in serviceComponentFieldValues.ToList()

                              let value1 = int.TryParse(a.v_Value1, out rpta)
                              join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                              equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                              from sp in sp_join.DefaultIfEmpty()

                              select new ServiceComponentFieldValuesList
                              {
                                  d_ServiceDate = a.d_ServiceDate,
                                  v_ComponentFieldId = a.v_ComponentFieldId,
                                  v_ComponentFielName = a.v_ComponentFielName,
                                  v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                  v_Value1 = a.v_Value1,
                                  v_Value1Name = sp == null ? "" : sp.v_Value1
                              }).ToList();


            return finalQuery;

	    }

        public List<ReporteAudioCoimolache> GetAudiometriaCoimolache(string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId


                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                    equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 join M in dbContext.systemparameter on new { a = B.i_MaritalStatusId.Value, b = 101 }
                                              equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()
                                 join N in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
                                 from N in N_join.DefaultIfEmpty()

                                 join E1 in dbContext.protocol on A.v_ProtocolId equals E1.v_ProtocolId

                                 join D1 in dbContext.organization on E1.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
                                 from D1 in D1_join.DefaultIfEmpty()

                                 join D2 in dbContext.organization on E1.v_EmployerOrganizationId equals D2.v_OrganizationId into D2_join
                                 from D2 in D2_join.DefaultIfEmpty()

                                 join et in dbContext.systemparameter on new { a = E1.i_EsoTypeId.Value, b = 118 }
                                            equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                                 from et in et_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = E.v_ServiceId, b = E.v_ComponentId }


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 
                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************  


                                 where A.v_ServiceId == pstrServiceId

                                 select new ReporteAudioCoimolache
                                 {
                                     FECHA = A.d_ServiceDate.Value,
                                     EMP_CLIENTE = D1.v_Name,
                                     EMP_CONTRATISTA =  D2.v_Name,
                                     NOMBRE_PACIENTE = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     GENERO = J.v_Value1,
                                     PUESTO = B.v_CurrentOccupation,
                                     FECHA_NACIMIENTO = B.d_Birthdate.Value,
                                     FIRMA_TECNICO = ptec.b_SignatureImage,
                                     FIRMA_MEDICO = pme.b_SignatureImage,
                                     FIRMA_PACIENTE = B.b_RubricImage,
                                     HUELLA_PACIENTE = B.b_FingerPrintImage
                                 });

                var serviceBL = new ServiceBL();
                var MedicalCenter = serviceBL.GetInfoMedicalCenter();
                var valores = ValoresComponente(pstrServiceId, "N009-ME000000415");

                var sql = (from a in objEntity.ToList()
                           select new ReporteAudioCoimolache
                           {
                               
                                FECHA = a.FECHA,
                                HORA = a.HORA,
                                EMP_CLIENTE = a.EMP_CLIENTE,
                                EMP_CONTRATISTA =  a.EMP_CONTRATISTA,
                                NOMBRE_PACIENTE = a.NOMBRE_PACIENTE,
                                GENERO = a.GENERO,
                                PUESTO = a.PUESTO,
                                FECHA_NACIMIENTO = a.FECHA_NACIMIENTO,
                                EDAD = GetAge(a.FECHA_NACIMIENTO.Value),
                                FIRMA_TECNICO = a.FIRMA_TECNICO,
                                FIRMA_MEDICO = a.FIRMA_MEDICO,
                                FIRMA_PACIENTE =a.FIRMA_PACIENTE,
                                HUELLA_PACIENTE = a.HUELLA_PACIENTE,

                                PREGUNTA_01 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003179") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003179").v_Value1,
                                PREGUNTA_02 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003180") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003180").v_Value1,
                                PREGUNTA_03 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003181") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003181").v_Value1,
                                PREGUNTA_04 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003182") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003182").v_Value1,
                                PREGUNTA_05 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003183") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003183").v_Value1,
                                PREGUNTA_06 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003184") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003184").v_Value1,
                                PREGUNTA_07 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003185") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003185").v_Value1,
                                PREGUNTA_08 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003186") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003186").v_Value1,
                                PREGUNTA_09 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003187") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003187").v_Value1,
                                PREGUNTA_10 = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003188") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003188").v_Value1,
                                CONDICION = valores.Count == 0 || valores.Find(p => p.v_ComponentFieldId == "N009-MF000003189") == null ? string.Empty : valores.Find(p => p.v_ComponentFieldId == "N009-MF000003189").v_Value1,
                           }).ToList();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<frmEsoAntecedentesPadre> ObtenerEsoAntecedentesPorGrupoId(int Grupo)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                int isNotDeleted = (int)SiNo.NO;

                var data = (from a in dbContext.systemparameter
                            where a.i_IsDeleted == isNotDeleted &&
                            a.i_GroupId == Grupo
                            select new frmEsoAntecedentesPadre 
                            {
                                GrupoId = a.i_GroupId,
                                ParametroId = a.i_ParameterId,
                                Nombre = a.v_Value1
                            }).ToList();


                foreach (var P in data)
                {
                    int grupoHijo = int.Parse(P.GrupoId.ToString() + P.ParametroId.ToString());
                    P.Hijos = (from a in dbContext.systemparameter
                                 where a.i_IsDeleted == isNotDeleted &&
                                 a.i_GroupId == grupoHijo
                                 select new frmEsoAntecedentesHijo
                                 {
                                    Nombre = a.v_Value1
                                 }).ToList();
                }

                return data;
            }
            catch (Exception e)
            {
                return new List<frmEsoAntecedentesPadre>();
            }
        }

	}
}
